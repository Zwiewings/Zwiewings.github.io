<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.11-1.17周报汇总</title>
    <url>/2021/01/18/1.11-1.17%E5%91%A8%E6%8A%A5%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>C</th>
<th>C++</th>
</tr>
</thead>
<tbody><tr>
<td>常规预处理命令</td>
<td>&lt;stdio.h&gt;</td>
<td><iostream>  后加using namespace std，声明存储位置；</td>
</tr>
<tr>
<td>输入</td>
<td>scanf（“%d,%d”，&amp;m,&amp;n）；</td>
<td>cin&gt;&gt;m&gt;&gt;n;</td>
</tr>
<tr>
<td>输出</td>
<td>printf（“%d”，m）；</td>
<td>cout&lt;&lt;m；</td>
</tr>
<tr>
<td>换行符</td>
<td>\n</td>
<td>endl（\n依旧沿用）</td>
</tr>
</tbody></table>
<h3 id="C-的数据类型"><a href="#C-的数据类型" class="headerlink" title="C++的数据类型"></a>C++的数据类型</h3><p><img src="file:///C:/Users/Juairu/AppData/Local/Temp/msohtmlclip1/01/clip_image001.png" alt="img"></p>
<p><u>*布尔常量：布尔常量其数据类型为bool ，其取值只有两个：false（假）和true（真）。</u></p>
<p>*C++的基本数据类型与C基本相同：</p>
<p>基本数据类型（以32位编译系统为例）</p>
<table>
<thead>
<tr>
<th>类型名</th>
<th>字宽</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>1</td>
<td>-128~127</td>
</tr>
<tr>
<td>signed char</td>
<td>1</td>
<td>-128~127</td>
</tr>
<tr>
<td>unsigned char</td>
<td>1</td>
<td>0~255</td>
</tr>
<tr>
<td>short [int]</td>
<td>2</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>signed short [int]</td>
<td>2</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>unsigned short [int]</td>
<td>2</td>
<td>0-65535</td>
</tr>
<tr>
<td>int</td>
<td>4</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>signed [int]</td>
<td>4</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>unsigned [int]</td>
<td>4</td>
<td>0-4294967295</td>
</tr>
<tr>
<td>long [int]</td>
<td>4</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>signed long [int]</td>
<td>4</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>unsigned long [int]</td>
<td>4</td>
<td>0-4294967295</td>
</tr>
<tr>
<td>float</td>
<td>4</td>
<td>约6位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>8</td>
<td>约12位有效数字</td>
</tr>
<tr>
<td>long double</td>
<td>16</td>
<td>约15位有效数字</td>
</tr>
</tbody></table>
<h3 id="定义C-语言的标识符应该遵循如下规则："><a href="#定义C-语言的标识符应该遵循如下规则：" class="headerlink" title="定义C++语言的标识符应该遵循如下规则："></a>定义C++语言的标识符应该遵循如下规则：</h3><p>(1)标识符只能由字母、数字和下划线三类字符组成。</p>
<p>(2)第一个字符必须为字母（第一个字符也可以是下划线，但通常被视为系统自定义的标识符）。</p>
<p>(3)大写字母和小写字母被认为是两个不同的字符。</p>
<p>(4)标识符长度不限，其有效长度通常依赖于机器类型，为便于阅读，一般用有意义的单词序列的命名方法。</p>
<p>(5)标识符不能是C++的关键字。</p>
<p>C++系统关键字是系统已经预定义的一些标识符，它们的意义和作用由系统规定。</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>含义描述</th>
<th>关键字</th>
<th>含义描述</th>
</tr>
</thead>
<tbody><tr>
<td>break</td>
<td>跳出循环体，结束循环</td>
<td>public</td>
<td>公有成员；公有继承</td>
</tr>
<tr>
<td>case</td>
<td>分支语句中的分支</td>
<td>return</td>
<td>从函数中返回</td>
</tr>
<tr>
<td>char</td>
<td>字符型数据</td>
<td>short</td>
<td>短整型数据</td>
</tr>
<tr>
<td>class</td>
<td>定义类的关键字</td>
<td>signed</td>
<td>有符号型数据</td>
</tr>
<tr>
<td>const</td>
<td>常量符号</td>
<td>sizeof</td>
<td>取数据类型长度运算符</td>
</tr>
<tr>
<td>continue</td>
<td>跳出本次循环，进行下一次</td>
<td>static</td>
<td>静态数据</td>
</tr>
<tr>
<td>default</td>
<td>分支语句中的默认分支</td>
<td>struct</td>
<td>定义结构体类型数据</td>
</tr>
<tr>
<td>delete</td>
<td>释放指针指向的内存块</td>
<td>switch</td>
<td>分支语句</td>
</tr>
<tr>
<td>do</td>
<td>do型循环</td>
<td>template</td>
<td>声明模板</td>
</tr>
<tr>
<td>double</td>
<td>双精度浮点型数据</td>
<td>this</td>
<td>本类指针</td>
</tr>
<tr>
<td>else</td>
<td>判断语句中的否定分支</td>
<td>typedef</td>
<td>重定义数据类型</td>
</tr>
<tr>
<td>enum</td>
<td>定义枚举型数据</td>
<td>union</td>
<td>定义联合体型数据</td>
</tr>
<tr>
<td>extern</td>
<td>声明外部变量</td>
<td>virtual</td>
<td>虚继承；虚函数</td>
</tr>
<tr>
<td>float</td>
<td>单精度浮点型数据</td>
<td>void</td>
<td>定义函数不返回数值</td>
</tr>
<tr>
<td>for</td>
<td>for型循环</td>
<td>while</td>
<td>while型循环</td>
</tr>
<tr>
<td>friend</td>
<td>友元类</td>
<td>int</td>
<td>整型数据</td>
</tr>
<tr>
<td>goto</td>
<td>跳转语句</td>
<td>long</td>
<td>长整型数据</td>
</tr>
<tr>
<td>if</td>
<td>条件判断语句</td>
<td>new</td>
<td>申请内存块</td>
</tr>
<tr>
<td>inline</td>
<td>声明为内联函数</td>
<td>operator</td>
<td>定义运算符重载</td>
</tr>
<tr>
<td>protected</td>
<td>保护成员；保护继承</td>
<td>private</td>
<td>私有成员；私有继承</td>
</tr>
</tbody></table>
<h3 id="C-中各类符号表示："><a href="#C-中各类符号表示：" class="headerlink" title="C++中各类符号表示："></a>C++中各类符号表示：</h3><table>
<thead>
<tr>
<th>转义字符</th>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>‘\a’</td>
<td>响铃符</td>
<td>用于输出</td>
</tr>
<tr>
<td>‘\b’</td>
<td>退格符</td>
<td>用于回退一个字符</td>
</tr>
<tr>
<td>‘\f’</td>
<td>换页符</td>
<td>用于输出</td>
</tr>
<tr>
<td>‘\r’</td>
<td>回车符</td>
<td>用于输出</td>
</tr>
<tr>
<td>‘\t’</td>
<td>水平制表符</td>
<td>用于制表</td>
</tr>
<tr>
<td>‘\’</td>
<td>反斜杠符</td>
<td>用于输出或文件的路径名中</td>
</tr>
<tr>
<td>‘\’’</td>
<td>单引号</td>
<td>用于输出单引号</td>
</tr>
<tr>
<td>‘\”’</td>
<td>双引号</td>
<td>用于输出双引号</td>
</tr>
<tr>
<td>‘\0’</td>
<td>空字符</td>
<td>用于结束标志</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>符号表示</th>
<th>含义描述</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法运算符，或正值运算符</td>
</tr>
<tr>
<td>-</td>
<td>减法运算符，或负值运算符</td>
</tr>
<tr>
<td>*</td>
<td>乘法运算符</td>
</tr>
<tr>
<td>/</td>
<td>除法运算符</td>
</tr>
<tr>
<td>%</td>
<td>求余运算符</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>符号表示</th>
<th>含义描述</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>==</td>
<td>相等</td>
</tr>
<tr>
<td>!=</td>
<td>不相等</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>符号表示</th>
<th>含义描述</th>
</tr>
</thead>
<tbody><tr>
<td>~</td>
<td>按位求反</td>
</tr>
<tr>
<td>&amp;</td>
<td>按位与</td>
</tr>
<tr>
<td>|</td>
<td>按位或</td>
</tr>
<tr>
<td>^</td>
<td>按位异或</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>符号表示</th>
<th>含义描述</th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>单目运算符，逻辑非</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>双目运算符，逻辑与</td>
</tr>
<tr>
<td>||</td>
<td>双目运算符，逻辑或</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>符号表示</th>
<th>含义描述</th>
</tr>
</thead>
<tbody><tr>
<td>+=</td>
<td>加赋值</td>
</tr>
<tr>
<td>*=</td>
<td>乘赋值</td>
</tr>
<tr>
<td>%=</td>
<td>求余赋值</td>
</tr>
<tr>
<td>&gt;&gt;=</td>
<td>右移位赋值</td>
</tr>
<tr>
<td>|=</td>
<td>按位或赋值</td>
</tr>
<tr>
<td>-=</td>
<td>减赋值</td>
</tr>
<tr>
<td>/=</td>
<td>除赋值</td>
</tr>
<tr>
<td>&lt;&lt;=</td>
<td>左移位赋值</td>
</tr>
<tr>
<td>&amp;=</td>
<td>按位与赋值</td>
</tr>
<tr>
<td>^=</td>
<td>按位异或赋值</td>
</tr>
</tbody></table>
<p>按位求反“~”是将各个二进制位由1变成0，由0变成1，它是一个单目运算符。</p>
<p>按位与“&amp;”是将两个二进制位的操作数从低位到高位依次对齐后，每位求与运算。只有两个都是1时，结果为1，否则为0。</p>
<p>按位或“|”是将两个二进制位的操作数从低位到高位依次对齐后，每位求或运算。只有两个都是0时，结果为0，否则为1。</p>
<p>按位异或“^”是将两个二进制位的操作数从低位到高位依次对齐后，每位求异或运算。只要两个位不同时，结果为1，否则为0。</p>
<p>左移“&lt;&lt;”是将一个二进制数的数按指定移动的位数向左移动，移掉的被丢弃，右边移出的空位补0。</p>
<p>右移“&gt;&gt;”是将一个二进制数的数按指定移动的位数向右移动，移掉的被丢弃，左边移出的空位或者一律补0或者补符号位，这要由机器决定。</p>
<h3 id="选择结构："><a href="#选择结构：" class="headerlink" title="选择结构："></a>选择结构：</h3><p>\1. if语句——单行if语句，多行if语句，多条件if语句，嵌套if（使用方式和c语言基本相同）</p>
<p>\2. 表达式？x：y——三目运算符（使用方法和c语言基本相同）</p>
<p>\3. Swtch语句——switch（整型和字符）{case 常量：break；}（使用方法和c语言基本相同）</p>
<p>\4. While与do whlie语句——while（条件）{循环体}/do{循环体}while（条件）（使用方法与c语言基本相同）</p>
<p>rand（）生成一个【0，1）的随机数</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习周报</tag>
      </tags>
  </entry>
  <entry>
    <title>1.18-1.24周报汇总</title>
    <url>/2021/01/18/1.18-1.24%E5%91%A8%E6%8A%A5%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h4 id="·函数的分文件编写："><a href="#·函数的分文件编写：" class="headerlink" title="·函数的分文件编写："></a>·函数的分文件编写：</h4><p>1.创建后缀名.h的头文件</p>
<p>2.创建后缀名.cpp的源文件</p>
<p>3.在头文件中写函数的声明</p>
<p>4.在源文件中写函数的定义：包含<iostream>的同时还需要包含创建的“自定义头文件”</p>
<h5 id="如上，再次使用的时候直接引用自定义头文件就能够使用已定义在另一文件的函数里。"><a href="#如上，再次使用的时候直接引用自定义头文件就能够使用已定义在另一文件的函数里。" class="headerlink" title="如上，再次使用的时候直接引用自定义头文件就能够使用已定义在另一文件的函数里。"></a>如上，再次使用的时候直接引用自定义头文件就能够使用已定义在另一文件的函数里。</h5><h4 id="·空指针和野指针："><a href="#·空指针和野指针：" class="headerlink" title="·空指针和野指针："></a>·空指针和野指针：</h4><p><strong>空指针：</strong>指针变量指向内存中编号为0的空间，用于初始化指针变量。</p>
<p><strong>（注：指向的内存不可以访问，0~255之间的内存编号为系统占用。）</strong></p>
<p>野指针：指针变量指向非法的内存空间【例如int*p=（int *）0x1100】</p>
<p><strong>由于指针的指向内容不一定在所申请的内存空间范围内，在程序中尽可能避免出现访问非法（未申请空间）的野指针。</strong></p>
<h4 id="·const修饰指针："><a href="#·const修饰指针：" class="headerlink" title="·const修饰指针："></a>·const修饰指针：</h4><p>1.const修饰指针——常量指针（const int*p=&amp;a）：指针的指向可以修改，但是指针指向的值不可以改</p>
<p>2.const修饰常量——指针常量（int * const p=&amp;a）：指针的指向不可以改，但是指针指向的值可以改</p>
<p>3.const即修饰指针又修饰常量（const int * const p=&amp;a）:指针的指向和指针指向的值都不能改</p>
<h4 id="·函数指针：指向函数的指针"><a href="#·函数指针：指向函数的指针" class="headerlink" title="·函数指针：指向函数的指针"></a>·函数指针：指向函数的指针</h4><p>函数具有可赋值给指针的物理内存地址，一个函数的函数名就是一个指针，它指向函数的代码。</p>
<p>一个函数的地址是该函数的进入点，也是调用函数的地址。</p>
<p>函数的调用可以通过函数名，也可以通过指向函数的指针来调用。</p>
<p>函数指针还允许将函数作为变元传递给其他函数。</p>
<p>不带括号和变量列表的函数名，这可以表示函数的地址，正如不带下标的数组名可以表示数组的首地址。</p>
<p>定义形式：</p>
<pre><code>    类型 （*指针变量名）（参数列表）；</code></pre>
<p>例如：</p>
<pre><code>    int (*p)(int i,int j);</code></pre>
<p>p是一个指针，它指向一个函数，该函数有2个整形参数，返回类型为int。</p>
<p>p首先和*结合，表明p是一个指针。然后再与（）结合，表明它指向的是一个函数。</p>
<p>指向函数的指针也称为函数指针。</p>
<p><strong>注意：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int *f(int i, int j);&#x2F;&#x2F;返回值是指针的函数f</span><br><span class="line"></span><br><span class="line">int (*p)(int i, int j);&#x2F;&#x2F;指向函数的指针p</span><br></pre></td></tr></table></figure>
<h4 id="·结构体："><a href="#·结构体：" class="headerlink" title="·结构体："></a>·结构体：</h4><h5 id="1-基本概念："><a href="#1-基本概念：" class="headerlink" title="1.基本概念："></a>1.基本概念：</h5><p>结构体属于用户自定义的数据类型，允许用户存储不同的数据类型</p>
<h5 id="2-结构体定义和使用："><a href="#2-结构体定义和使用：" class="headerlink" title="2.结构体定义和使用："></a>2.结构体定义和使用：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct 结构体名称 &#123; 结构体成员列表 &#125;；</span><br></pre></td></tr></table></figure>
<p>通过结构体创建变量的方式如下三种：**(创建变量时，struct 关键字可以省略)**</p>
<ul>
<li><strong>struct 结构体名 变量名</strong></li>
<li><strong>struct 结构体名 变量名 ={ 成员1值，成员2值……}</strong></li>
<li><strong>定义结构体时顺便创建变量</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在学习C++的过程中我们经常会用到.和::和：和-&gt;，在此整理一下这些常用符号的区别。 </span><br><span class="line"></span><br><span class="line"> 1、A.B则A为对象或者结构体(s1.age&#x3D;18;)；</span><br><span class="line"></span><br><span class="line"> 2、A-&gt;B则A为指针，-&gt;是成员提取，A-&gt;B是提取A中的成员B，A只能是指向类、结构、联合的指针；</span><br><span class="line"></span><br><span class="line"> 3*、::是作用域运算符，A::B表示作用域A中的名称B，A可以是名字空间、类、结构；</span><br><span class="line"></span><br><span class="line"> 4*、：一般用来表示继承；</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习周报</tag>
      </tags>
  </entry>
  <entry>
    <title>初来乍到，请多指教</title>
    <url>/2021/01/18/%E5%88%9D%E6%9D%A5%E4%B9%8D%E5%88%B0%EF%BC%8C%E8%AF%B7%E5%A4%9A%E6%8C%87%E6%95%99/</url>
    <content><![CDATA[<h3 id="哎，初来乍到，本座封艾羽，中二病晚期death，这里只是个简简单单的介绍。"><a href="#哎，初来乍到，本座封艾羽，中二病晚期death，这里只是个简简单单的介绍。" class="headerlink" title="哎，初来乍到，本座封艾羽，中二病晚期death，这里只是个简简单单的介绍。"></a>哎，初来乍到，本座封艾羽，中二病晚期death，这里只是个简简单单的介绍。</h3><h4 id="虽说我也不知道这玩意存在的意义到底是啥嘞，反正总之，存在即合理了嘛"><a href="#虽说我也不知道这玩意存在的意义到底是啥嘞，反正总之，存在即合理了嘛" class="headerlink" title="虽说我也不知道这玩意存在的意义到底是啥嘞，反正总之，存在即合理了嘛~"></a>虽说我也不知道这玩意存在的意义到底是啥嘞，反正总之，存在即合理了嘛~</h4><p>那么，就这样。</p>
<h1 id="今后还请多指教！"><a href="#今后还请多指教！" class="headerlink" title="今后还请多指教！"></a>今后还请多指教！</h1>]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
</search>
