<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>c++学习-1</title>
    <url>/2021/01/18/c++%E5%AD%A6%E4%B9%A0-1/</url>
    <content><![CDATA[<h1 id="c-基础（同c比较）"><a href="#c-基础（同c比较）" class="headerlink" title="c++基础（同c比较）"></a>c++基础（同c比较）</h1><table>
<thead>
<tr>
<th></th>
<th>C</th>
<th>C++</th>
</tr>
</thead>
<tbody><tr>
<td>常规预处理命令</td>
<td>&lt;stdio.h&gt;</td>
<td><iostream>  后加using namespace std，声明存储位置；</iostream></td>
</tr>
<tr>
<td>输入</td>
<td>scanf（“%d,%d”，&amp;m,&amp;n）；</td>
<td>cin&gt;&gt;m&gt;&gt;n;</td>
</tr>
<tr>
<td>输出</td>
<td>printf（“%d”，m）；</td>
<td>cout&lt;&lt;m；</td>
</tr>
<tr>
<td>换行符</td>
<td>\n</td>
<td>endl（\n依旧沿用）</td>
</tr>
</tbody></table>
<h2 id="C-的数据类型"><a href="#C-的数据类型" class="headerlink" title="C++的数据类型"></a>C++的数据类型</h2><p><img src="/2021/01/18/c++%E5%AD%A6%E4%B9%A0-1/pic-1.jpg" alt="pic-1"></p>
<p><u>*布尔常量：布尔常量其数据类型为bool ，其取值只有两个：false（假）和true（真）。</u></p>
<p>*C++的基本数据类型与C基本相同：</p>
<p>基本数据类型（以32位编译系统为例）</p>
<table>
<thead>
<tr>
<th>类型名</th>
<th>字宽</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>1</td>
<td>-128~127</td>
</tr>
<tr>
<td>signed char</td>
<td>1</td>
<td>-128~127</td>
</tr>
<tr>
<td>unsigned char</td>
<td>1</td>
<td>0~255</td>
</tr>
<tr>
<td>short [int]</td>
<td>2</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>signed short [int]</td>
<td>2</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>unsigned short [int]</td>
<td>2</td>
<td>0-65535</td>
</tr>
<tr>
<td>int</td>
<td>4</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>signed [int]</td>
<td>4</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>unsigned [int]</td>
<td>4</td>
<td>0-4294967295</td>
</tr>
<tr>
<td>long [int]</td>
<td>4</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>signed long [int]</td>
<td>4</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>unsigned long [int]</td>
<td>4</td>
<td>0-4294967295</td>
</tr>
<tr>
<td>float</td>
<td>4</td>
<td>约6位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>8</td>
<td>约12位有效数字</td>
</tr>
<tr>
<td>long double</td>
<td>16</td>
<td>约15位有效数字</td>
</tr>
</tbody></table>
<h2 id="定义C-语言的标识符应该遵循如下规则："><a href="#定义C-语言的标识符应该遵循如下规则：" class="headerlink" title="定义C++语言的标识符应该遵循如下规则："></a>定义C++语言的标识符应该遵循如下规则：</h2><p>(1)标识符只能由字母、数字和下划线三类字符组成。</p>
<p>(2)第一个字符必须为字母（第一个字符也可以是下划线，但通常被视为系统自定义的标识符）。</p>
<p>(3)大写字母和小写字母被认为是两个不同的字符。</p>
<p>(4)标识符长度不限，其有效长度通常依赖于机器类型，为便于阅读，一般用有意义的单词序列的命名方法。</p>
<p>(5)标识符不能是C++的关键字。</p>
<p>C++系统关键字是系统已经预定义的一些标识符，它们的意义和作用由系统规定。</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>含义描述</th>
<th>关键字</th>
<th>含义描述</th>
</tr>
</thead>
<tbody><tr>
<td>break</td>
<td>跳出循环体，结束循环</td>
<td>public</td>
<td>公有成员；公有继承</td>
</tr>
<tr>
<td>case</td>
<td>分支语句中的分支</td>
<td>return</td>
<td>从函数中返回</td>
</tr>
<tr>
<td>char</td>
<td>字符型数据</td>
<td>short</td>
<td>短整型数据</td>
</tr>
<tr>
<td>class</td>
<td>定义类的关键字</td>
<td>signed</td>
<td>有符号型数据</td>
</tr>
<tr>
<td>const</td>
<td>常量符号</td>
<td>sizeof</td>
<td>取数据类型长度运算符</td>
</tr>
<tr>
<td>continue</td>
<td>跳出本次循环，进行下一次</td>
<td>static</td>
<td>静态数据</td>
</tr>
<tr>
<td>default</td>
<td>分支语句中的默认分支</td>
<td>struct</td>
<td>定义结构体类型数据</td>
</tr>
<tr>
<td>delete</td>
<td>释放指针指向的内存块</td>
<td>switch</td>
<td>分支语句</td>
</tr>
<tr>
<td>do</td>
<td>do型循环</td>
<td>template</td>
<td>声明模板</td>
</tr>
<tr>
<td>double</td>
<td>双精度浮点型数据</td>
<td>this</td>
<td>本类指针</td>
</tr>
<tr>
<td>else</td>
<td>判断语句中的否定分支</td>
<td>typedef</td>
<td>重定义数据类型</td>
</tr>
<tr>
<td>enum</td>
<td>定义枚举型数据</td>
<td>union</td>
<td>定义联合体型数据</td>
</tr>
<tr>
<td>extern</td>
<td>声明外部变量</td>
<td>virtual</td>
<td>虚继承；虚函数</td>
</tr>
<tr>
<td>float</td>
<td>单精度浮点型数据</td>
<td>void</td>
<td>定义函数不返回数值</td>
</tr>
<tr>
<td>for</td>
<td>for型循环</td>
<td>while</td>
<td>while型循环</td>
</tr>
<tr>
<td>friend</td>
<td>友元类</td>
<td>int</td>
<td>整型数据</td>
</tr>
<tr>
<td>goto</td>
<td>跳转语句</td>
<td>long</td>
<td>长整型数据</td>
</tr>
<tr>
<td>if</td>
<td>条件判断语句</td>
<td>new</td>
<td>申请内存块</td>
</tr>
<tr>
<td>inline</td>
<td>声明为内联函数</td>
<td>operator</td>
<td>定义运算符重载</td>
</tr>
<tr>
<td>protected</td>
<td>保护成员；保护继承</td>
<td>private</td>
<td>私有成员；私有继承</td>
</tr>
</tbody></table>
<h2 id="C-中各类符号表示："><a href="#C-中各类符号表示：" class="headerlink" title="C++中各类符号表示："></a>C++中各类符号表示：</h2><table>
<thead>
<tr>
<th>转义字符</th>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>‘\a’</td>
<td>响铃符</td>
<td>用于输出</td>
</tr>
<tr>
<td>‘\b’</td>
<td>退格符</td>
<td>用于回退一个字符</td>
</tr>
<tr>
<td>‘\f’</td>
<td>换页符</td>
<td>用于输出</td>
</tr>
<tr>
<td>‘\r’</td>
<td>回车符</td>
<td>用于输出</td>
</tr>
<tr>
<td>‘\t’</td>
<td>水平制表符</td>
<td>用于制表</td>
</tr>
<tr>
<td>‘\’</td>
<td>反斜杠符</td>
<td>用于输出或文件的路径名中</td>
</tr>
<tr>
<td>‘\’’</td>
<td>单引号</td>
<td>用于输出单引号</td>
</tr>
<tr>
<td>‘\”’</td>
<td>双引号</td>
<td>用于输出双引号</td>
</tr>
<tr>
<td>‘\0’</td>
<td>空字符</td>
<td>用于结束标志</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>符号表示</th>
<th>含义描述</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法运算符，或正值运算符</td>
</tr>
<tr>
<td>-</td>
<td>减法运算符，或负值运算符</td>
</tr>
<tr>
<td>*</td>
<td>乘法运算符</td>
</tr>
<tr>
<td>/</td>
<td>除法运算符</td>
</tr>
<tr>
<td>%</td>
<td>求余运算符</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>符号表示</th>
<th>含义描述</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>==</td>
<td>相等</td>
</tr>
<tr>
<td>!=</td>
<td>不相等</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>符号表示</th>
<th>含义描述</th>
</tr>
</thead>
<tbody><tr>
<td>~</td>
<td>按位求反</td>
</tr>
<tr>
<td>&amp;</td>
<td>按位与</td>
</tr>
<tr>
<td>|</td>
<td>按位或</td>
</tr>
<tr>
<td>^</td>
<td>按位异或</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>符号表示</th>
<th>含义描述</th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>单目运算符，逻辑非</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>双目运算符，逻辑与</td>
</tr>
<tr>
<td>||</td>
<td>双目运算符，逻辑或</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>符号表示</th>
<th>含义描述</th>
</tr>
</thead>
<tbody><tr>
<td>+=</td>
<td>加赋值</td>
</tr>
<tr>
<td>*=</td>
<td>乘赋值</td>
</tr>
<tr>
<td>%=</td>
<td>求余赋值</td>
</tr>
<tr>
<td>&gt;&gt;=</td>
<td>右移位赋值</td>
</tr>
<tr>
<td>|=</td>
<td>按位或赋值</td>
</tr>
<tr>
<td>-=</td>
<td>减赋值</td>
</tr>
<tr>
<td>/=</td>
<td>除赋值</td>
</tr>
<tr>
<td>&lt;&lt;=</td>
<td>左移位赋值</td>
</tr>
<tr>
<td>&amp;=</td>
<td>按位与赋值</td>
</tr>
<tr>
<td>^=</td>
<td>按位异或赋值</td>
</tr>
</tbody></table>
<p>按位求反“~”是将各个二进制位由1变成0，由0变成1，它是一个单目运算符。</p>
<p>按位与“&amp;”是将两个二进制位的操作数从低位到高位依次对齐后，每位求与运算。只有两个都是1时，结果为1，否则为0。</p>
<p>按位或“|”是将两个二进制位的操作数从低位到高位依次对齐后，每位求或运算。只有两个都是0时，结果为0，否则为1。</p>
<p>按位异或“^”是将两个二进制位的操作数从低位到高位依次对齐后，每位求异或运算。只要两个位不同时，结果为1，否则为0。</p>
<p>左移“&lt;&lt;”是将一个二进制数的数按指定移动的位数向左移动，移掉的被丢弃，右边移出的空位补0。</p>
<p>右移“&gt;&gt;”是将一个二进制数的数按指定移动的位数向右移动，移掉的被丢弃，左边移出的空位或者一律补0或者补符号位，这要由机器决定。</p>
<h2 id="选择结构："><a href="#选择结构：" class="headerlink" title="选择结构："></a>选择结构：</h2><p>\1. if语句——单行if语句，多行if语句，多条件if语句，嵌套if（使用方式和c语言基本相同）</p>
<p>\2. 表达式？x：y——三目运算符（使用方法和c语言基本相同）</p>
<p>\3. Swtch语句——switch（整型和字符）{case 常量：break；}（使用方法和c语言基本相同）</p>
<p>\4. While与do whlie语句——while（条件）{循环体}/do{循环体}while（条件）（使用方法与c语言基本相同）</p>
<p>rand（）生成一个【0，1）的随机数</p>
<h1 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h1><h2 id="函数的分文件编写："><a href="#函数的分文件编写：" class="headerlink" title="函数的分文件编写："></a>函数的分文件编写：</h2><p>1.创建后缀名.h的头文件</p>
<p>2.创建后缀名.cpp的源文件</p>
<p>3.在头文件中写函数的声明</p>
<p>4.在源文件中写函数的定义：包含<iostream>的同时还需要包含创建的“自定义头文件”</iostream></p>
<p><strong>如上，再次使用的时候直接引用自定义头文件就能够使用已定义在另一文件的函数里。</strong></p>
<h1 id="指针："><a href="#指针：" class="headerlink" title="指针："></a>指针：</h1><h2 id="空指针和野指针："><a href="#空指针和野指针：" class="headerlink" title="空指针和野指针："></a>空指针和野指针：</h2><p><strong>空指针：</strong>指针变量指向内存中编号为0的空间，用于初始化指针变量。</p>
<p><strong>（注：指向的内存不可以访问，0~255之间的内存编号为系统占用。）</strong></p>
<p>野指针：指针变量指向非法的内存空间【例如int*p=（int *）0x1100】</p>
<p><strong>由于指针的指向内容不一定在所申请的内存空间范围内，在程序中尽可能避免出现访问非法（未申请空间）的野指针。</strong></p>
<h2 id="const修饰指针："><a href="#const修饰指针：" class="headerlink" title="const修饰指针："></a>const修饰指针：</h2><p>1.const修饰指针——常量指针（const int*p=&amp;a）：指针的指向可以修改，但是指针指向的值不可以改</p>
<p>2.const修饰常量——指针常量（int * const p=&amp;a）：指针的指向不可以改，但是指针指向的值可以改</p>
<p>3.const即修饰指针又修饰常量（const int * const p=&amp;a）:指针的指向和指针指向的值都不能改</p>
<h2 id="函数指针：指向函数的指针"><a href="#函数指针：指向函数的指针" class="headerlink" title="函数指针：指向函数的指针"></a>函数指针：指向函数的指针</h2><p>函数具有可赋值给指针的物理内存地址，一个函数的函数名就是一个指针，它指向函数的代码。</p>
<p>一个函数的地址是该函数的进入点，也是调用函数的地址。</p>
<p>函数的调用可以通过函数名，也可以通过指向函数的指针来调用。</p>
<p>函数指针还允许将函数作为变元传递给其他函数。</p>
<p>不带括号和变量列表的函数名，这可以表示函数的地址，正如不带下标的数组名可以表示数组的首地址。</p>
<p>定义形式：</p>
<pre><code>    类型 （*指针变量名）（参数列表）；</code></pre>
<p>例如：</p>
<pre><code>    int (*p)(int i,int j);</code></pre>
<p>p是一个指针，它指向一个函数，该函数有2个整形参数，返回类型为int。</p>
<p>p首先和*结合，表明p是一个指针。然后再与（）结合，表明它指向的是一个函数。</p>
<p>指向函数的指针也称为函数指针。</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h3><pre><code>int *f(int i, int j);//返回值是指针的函数f

int (*p)(int i, int j);//指向函数的指针p</code></pre>
<h1 id="结构体："><a href="#结构体：" class="headerlink" title="结构体："></a>结构体：</h1><h2 id="1-基本概念："><a href="#1-基本概念：" class="headerlink" title="1.基本概念："></a>1.基本概念：</h2><p>结构体属于用户自定义的数据类型，允许用户存储不同的数据类型</p>
<h2 id="2-结构体定义和使用："><a href="#2-结构体定义和使用：" class="headerlink" title="2.结构体定义和使用："></a>2.结构体定义和使用：</h2><pre><code>struct 结构体名称 &#123; 结构体成员列表 &#125;；</code></pre>
<p>通过结构体创建变量的方式如下三种：**(创建变量时，struct 关键字可以省略)**</p>
<ul>
<li><p><strong>struct 结构体名 变量名</strong></p>
</li>
<li><p><strong>struct 结构体名 变量名 ={ 成员1值，成员2值……}</strong></p>
</li>
<li><p><strong>定义结构体时顺便创建变量</strong></p>
</li>
</ul>
<h2 id="3-结构体数组"><a href="#3-结构体数组" class="headerlink" title="3.结构体数组"></a>3.结构体数组</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>将自定义的结构体放入数组中，方便自定义结构体的维护</p>
<h3 id="形如："><a href="#形如：" class="headerlink" title="形如："></a>形如：</h3><pre><code>struct 结构体名 数组名[元素个数] =&#123;&#123;&#125;，&#123;&#125;，&#123;&#125;......&#125;；</code></pre>
<h3 id="结构体数组遍历："><a href="#结构体数组遍历：" class="headerlink" title="结构体数组遍历："></a>结构体数组遍历：</h3><pre><code>for (int i = 0;i &lt; 3;i++)//遍历每个结构体
&#123;
    cout&lt;&lt;结构体名 数组名[i].成员&lt;&lt;endl;//即输出所有结构体的某一成员
&#125;</code></pre>
<h2 id="4-结构体指针："><a href="#4-结构体指针：" class="headerlink" title="4.结构体指针："></a>4.结构体指针：</h2><p>作用：通过指针访问结构体中成员</p>
<p><strong>使用操作符-&gt;可以通过结构体指针访问结构体属性</strong></p>
<pre><code>在学习C++的过程中我们经常会用到.和::和:和-&gt;，在此整理一下这些常用符号的区别。 

  1、A.B则A为对象或者结构体(s1.age=18;)；

  2、A-&gt;B则A为指针，-&gt;是成员提取，A-&gt;B是提取A中的成员B，A只能是指向类、结构、联合的指针；

  3*、::是作用域运算符，A::B表示作用域A中的名称B，A可以是名字空间、类、结构；

  4*、:一般用来表示继承；</code></pre>
<p>*<em>注意：定义指针时，指针的类型应该与被指向的结构体变量相符，即用“struct 结构体名 * 指针名”*</em></p>
<h2 id="5-结构体嵌套结构体"><a href="#5-结构体嵌套结构体" class="headerlink" title="5.结构体嵌套结构体"></a>5.结构体嵌套结构体</h2><p>作用：在一个结构体内嵌套另一个结构体，即将结构体的成员设置为结构体（参考嵌套if）</p>
<p><strong>注意：在定义外层结构体前，需要先定义内层结构体</strong></p>
<h2 id="6-结构体做函数参数"><a href="#6-结构体做函数参数" class="headerlink" title="6.结构体做函数参数"></a>6.结构体做函数参数</h2><p>作用：将结构体作为参数向函数中传递</p>
<p><strong>两种传递方式：值传递、地址传递</strong>（同基本数据类型相同）</p>
<h2 id="7-结构体中const使用场景"><a href="#7-结构体中const使用场景" class="headerlink" title="7.结构体中const使用场景"></a>7.结构体中const使用场景</h2><p>作用：用const来防止误操作，一旦有修改的操作就会报错</p>
<h1 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h1><h2 id="1-用处："><a href="#1-用处：" class="headerlink" title="1.用处："></a><strong>1.用处：</strong></h2><p>给一个变量起别名，通过多个变量名修改变量值</p>
<h2 id="2-形如："><a href="#2-形如：" class="headerlink" title="2.形如："></a><strong>2.形如：</strong></h2><pre><code>数据类型 &amp;别名 = 原名</code></pre>
<h2 id="3-注意事项：引用必须初始化，且在初始化后不可以改变"><a href="#3-注意事项：引用必须初始化，且在初始化后不可以改变" class="headerlink" title="3.注意事项：引用必须初始化，且在初始化后不可以改变"></a>3.注意事项：引用必须初始化，且在初始化后不可以改变</h2><h2 id="4-引用做函数参数"><a href="#4-引用做函数参数" class="headerlink" title="4.引用做函数参数"></a>4.引用做函数参数</h2><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p>
<p><strong>优点：</strong>可以简化指针修改实参</p>
<h2 id="5-引用做函数返回值"><a href="#5-引用做函数返回值" class="headerlink" title="5.引用做函数返回值"></a>5.引用做函数返回值</h2><p><strong>用法：</strong>函数调用可以作为左值</p>
<p><strong>（f（）=1000；先运行返回引用的函数f（）得到返回值，然后返回值=1000）</strong></p>
<p><strong>注意：不要返回局部变量引用——可给局部变量加static前缀，变成静态变量</strong></p>
<p><em>（第一次结果因为编译器做了保留，所以正确，但第二次局部变量已经被释放，结果会乱码错误。）</em></p>
<h2 id="6-引用的本质："><a href="#6-引用的本质：" class="headerlink" title="6.引用的本质："></a>6.引用的本质：</h2><p><strong>引用在c++内部的实现，实际上是一个指针常量</strong></p>
<h2 id="7-常量引用"><a href="#7-常量引用" class="headerlink" title="7.常量引用"></a>7.常量引用</h2><p><strong>作用：常量引用主要用来修饰形参，防止误操作，在函数形参列表中加const修饰形参，防止形参改变实参</strong></p>
<h1 id="函数提高："><a href="#函数提高：" class="headerlink" title="函数提高："></a>函数提高：</h1><h2 id="1-函数默认参数"><a href="#1-函数默认参数" class="headerlink" title="1.函数默认参数"></a>1.函数默认参数</h2><p><strong>语法：</strong></p>
<pre><code>返回值类型 函数名 （参数=默认值）&#123;函数体&#125;</code></pre>
<p>注意事项：</p>
<p>1.如果某个位置已经有了默认参数，那么之后都必须有默认值</p>
<p>2.如果函数声明中有默认参数，函数实现中不能有默认参数（重定义）</p>
<h2 id="2-函数占位参数"><a href="#2-函数占位参数" class="headerlink" title="2.函数占位参数"></a>2.函数占位参数</h2><p>c++中函数的形参列表可以有占位参数，用来做占位，调用函数时，必须填补该位置</p>
<p>语法：</p>
<pre><code>返回值类型 函数名 （数据类型无形参名）&#123;函数体&#125;</code></pre>
<p><strong>注意：占位参数也可以有默认参数</strong></p>
<h2 id="3-函数重载"><a href="#3-函数重载" class="headerlink" title="3.函数重载"></a>3.函数重载</h2><p>作用：函数名可以相同，提高复用性</p>
<h3 id="1-函数重载满足条件："><a href="#1-函数重载满足条件：" class="headerlink" title="1.函数重载满足条件："></a><strong>1.函数重载满足条件：</strong></h3><ul>
<li>同一个作用域下</li>
<li>函数名称相同</li>
<li>函数参数类型不同，或者个数不同，或者顺序不同</li>
</ul>
<p>*<strong>函数的返回值不可以作为函数重载的条件</strong></p>
<h3 id="2-注意事项："><a href="#2-注意事项：" class="headerlink" title="2.注意事项："></a>2.注意事项：</h3><ul>
<li><p>引用作为重载条件（int &amp;a——应用变量，const int &amp;a——应用常量）</p>
</li>
<li><p>函数重载遇到函数的默认参数（在默认参数影响下，输入的函数参数个数可以变化，并有可能与重载的其他函数重复，从而产生错误）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>c++学习</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习-3：algorithm头文件</title>
    <url>/2021/03/19/c++%E5%AD%A6%E4%B9%A0-3/</url>
    <content><![CDATA[<h1 id="头文件：algorithm"><a href="#头文件：algorithm" class="headerlink" title="头文件：algorithm"></a>头文件：algorithm</h1><p>algorithm意为”算法”,是C++的标准模版库（STL）中最重要的头文件之一，提供了大量基于迭代器的非成员模版函数。</p>
<h2 id="相关概念说明"><a href="#相关概念说明" class="headerlink" title="相关概念说明"></a>相关概念说明</h2><ol>
<li><strong>容器</strong> 容器是用来存放各种数据的一个东西，<code>&lt;algorithm&gt;</code>中的算法是针对容器设计的。因此，不论数据是一些<code>int</code>，<code>char</code>还是自定义的<code>class</code>，<code>&lt;algorithm&gt;</code>中的函数都可以正确应对。<code>vector</code>是最常用的容器。</li>
<li><strong>迭代器</strong> 迭代器是与容器进行配套使用的。它的作用是对容器中的元素进行遍历，比如数组的指针就可以看作一种迭代器。迭代器一般支持解引用（<code>operator*()</code>）、自加（<code>operator++()</code>）、相等（<code>operator==()</code>）等操作。</li>
<li><strong>谓词</strong> 谓词是用来对<code>&lt;algorithm&gt;</code>中的函数进行定制操作的。谓词可以是lambda表达式或是函数/函数指针，并且<code>&lt;algorithm&gt;</code>中只有一元谓词和二元谓词，即函数只能接收一个或两个参数。对于需要额外参数的谓词可以使用lambda表达式的捕获功能。</li>
<li><strong><code>pair</code></strong> 部分算法会有两个返回值，<code>pair</code>有两个成员<code>first</code>和<code>second</code>，用来将两个值进行打包返回。</li>
</ol>
<h2 id="用到的主要参数说明"><a href="#用到的主要参数说明" class="headerlink" title="用到的主要参数说明"></a>用到的主要参数说明</h2><ul>
<li><code>beg</code>和<code>end</code>是表示元素范围的迭代器。</li>
<li><code>beg2</code>是第二个输入序列开始位置的迭代器，<code>end2</code>表示第二个序列末尾位置（如果有的话）。如果没有<code>end2</code>，则假定<code>beg2</code>表示的序列与<code>beg</code>和<code>end</code>表示的序列一样大。<code>beg</code>和<code>beg2</code>不必是相同的类型，但两个序列中的元素都要能调用给定的可调用对像。比如<code>beg</code>是一个<code>std::vector&lt;int&gt;::iterator</code>，而<code>beg2</code>可以是一个<code>std::deque&lt;int&gt;::iterator</code>。</li>
<li><code>dest</code>是表示目的序列的迭代器，目的序列必须保证能够存储算法生成的所有元素。若无法确定大小，可以调用<code>std::back_inserter()</code>函数获取目的序列的插入迭代器。</li>
<li><code>unaryPred</code>和<code>binayPred</code>是一元和二元谓词，其实参都是序列中的元素。</li>
<li><code>comp</code>是一个二元谓词，用于比较两个元素。</li>
<li><code>unaryOp</code>和<code>binaryOp</code>是可调用对象。</li>
</ul>
<p>此外，部分算法要求序列是有序的，默认是使用小于运算符（<code>&lt;</code>）定义的升序。若使用谓词版本，则有序是按<code>comp</code>升序。</p>
<h2 id="常用函数及用法"><a href="#常用函数及用法" class="headerlink" title="常用函数及用法"></a>常用函数及用法</h2><h3 id="非修改性序列操作（12个）"><a href="#非修改性序列操作（12个）" class="headerlink" title="非修改性序列操作（12个）"></a>非修改性序列操作（12个）</h3><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><ul>
<li>对序列中的每个元素执行某操作 for_each()</li>
</ul>
<h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ul>
<li>在序列中找出某个值的第一次出现的位置 find()   利用底层元素的等于操作符，对范围内的元素与输入的值进行比较。当匹配时，结束搜索，返回该元素的一个 InputIterator 。</li>
<li>在序列中找出符合某谓词的第一个元素 find_if()</li>
<li>在序列中找出一子序列的最后一次出现的位置 find_end()</li>
<li>在序列中找出第一次出现指定值集中之值的位置 find_first_of()</li>
<li>在序列中找出相邻的一对值 adjacent_find()</li>
</ul>
<h4 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h4><ul>
<li>在序列中统计某个值出现的次数 count()</li>
<li>在序列中统计与某谓词匹配的次数 count_if()</li>
</ul>
<h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><ul>
<li>找出两个序列相异的第一个元素 mismatch()</li>
<li>两个序列中的对应元素都相同时为真 equal()</li>
</ul>
<h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><ul>
<li>在序列中找出一子序列的第一次出现的位置 search()</li>
<li>在序列中找出一值的连续n次出现的位置 search_n()</li>
</ul>
<h3 id="修改性序列操作（27个）"><a href="#修改性序列操作（27个）" class="headerlink" title="修改性序列操作（27个）"></a>修改性序列操作（27个）</h3><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><ul>
<li>从序列的第一个元素起进行复制 copy()</li>
<li>从序列的最后一个元素起进行复制 copy_backward()</li>
</ul>
<h4 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h4><ul>
<li>交换两个元素 swap()</li>
<li>交换指定范围的元素 swap_ranges()</li>
<li>交换由迭代器所指的两个元素 iter_swap()</li>
</ul>
<h4 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h4><ul>
<li>将某操作应用于指定范围的每个元素 transform()</li>
</ul>
<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><ul>
<li>用一个给定值替换一些值 replace()</li>
<li>替换满足谓词的一些元素 replace_if()</li>
<li>复制序列时用一给定值替换元素 replace_copy()</li>
<li>复制序列时替换满足谓词的元素 replace_copy_if()</li>
</ul>
<h4 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h4><ul>
<li>用一给定值取代所有元素 fill()</li>
<li>用一给定值取代前n个元素 fill_n()</li>
</ul>
<h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><ul>
<li>用一操作的结果取代所有元素 generate()</li>
<li>用一操作的结果取代前n个元素 generate_n()</li>
</ul>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul>
<li>删除具有给定值的元素 remove()</li>
<li>删除满足谓词的元素 remove_if()</li>
<li>复制序列时删除具有给定值的元素 remove_copy()</li>
<li>复制序列时删除满足谓词的元素 remove_copy_if()</li>
</ul>
<h4 id="唯一"><a href="#唯一" class="headerlink" title="唯一"></a>唯一</h4><ul>
<li>删除相邻的重复元素 unique()</li>
<li>复制序列时删除相邻的重复元素 unique_copy()</li>
</ul>
<h4 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h4><ul>
<li>反转元素的次序 reverse()</li>
<li>复制序列时反转元素的次序 reverse_copy()</li>
</ul>
<h4 id="环移"><a href="#环移" class="headerlink" title="环移"></a>环移</h4><ul>
<li>循环移动元素 rotate()</li>
<li>复制序列时循环移动元素 rotate_copy()</li>
</ul>
<h4 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h4><ul>
<li>采用均匀分布来随机移动元素 random_shuffle()</li>
</ul>
<h4 id="划分"><a href="#划分" class="headerlink" title="划分"></a>划分</h4><ul>
<li>将满足某谓词的元素都放到前面 partition()</li>
<li>将满足某谓词的元素都放到前面并维持原顺序 stable_partition()</li>
</ul>
<h3 id="序列排序及相关操作（27个）"><a href="#序列排序及相关操作（27个）" class="headerlink" title="序列排序及相关操作（27个）"></a>序列排序及相关操作（27个）</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul>
<li>以很好的平均效率排序 sort()</li>
<li>并维持相同元素的原有顺序 stable_sort()</li>
<li>将序列的前一部分排好序 partial_sort()</li>
<li>复制的同时将序列的前一部分排好序 partial_sort_copy()</li>
<li>将第n各元素放到它的正确位置 nth_element()</li>
</ul>
<h4 id="二分检索"><a href="#二分检索" class="headerlink" title="二分检索"></a>二分检索</h4><ul>
<li>找到大于等于某值的第一次出现 lower_bound()</li>
<li>找到大于某值的第一次出现 upper_bound()</li>
<li>找到（在不破坏顺序的前提下）可插入给定值的最大范围 equal_range()</li>
<li>在有序序列中确定给定元素是否存在 binary_search()</li>
</ul>
<h4 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h4><ul>
<li>归并两个有序序列 merge()</li>
<li>归并两个接续的有序序列 inplace_merge()</li>
</ul>
<h4 id="有序结构上的集合操作"><a href="#有序结构上的集合操作" class="headerlink" title="有序结构上的集合操作"></a>有序结构上的集合操作</h4><ul>
<li>一序列为另一序列的子序列时为真 includes()</li>
<li>构造两个集合的有序并集 set_union()</li>
<li>构造两个集合的有序交集 set_intersection()</li>
<li>构造两个集合的有序差集 set_difference()</li>
<li>构造两个集合的有序对称差集（并-交） set_symmetric_difference()</li>
</ul>
<h4 id="堆操作"><a href="#堆操作" class="headerlink" title="堆操作"></a>堆操作</h4><ul>
<li>向堆中加入元素 push_heap()</li>
<li>从堆中弹出元素 pop_heap()</li>
<li>从序列构造堆 make_heap()</li>
<li>给堆排序 sort_heap()</li>
</ul>
<h4 id="最大和最小"><a href="#最大和最小" class="headerlink" title="最大和最小"></a>最大和最小</h4><ul>
<li>两个值中较小的 min()</li>
<li>两个值中较大的 max()</li>
<li>序列中的最小元素 min_element()</li>
<li>序列中的最大元素 max_element()</li>
</ul>
<h4 id="词典比较"><a href="#词典比较" class="headerlink" title="词典比较"></a>词典比较</h4><ul>
<li>两个序列按字典序的第一个在前 lexicographical_compare()</li>
</ul>
<h4 id="排列生成器"><a href="#排列生成器" class="headerlink" title="排列生成器"></a>排列生成器</h4><ul>
<li>按字典序的下一个排列 next_permutation()</li>
<li>按字典序的前一个排列 prev_permutation() </li>
</ul>
<p>其他详细内容：<a href="https://www.lagou.com/lgeduarticle/9665.html">https://www.lagou.com/lgeduarticle/9665.html</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>c++学习</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习-4：string头文件</title>
    <url>/2021/03/23/c++%E5%AD%A6%E4%B9%A0-4/</url>
    <content><![CDATA[<h1 id="头文件：string"><a href="#头文件：string" class="headerlink" title="头文件：string"></a>头文件：string</h1><h2 id="用于简化操作的常用函数"><a href="#用于简化操作的常用函数" class="headerlink" title="用于简化操作的常用函数"></a>用于简化操作的常用函数</h2><ul>
<li><p>string变量读取单个字符用s[i]可以读出</p>
</li>
<li><p>输入带空格的字符串，用getline(cin,a)；(a为字符串类型变量)</p>
</li>
<li><p>str.=“”——清空</p>
</li>
<li><p>str.empty()——是否为空</p>
</li>
<li><p>str.size()——str长度</p>
</li>
<li><p>swap(s1，s2)——交换s1，s2</p>
</li>
<li><p>str. insert(x,“aaa”)——在下标x处插入aaa</p>
</li>
<li><p>str.substr(x,y)——读出下标为x开始长度为y的字符串</p>
</li>
<li><p>str.erase(x,y)——移除下标x长度为y的字符</p>
</li>
<li><p>str.find(“字符或字符串”)——找str中第一次出现的下标，找不到就是-1</p>
</li>
<li><p>while((i=str.find(“a”,i))!=-1) { i++; cout&lt;&lt;i&lt;&lt;endl; }  ——读出所有a字符出现的下标</p>
<p>  (基本思路是找到一个就从那个下标+1继续找)</p>
</li>
<li><p>str.replace(x，y，“aa”)——用aa替换(x，y)(删掉下标x开始长度为y个，在下标为x处插入aa)</p>
</li>
</ul>
<h2 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h2><p>string s——生成一个空字符串s</p>
<p>string s(str) ——拷贝构造函数 生成str的复制品</p>
<p>string s(str,stridx)——将字符串str内“始于位置stridx”的部分当作字符串的初值</p>
<p>string s(str,stridx,strlen) ——将字符串str内“始于stridx且长度顶多strlen”的部分作为字符串的初值</p>
<p>string s(cstr) ——将C字符串作为s的初值</p>
<p>string s(chars,chars_len) ——将C字符串前chars_len个字符作为字符串s的初值。</p>
<p> string s(num,c) ——生成一个字符串，包含num个c字符</p>
<p> string s(beg,end) ——以区间beg;end(不包含end)内的字符作为字符串s的初值</p>
<p>s.~string() ——销毁所有字符，释放内存</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul>
<li><p> =，assign()——赋以新值</p>
</li>
<li><p>swap()——交换两个字符串的内容</p>
</li>
<li><p>+=，append()，push_back()——在尾部添加字符</p>
</li>
<li><p>insert()——插入字符</p>
</li>
<li><p>erase()——删除字符</p>
</li>
<li><p>clear()——删除全部字符</p>
</li>
<li><p>replace()——替换字符</p>
</li>
<li><p>+——串联字符串</p>
</li>
<li><p>==，!=，&lt;，&lt;=，&gt;，&gt;=，compare()——比较字符串</p>
</li>
<li><p>size(),length()——返回字符数量</p>
</li>
<li><p>max_size()——返回字符的可能最大个数</p>
</li>
<li><p>empty()——判断字符串是否为空</p>
</li>
<li><p>capacity()——返回重新分配之前的字符容量</p>
</li>
<li><p>reserve()——保留一定量内存以容纳一定数量的字符</p>
</li>
<li><p> [ ], at()——存取单一字符</p>
</li>
<li><p>“&gt;&gt;”,getline()——从stream读取某值</p>
</li>
<li><p>” &lt;&lt;“ ——将谋值写入stream</p>
</li>
<li><p>copy()——将某值赋值为一个C_string</p>
</li>
<li><p>c_str()——将内容以C_string返回</p>
</li>
<li><p> data()——将内容以字符数组形式返回</p>
</li>
<li><p>substr()——返回某个子字符串</p>
</li>
<li><p>begin() end()——提供类似STL的迭代器支持</p>
</li>
<li><p> rbegin() rend()——逆向迭代器</p>
</li>
<li><p>get_allocator()——返回配置器</p>
</li>
</ul>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>find()<br>rfind()<br>find_first_of()<br>find_last_of()<br>find_first_not_of()<br>find_last_not_of()</p>
<p>这些函数返回符合搜索条件的字符区间内的第一个字符的索引，没找到目标就返回npos。所有的函数的参数说明如下：<br>第一个参数是被搜寻的对象。第二个参数（可有可无）指出string内的搜寻起点索引，第三个参数（可有可无）指出搜寻的字符个数。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>c++学习</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo基础命令行</title>
    <url>/2021/01/17/hexo%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="hexo的基础命令行："><a href="#hexo的基础命令行：" class="headerlink" title="hexo的基础命令行："></a>hexo的基础命令行：</h1><h2 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h2><pre><code class="undefined">hexo s</code></pre>
<ul>
<li>启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/">http://localhost:4000/</a></li>
<li><code>hexo s</code> 是 <code>hexo server</code> 的缩写，命令效果一致。</li>
<li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可。</li>
<li>对 Hexo 根目录 <code>_config.yml</code> 的修改，需要重启本地服务器后才能预览效果。</li>
<li>预览草稿文章 <code>hexo s --drafts</code></li>
</ul>
<h2 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h2><pre><code class="cpp">hexo new &quot;title&quot;
hexo new  draft &quot;草稿文章&quot;
hexo new page</code></pre>
<ul>
<li>新建一个title.md博客文章</li>
<li>draft 为草稿文档，不会展现在博客上，可用<code>hexo publish &quot;草稿文章&quot;</code> 发布成正式文章</li>
<li><code>hexo new page</code> 创建一个文件夹</li>
</ul>
<h2 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h2><pre><code class="undefined">hexo d</code></pre>
<ul>
<li>自动生成网站静态文件，并部署到设定的仓库。</li>
<li><code>hexo d</code> 是 <code>hexo deploy</code> 的缩写，命令效果一致。</li>
</ul>
<h2 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h2><pre><code class="undefined">hexo clean</code></pre>
<ul>
<li>清除缓存文件 db.json 和已生成的静态文件 public 。</li>
<li>网站显示异常时可以执行这条命令试试</li>
</ul>
<h2 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h2><pre><code class="undefined">hexo g</code></pre>
<p>生成网站静态文件到默认设置的 public 文件夹。</p>
<ul>
<li>便于查看网站生成的静态文件或者手动部署网站；</li>
<li>如果使用自动部署，不需要先执行该命令；</li>
<li><code>hexo g</code> 是 <code>hexo generate</code> 的缩写，命令效果一致。</li>
</ul>
<pre><code class="undefined">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre>
<p>部署发布，命令可用&amp;&amp;连接</p>
<p>原创封面</p>
<p><img src="/2021/01/17/hexo%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E8%A1%8C/c++cover.jpg" alt="c++cover"></p>
<p><img src="/2021/01/17/hexo%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E8%A1%8C/Linux-cover.jpg" alt="Linux-cover"></p>
<p><img src="/2021/01/17/hexo%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E8%A1%8C/%E7%BD%91%E9%A1%B5%E5%9F%BA%E7%A1%80cover.jpg" alt="网页基础cover"></p>
<p><img src="/2021/01/17/hexo%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E8%A1%8C/%E6%9C%AA%E5%88%86%E7%B1%BBcover.jpg" alt="未分类cover"></p>
<p><img src="/2021/01/17/hexo%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E8%A1%8C/%E7%BA%BF%E6%80%A7%E8%A1%A8cover.jpg" alt="线性表cover"></p>
<p><img src="/2021/01/17/hexo%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E8%A1%8C/%E8%99%9A%E5%B9%BBcover.jpg" alt="虚幻cover"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>hexo使用</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-2</title>
    <url>/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2/</url>
    <content><![CDATA[<h1 id="线性表-单链表"><a href="#线性表-单链表" class="headerlink" title="线性表-单链表"></a>线性表-单链表</h1><p>【Elemtype为数据类型】</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="链表结点结构体创建"><a href="#链表结点结构体创建" class="headerlink" title="链表结点结构体创建"></a>链表结点结构体创建</h3><pre><code>typedef struct LNode        //创建结点类型
&#123;
    elemtype data;         //结点中包含数据域
    struct LNode *next;    //结点中包含指向下一个结点的指针
&#125;*Linklist                 //将该类型定义为一个链表（常使用指针方式价）</code></pre>
<h3 id="尾插法创建"><a href="#尾插法创建" class="headerlink" title="尾插法创建"></a>尾插法创建</h3><pre><code>void create(Linklist &amp;L,int n)
&#123;
    L=new Lnode;
    L-&gt;next=NULL;
    if(n&gt;0) 
    &#123;
        Lnode *E=L;
        int i,a;
        struct Lnode *p;
        cin&gt;&gt;a;
        for(i=1;i&lt;=n;i++)
        &#123;
        p=new Lnode;
        p-&gt;data=a;
        E-&gt;next=p;
        p-&gt;next=NULL;
        E=p;
        cin&gt;&gt;a;
        &#125;
    &#125;
&#125;
</code></pre>
<h3 id="头插法创建"><a href="#头插法创建" class="headerlink" title="头插法创建"></a>头插法创建</h3><pre><code>void create(Linklist &amp;L)
&#123;
    L=new Lnode;
    L-&gt;next=NULL;
    int i,a;
    struct Lnode *p;
    cin&gt;&gt;a;
    for(i=1;a!=-1;i++)
    &#123;
    p=new Lnode;
    p-&gt;data=a;
    p-&gt;next=L-&gt;next;
    L-&gt;next=p;
    cin&gt;&gt;a;
    &#125;
&#125;
</code></pre>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><pre><code>bool init(Linklist &amp;L)       //传址创建的链表
&#123;
    L=new LNode;            //新生成一个结点，让头指针指向头结点
    L-&gt;next=NULL;          //为统一操作，头结点仅作为首元结点的前驱，数据域不放入数据，且指针域指向空
    return true;           //返回值提示完成初始化
&#125;</code></pre>
<h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><p>单链表的取值需要顺序遍历，耗时较长，故而不适合频繁获取特定位置的值</p>
<pre><code>bool getelem(Linklist &amp;L,int i,elemtype &amp;e)
//传址数据所在的表，并且传值需要取值的元素序号i，将得到的值传给e
&#123;
    int j;
    LNode *p=L-&gt;next;               //令p指向首元结点
    for(j=1;j&lt;i&amp;&amp;p!=NULL;j++)       //j作为计数器，确定遍历到的位置，当p指针指向空或j==i时结束循环
    &#123;
        p=p-&gt;next;                  //让p指向p的下一个结点，实现p后移
    &#125;                               //结束循环时，j==i，p指向的结点为第i-1个结点
     if(p==NULL) return false;       //如果p指针指向空，则返回取值失败
    e=p-&gt;next-&gt;data;                //否则，将p指向结点的下一个结点的数据域赋给e
    return true;                   //返回取值完成
&#125;</code></pre>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>单链表的查找同顺序表一样，需要遍历整个表，比较每个数据域和待查找值，若相同则返回其序号，若始终不相同则返回查找失败</p>
<pre><code>bool find(Linklist &amp;L,LNode *&amp;p,elemtype a)
//传址需要查找的表，和返回序号的i，同时传值需要查找的数据a
&#123;
    int j;
    p=L-&gt;next;
    for(j=1;p-&gt;next!=NULL;j++)      //j作为计数器，确定遍历到的位置，当p指针指向为空时结束循环
    &#123;
        if(p-&gt;data==a) break;       //查找到与数据a相同的数据域，提前退出循环
        p=p-&gt;next;                  //p指针继续后移，继续遍历整个链表
    &#125;
    if(p-&gt;next==NULL&amp;&amp;p-&gt;data!=a)   return false;  
    //如果p指针已经指向尾结点，且尾结点数据域域不等于a，则查找失败
    q=p;                         //否则令q等于p，得到指向该元素的指针
    return true;                   //返回查找成功
&#125;</code></pre>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>插入时，需要先让新结点连接需要插入位置前驱的后一个结点，再让前驱的next指针指向新结点，否则会直接丢失后面数据的地址</p>
<pre><code>bool insert(Linklist &amp;L,int i，elem e)
//传址链表，需要插入的位置i，需要插入的元素值e
&#123;
    int j;
    Lnode *p=L-&gt;next;                //使p指针指向首元结点
    Lnode *s=new Lnode;              //新建一个结点，并用s指针指向它
    s-&gt;data=e;                       //将新建结点的数据域赋为e
    for(j=0;j&lt;i-1&amp;&amp;p!=NULL;j++)      
    //当j移动到需要插入位置的前驱时或者链表结束时结束循环
    &#123;
        p=p-&gt;next;                   //让p指向下一个结点
    &#125;
    if(p==NULL) return false;        //如果p指向不合法位置则返回插入失败
    s-&gt;next=p-&gt;next;                 //否则让s的next指针指向p的下一个结点
    p-&gt;next=s;                       //并让p的next指针指向s
    return true;                     //返回成功插入
&#125;</code></pre>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><pre><code>bool del(Linklist &amp;L,int i)
&#123;
    int j;
    Lnode *p=L-&gt;next;                //使p指向首元结点
    for(j=0;j&lt;i-1&amp;&amp;p!=NULL)           
    //当j移动到需要删除位置的前驱或链表结束时结束循环
    &#123;
        p=p-&gt;next;                  //让p指向p的下一个结点
    &#125;
    if(p=NULL) return false;        //p指向不合法位置时，返回删除失败
    p-&gt;next=p-&gt;next-&gt;next;          //让p的next指针等于p下一个结点的next
    return true;                    //返回删除成功
&#125;</code></pre>
<h2 id="实际题目"><a href="#实际题目" class="headerlink" title="实际题目"></a>实际题目</h2><h3 id="R7-3-单链表的创建及遍历-20-分"><a href="#R7-3-单链表的创建及遍历-20-分" class="headerlink" title="R7-3 单链表的创建及遍历 (20 分)"></a>R7-3 单链表的创建及遍历 (20 分)</h3><p>读入n值及n个整数，建立单链表并遍历输出。</p>
<p>输入格式:<br>读入n及n个整数。</p>
<p>输出格式:<br>输出n个整数，以空格分隔（最后一个数的后面没有空格）。</p>
<p>输入样例:<br>在这里给出一组输入。例如：</p>
<pre><code>2
10 5</code></pre>
<p>输出样例:<br>在这里给出相应的输出。例如：</p>
<pre><code>10 5</code></pre>
<p><strong>解法：</strong></p>
<pre><code class="c++">#include&lt;iostream&gt;
using namespace std;

typedef struct Lnode
&#123;
    int data;
    struct Lnode *next;
&#125;*Linklist;

void create(Linklist &amp;L,int n)
&#123;
    L=new Lnode;
    L-&gt;next=NULL;
    if(n&gt;0) 
    &#123;
        Lnode *E=L;
        int i,a;
        struct Lnode *p;
        cin&gt;&gt;a;
        for(i=1;i&lt;=n;i++)
        &#123;
        p=new Lnode;
        p-&gt;data=a;
        E-&gt;next=p;
        p-&gt;next=NULL;
        E=p;
        cin&gt;&gt;a;
        &#125;
    &#125;
&#125;

int putout(Linklist &amp;L)
&#123;
    int i;
        struct Lnode *p=L;
        if(L-&gt;next==NULL) return 0;
    for(i=0;p-&gt;next-&gt;next!=NULL;i++)
    &#123;
        cout&lt;&lt;p-&gt;next-&gt;data&lt;&lt;&quot; &quot;;
        p=p-&gt;next;
    &#125;
    cout&lt;&lt;p-&gt;next-&gt;data;
    return 0;
&#125;

int main()
&#123;
    Linklist list;
    int n;
    cin&gt;&gt;n;
    create(list,n);
    putout(list);
    return 0;
&#125;</code></pre>
<h3 id="R7-1-两个有序链表序列的合并-20-分"><a href="#R7-1-两个有序链表序列的合并-20-分" class="headerlink" title="R7-1 两个有序链表序列的合并 (20 分)"></a>R7-1 两个有序链表序列的合并 (20 分)</h3><p>已知两个非降序链表序列S1与S2，设计函数构造出S1与S2合并后的新的非降序链表S3。</p>
<p>输入格式:<br>输入分两行，分别在每行给出由若干个正整数构成的非降序序列，用−1表示序列的结尾（−1不属于这个序列）。数字用空格间隔。</p>
<p>输出格式:<br>在一行中输出合并后新的非降序链表，数字间用空格分开，结尾不能有多余空格；若新链表为空，输出NULL。</p>
<p>输入样例:</p>
<pre><code>1 3 5 -1
2 4 6 8 10 -1</code></pre>
<p>输出样例:</p>
<pre><code>1 2 3 4 5 6 8 10</code></pre>
<p><strong>解法：</strong></p>
<pre><code class="c++">#include&lt;iostream&gt;
using namespace std;

typedef struct Lnode
&#123;
    int data;
    struct Lnode* next;
&#125;*Linklist;

bool init(Linklist &amp;L)
&#123;
    L=new Lnode;
    L-&gt;next=NULL;
    return true;
&#125;


void create(Linklist &amp;L)
&#123;
    L=new Lnode;
    L-&gt;next=NULL;
        Lnode *E=L;
        int i,a;
        struct Lnode *p;
        cin&gt;&gt;a;
        for(i=1;a!=-1;i++)
        &#123;
        p=new Lnode;
        p-&gt;data=a;
        E-&gt;next=p;
        p-&gt;next=NULL;
        E=p;
        cin&gt;&gt;a;
        &#125;
&#125;


bool addit(Linklist &amp;l1,Linklist &amp;l2,Linklist &amp;l3)
&#123;
    struct Lnode *p1=l1-&gt;next,*p2=l2-&gt;next, *p3;
    l3=l1;
    p3=l3;
    while(p1&amp;&amp;p2)
    &#123;
            if(p1-&gt;data&lt;=p2-&gt;data)
            &#123;
                p3-&gt;next=p1;
                p3=p1;
                p1=p1-&gt;next;
            &#125;
            else &#123;
                p3-&gt;next=p2;
                p3=p2;
                p2=p2-&gt;next;
            &#125;
    &#125;
    p3-&gt;next=p1?p1:p2;
    return true;
&#125;

int putout(Linklist &amp;L)
&#123;
    int i;
        struct Lnode *p=L;
                if(L-&gt;next==NULL) &#123;
        cout&lt;&lt;&quot;NULL&quot;; return 0;&#125;
    for(i=0;p-&gt;next-&gt;next!=NULL;i++)
    &#123;
        cout&lt;&lt;p-&gt;next-&gt;data&lt;&lt;&quot; &quot;;
        p=p-&gt;next;
    &#125;
    cout&lt;&lt;p-&gt;next-&gt;data;
    return 0;
&#125;

int main()
&#123;
    Linklist L1,L2,L3;
    create(L1);
    create(L2);
    init(L3);
    addit(L1,L2,L3);
    putout(L3);
    return 0;
&#125;</code></pre>
<h3 id="R7-2-两个有序链表序列的交集-20-分"><a href="#R7-2-两个有序链表序列的交集-20-分" class="headerlink" title="R7-2 两个有序链表序列的交集 (20 分)"></a>R7-2 两个有序链表序列的交集 (20 分)</h3><p>已知两个非降序链表序列S1与S2，设计函数构造出S1与S2的交集新链表S3。</p>
<p>输入格式:<br>输入分两行，分别在每行给出由若干个正整数构成的非降序序列，用−1表示序列的结尾（−1不属于这个序列）。数字用空格间隔。</p>
<p>输出格式:<br>在一行中输出两个输入序列的交集序列，数字间用空格分开，结尾不能有多余空格；若新链表为空，输出NULL。</p>
<p>输入样例:</p>
<pre><code>1 2 5 -1
2 4 5 8 10 -1</code></pre>
<p>输出样例:</p>
<pre><code>2 5</code></pre>
<p><strong>解法：</strong></p>
<pre><code class="c++">#include&lt;iostream&gt;
using namespace std;

typedef struct Lnode
&#123;
    int data;
    struct Lnode* next;
&#125;*Linklist;

bool init(Linklist &amp;L)
&#123;
    L=new Lnode;
    L-&gt;next=NULL;
    return true;
&#125;


void create(Linklist &amp;L)
&#123;
    L=new Lnode;
    L-&gt;next=NULL;
        Lnode *E=L;
        int i,a;
        struct Lnode *p;
        cin&gt;&gt;a;
        for(i=1;a!=-1;i++)
        &#123;
        p=new Lnode;
        p-&gt;data=a;
        E-&gt;next=p;
        p-&gt;next=NULL;
        E=p;
        cin&gt;&gt;a;
        &#125;
&#125;

bool find(Linklist &amp;L,int a)
&#123;
    int j;
    struct Lnode *p;
    p=L-&gt;next;
    for(j=1;p-&gt;next!=NULL;j++)      
    &#123;
        if(p-&gt;data==a) break;       
        p=p-&gt;next;                 
    &#125;
    if(p-&gt;next==NULL&amp;&amp;p-&gt;data!=a)   return false;              
    return true;  
&#125;

bool cutit(Linklist &amp;l1,Linklist &amp;l2,Linklist &amp;l3)
&#123;
    struct Lnode *p1=l1-&gt;next,*p2=l2-&gt;next,*p3=l3;
    while(p1&amp;&amp;p2)
    &#123;
        if(p1-&gt;data&lt;p2-&gt;data)
        &#123;
            p1=p1-&gt;next;
        &#125;
        else
        if(p1-&gt;data==p2-&gt;data)
        &#123;
            p3-&gt;next=p1;
            p3=p3-&gt;next;
            p1=p1-&gt;next;
            p2=p2-&gt;next;

        &#125;
        else
        if(p1-&gt;data&gt;p2-&gt;data)
        &#123;
            p2=p2-&gt;next;
        &#125;
    &#125;
    if(p3-&gt;next!=NULL) p3-&gt;next=NULL;
    return true;
&#125;

int putout(Linklist &amp;L)
&#123;
    int i;
        struct Lnode *p=L;
        if(L-&gt;next==NULL) &#123;
        cout&lt;&lt;&quot;NULL&quot;; return 0;&#125;
    for(i=0;p-&gt;next-&gt;next!=NULL;i++)
    &#123;
        cout&lt;&lt;p-&gt;next-&gt;data&lt;&lt;&quot; &quot;;
        p=p-&gt;next;
    &#125;
    cout&lt;&lt;p-&gt;next-&gt;data;
    return 0;
&#125;

int main()
&#123;
    Linklist L1,L2,L3;
    create(L1);
    create(L2);
    init(L3);
    cutit(L1,L2,L3);
    putout(L3);
    return 0;
&#125;</code></pre>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>数据结构学习</tag>
      </tags>
  </entry>
  <entry>
    <title>网页设计学习-1</title>
    <url>/2021/03/19/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0-1/</url>
    <content><![CDATA[<h1 id="结构标签"><a href="#结构标签" class="headerlink" title="结构标签"></a>结构标签</h1><pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;             //编码方式为utf-8
        &lt;title&gt;第一个HTML&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;
            这是我的第一个html文件
        &lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>以上为基本应该存在的结构框架，效果图如下：</p>
<p><img src="/2021/03/19/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0-1/2.png" alt="2"></p>
<h1 id="文字段落标签"><a href="#文字段落标签" class="headerlink" title="文字段落标签"></a>文字段落标签</h1><h2 id="标题与段落标签"><a href="#标题与段落标签" class="headerlink" title="标题与段落标签"></a>标题与段落标签</h2><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><pre><code class="html">&lt;h1&gt; &lt;h2&gt; &lt;h3&gt; &lt;h4&gt; &lt;h5&gt; &lt;h6&gt; //从左到右重要性递减
    &lt;hn align=&quot;对齐方式&quot;&gt;标题内容&lt;/hn&gt;</code></pre>
<h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><pre><code class="html">&lt;p align=&quot;对齐方式&quot;&gt;段落文本&lt;/p&gt;</code></pre>
<h3 id="水平分割线标签"><a href="#水平分割线标签" class="headerlink" title="水平分割线标签"></a>水平分割线标签</h3><pre><code class="html">&lt;hr 属性=&quot;属性值&quot;/&gt;
//size设置粗细，align对齐方式，width设置宽度，color设置颜色，noshade设置3d阴影</code></pre>
<h3 id="换行缩进标签"><a href="#换行缩进标签" class="headerlink" title="换行缩进标签"></a>换行缩进标签</h3><pre><code class="html">&lt;br/&gt;                        //强制换行
&lt;blockquote&gt;&lt;/blockquote&gt;   //缩进</code></pre>
<h2 id="文本的格式化标签"><a href="#文本的格式化标签" class="headerlink" title="文本的格式化标签"></a>文本的格式化标签</h2><pre><code class="html">&lt;b&gt;&lt;/b&gt;                        //粗体
&lt;strong&gt;&lt;/strong&gt;            //强调，一般为粗体
&lt;i&gt;&lt;/i&gt;                        //斜体
&lt;em&gt;&lt;/em&gt;                    //强调，一般为斜体
&lt;del&gt;&lt;/del&gt;                    //删除线
&lt;ins&gt;&lt;/ins&gt;                    //加下划线
&lt;sup&gt;&lt;/sup&gt;                    //上标
&lt;sub&gt;&lt;/sub&gt;                    //下标</code></pre>
<h2 id="特殊字符标签"><a href="#特殊字符标签" class="headerlink" title="特殊字符标签"></a>特殊字符标签</h2><table>
<thead>
<tr>
<th>特殊字符</th>
<th>字符代码</th>
<th>特殊字符</th>
<th>字符代码</th>
</tr>
</thead>
<tbody><tr>
<td>空格</td>
<td>&amp;nbsp；</td>
<td>“</td>
<td>&amp;quot；</td>
</tr>
<tr>
<td>&lt;</td>
<td>&amp;lt；</td>
<td>©</td>
<td>&amp;copy；</td>
</tr>
<tr>
<td>&gt;</td>
<td>&amp;gt；</td>
<td>®</td>
<td>&amp;reg；</td>
</tr>
<tr>
<td>&amp;</td>
<td>&amp;amp；</td>
<td>×</td>
<td>&amp;times；</td>
</tr>
</tbody></table>
<h1 id="图像与超链接标签"><a href="#图像与超链接标签" class="headerlink" title="图像与超链接标签"></a>图像与超链接标签</h1><h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><pre><code class="html">&lt;img src=&quot;图像URL&quot;/&gt;</code></pre>
<h2 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h2><h3 id="创建超链接"><a href="#创建超链接" class="headerlink" title="创建超链接"></a>创建超链接</h3><pre><code class="html">&lt;a href=&quot;资源地址&quot; target=&quot;窗口名称&quot; title=&quot;链接提示&quot;&gt;链接对象&lt;/a&gt;</code></pre>
<h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><ol>
<li>绝对路径：网络主页上所存在的，或是文件在硬盘上的真实路径。</li>
<li>相对路径：以当前文件为起点，进行相对文件的查找。</li>
</ol>
<pre><code class="html">./          //指当前文件所在目录下（可省略）
../         //指当前文件所在目录的上一目录下</code></pre>
<h3 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h3><p>锚点定义：</p>
<pre><code class="html">&lt;a name=&quot;锚点名称&quot;&gt;文字&lt;/a&gt;
//或将name改做id</code></pre>
<p>跳转锚点：</p>
<pre><code class="html">&lt;a href=&quot;锚点名称&quot;&gt;链接的文字&lt;/a&gt;</code></pre>
<h3 id="影像地图"><a href="#影像地图" class="headerlink" title="影像地图"></a>影像地图</h3><pre><code class="html">&lt;img src=&quot;图像地址&quot; usemap=&quot;#影像地图名称&quot;&gt;   //使用影像地图

&lt;map name=&quot;影像地图名称&quot;&gt;                      //定义影像地图
    &lt;area shape=&quot;热区形状&quot; coords=&quot;热区坐标&quot; href=&quot;链接地址&quot;&gt;
    &lt;!--此处可以添加多个area--&gt;
&lt;/map&gt;</code></pre>
<p><strong>shape与coords的附加说明：</strong></p>
<ul>
<li>shape=”circle“，coords=”x,y,z“（x,y定义圆心位置，z为半径)</li>
<li>shape=“polygon”，coords=“x1,y1,x2,y2……”（每个顶点的坐标都要写入）</li>
<li>shape=“rectangle”，coords=“x1,y1,x2,y2”（一个顶点的坐标和其对角顶点坐标）</li>
</ul>
<h1 id="表格与列表标签"><a href="#表格与列表标签" class="headerlink" title="表格与列表标签"></a>表格与列表标签</h1><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><h3 id="表格的定义范例"><a href="#表格的定义范例" class="headerlink" title="表格的定义范例"></a><strong>表格的定义范例</strong></h3><pre><code class="html">&lt;table&gt;
    &lt;tr&gt;                                //表格的第一个横行
        &lt;th&gt;此处表头字体自动加粗&lt;/th&gt;         //具体到行内的一个单元格
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;                                //表格的第二个横行
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</code></pre>
<pre><code class="html">&lt;caption&gt;定义表格的标题&lt;/caption&gt;
&lt;thead&gt;定义表格的表头&lt;/thead&gt;
&lt;tbody&gt;对表格中的主体内容进行分组&lt;/tbody&gt;
&lt;tfoot&gt;对表格中的页脚内容进行分组&lt;/tfoot&gt;
// 后三个标签应该结合使用</code></pre>
<h3 id="表格标签”table”的属性："><a href="#表格标签”table”的属性：" class="headerlink" title="表格标签”table”的属性："></a><strong>表格标签”table”的属性：</strong></h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>width/height</td>
<td>表格的宽度（高度），值可以是数值或百分比，数值表示像素点数，百分比是占浏览器宽度（高度）的比例</td>
</tr>
<tr>
<td>align</td>
<td>表格相对周围元素的对齐方式</td>
</tr>
<tr>
<td>background</td>
<td>表格的背景图片</td>
</tr>
<tr>
<td>bgcolor</td>
<td>表格的背景颜色，一般后期通过样式控制，不建议使用</td>
</tr>
<tr>
<td>border</td>
<td>表格边框宽度（像素为单位）</td>
</tr>
<tr>
<td>bordercolor</td>
<td>表格边框的颜色</td>
</tr>
<tr>
<td>cellspacing</td>
<td>单元格之间的间距</td>
</tr>
<tr>
<td>cellpadding</td>
<td>单元格内容与边界之间空白距离的大小</td>
</tr>
</tbody></table>
<h3 id="表格设置border时，可以设置显示隐藏边框"><a href="#表格设置border时，可以设置显示隐藏边框" class="headerlink" title="表格设置border时，可以设置显示隐藏边框"></a><strong>表格设置border时，可以设置显示隐藏边框</strong></h3><table>
<thead>
<tr>
<th>frame</th>
<th>描述</th>
<th>frame</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>box</td>
<td>显示所有边框</td>
<td>alove</td>
<td>只显示上边框</td>
</tr>
<tr>
<td>void</td>
<td>不显示边框</td>
<td>below</td>
<td>只显示下边框</td>
</tr>
<tr>
<td>hsides</td>
<td>只显示上下边框</td>
<td>lhs</td>
<td>只显示左边框</td>
</tr>
<tr>
<td>vsides</td>
<td>只显示左右边框</td>
<td>rhs</td>
<td>只显示右边框</td>
</tr>
</tbody></table>
<h3 id="单元格td的设置"><a href="#单元格td的设置" class="headerlink" title="单元格td的设置"></a><strong>单元格td的设置</strong></h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>width/height</td>
<td>单元格的宽和高，接受绝对值和相对值</td>
<td>align</td>
<td>单元格内容的水平对齐方式（left、right、center等）</td>
</tr>
<tr>
<td>colspan</td>
<td>规定单元格横跨列数（纵向合并单元格）</td>
<td>valign</td>
<td>单元格内容的垂直对齐方式（top、middle、bottom等）</td>
</tr>
<tr>
<td>rowspan</td>
<td>规定单元格横跨行数（横向合并单元格）</td>
<td>bgcolor</td>
<td>单元格的背景色</td>
</tr>
</tbody></table>
<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><ul>
<li><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><pre><code class="html">&lt;ul type=编号类型&gt;
    &lt;li&gt;第一项&lt;/li&gt;
    &lt;li&gt;第二项&lt;/li&gt;
    &lt;li&gt;第三项&lt;/li&gt;
&lt;/ul&gt;</code></pre>
<p><strong>type决定列表图标类型：</strong></p>
<ul>
<li><p>disc为实心圆（默认）</p>
</li>
<li><p>circle为空心圆</p>
</li>
<li><p>square为方块</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><pre><code class="html">&lt;ol type=&quot;编号类型&quot; start=value&gt;
    &lt;li&gt;第一项&lt;/li&gt;
    &lt;li&gt;第二项&lt;/li&gt;
    &lt;li&gt;第三项&lt;/li&gt;
&lt;/ol&gt;</code></pre>
<p><strong>type决定列表序号样式：</strong></p>
<ul>
<li><strong>type=1：</strong>1,2,3,4,5……</li>
<li><strong>type=A：</strong>A,B,C,D,E……</li>
<li><strong>type=a：</strong>a,b,c,d,e……</li>
<li><strong>type=I：</strong>I,II,III,IV,V……</li>
<li><strong>type=i：</strong>i,ii,iii,iv,v……</li>
</ul>
<p><strong>reversed属性为true时，可以实现倒序排列，start指定第一项的序号</strong></p>
</li>
</ul>
<ul>
<li><h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3></li>
</ul>
<pre><code class="html">&lt;dl&gt;
    &lt;dt&gt;第一项&lt;/dt&gt;&lt;dd&gt;注释一&lt;/dd&gt;
    &lt;dt&gt;第二项&lt;/dt&gt;&lt;dd&gt;注释二&lt;/dd&gt;
    &lt;dt&gt;第三项&lt;/dt&gt;&lt;dd&gt;注释三&lt;/dd&gt;
&lt;/dl&gt;</code></pre>
<ul>
<li><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3></li>
</ul>
<pre><code class="html">&lt;ul type=&quot;circle&quot;&gt;
    &lt;li&gt;北京&lt;/li&gt;
    &lt;li&gt;上海
        &lt;ol start=&quot;6&quot; type=&quot;1&quot; reversed=&quot;true&quot;&gt;
        &lt;li&gt;浦东新区&lt;/li&gt;
        &lt;li&gt;徐汇区&lt;/li&gt;
        &lt;li&gt;长宁区&lt;/li&gt;
        &lt;li&gt;普陀区&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;广州&lt;/li&gt;
    &lt;li&gt;深圳&lt;/li&gt;
&lt;/ul&gt;</code></pre>
<p>以上代码为无序列表嵌套有序列表，效果图如下</p>
<p><img src="/2021/03/19/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0-1/1.png" alt="1"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>网页设计学习</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-1</title>
    <url>/2021/03/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/</url>
    <content><![CDATA[<h1 id="线性表-顺序表"><a href="#线性表-顺序表" class="headerlink" title="线性表-顺序表"></a>线性表-顺序表</h1><p>【Elemtype为数据类型】</p>
<h2 id="创建（初始化）"><a href="#创建（初始化）" class="headerlink" title="创建（初始化）"></a>创建（初始化）</h2><p>以数组的形式创建顺序表</p>
<pre><code>typedef struct      //理解为将定义的结构体改称为&#123;&#125;后的名字，如SQlist
&#123;
    Elemtype *elem； //定义顺序表具有首元素地址
    int length;     //定义顺序表具有表长这一属性
&#125;SQlist;</code></pre>
<p>初始化设置顺序表的最大存储空间，以及初始化其表长为0</p>
<pre><code>bool initList(SQlist &amp;sq)     //将需要初始化的表传址
&#123;
    sq.elem=new maxsize;        //为顺序表分配maxsize的空间作为最大上限
    if(!sq.elem) return false;      //如果空间分配失败，直接返回提示错误
    sq.length=0;                    //如果分配空间成功，则继续初始化表长为0
    return true;                    //返回参数提示顺序表初始化成功
&#125;</code></pre>
<h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><p>顺序表能够随机存取，故而方便存取指定位置的值，即可以随机存取</p>
<pre><code>bool getelem(SQlist &amp;sq,int i，elemtype &amp;a)  
//将需要初始化的表传址，并且传值需要获取的是第i个值，返回的值传给a
&#123;
    if(i&lt;1||i&gt;sq.length) return false;    //如果i为非法位置，返回提示错误
    a=sq.elem[i];                 //否则返回第i个元素给a
    return true;                  //返回提示执行正常
&#125;</code></pre>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>顺序表的查找就是顺序比较表内元素和待查找元素，相同查找成功，始终不同查找失败</p>
<pre><code>int find(SQlist &amp;sq,elemtype a)
//传址需要查找的表，并传值需要查找的数值a,返回查找到的序号为int类型
&#123;
    int i;
    for(i=0;i&lt;sq.length;i++)
    &#123;
    if(sq.elem[i]==a) return i;
    //如果查找到了，返回该值在表中的序号，此处为数组下标，若返回第几个元素序号，则需要i+1
    &#125;
    return -1;            //查找失败，返回负数
&#125;</code></pre>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>顺序表为紧邻的线性表，故而插入时需要向后移动较多元素，并且需要从最后一个元素开始向后移动，以免数据被覆盖</p>
<pre><code>bool insert(SQlist &amp;sq,elemtype a,int i)
//将元素a的值插入表中第i个位置，传址需要做插入的表，以及传值a，i
&#123;
    int j;
    if(i&lt;1||i&gt;sq.length+1) return false;//如果i值不合法，则不作插入
    if(sq.length==maxsize) return false;//如果表长已经达到最大，则判断表满，不作插入
    for(j=sq.length-1;j&gt;=i-1;j--)
    //让j为最后一个元素的角标，循环递减，并且当j等于插入位置i的前驱时，停止循环
    &#123;
        sq.elem[j+1]=sq.elem[j];        //给j+1角标的空间赋值当前j角标的值，实现后移
    &#125;
    sq.elem[i-1]=a;                     //赋值第i个位置，即角标为i-1的空间为a
    sq.length++;                        //表长增加
    return true;                        //返回插入成功
&#125;</code></pre>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>顺序表的删除是将待删除位置后面的全部往前覆盖，向前移动较多元素，并且需要从待删除位置的后一个开始移动，以免覆盖数据</p>
<pre><code>bool delete(SQlist &amp;sq,int i)
//传址需要删除元素的顺序表，并且传值需要删除的元素位置
&#123;
    int j;
    if(i&lt;1||i&gt;sq.length) return false;   //如果i值不合法，则不作插入
    for(j=i;j&lt;=sq.length-1;j++)
    //将i位置之后的所有元素都向前移，并且循环在将最后一个元素移动到表长减一后的位置停止
    &#123;
        sq.elem[j-1]=sq.elem[j];        //被删位置后的元素全部前移
    &#125;
    sq.length--;                        //表长减少
    return true;
&#125;</code></pre>
<h2 id="实际题目"><a href="#实际题目" class="headerlink" title="实际题目"></a>实际题目</h2><h3 id="R7-1-顺序表的建立及遍历-20-分"><a href="#R7-1-顺序表的建立及遍历-20-分" class="headerlink" title="R7-1 顺序表的建立及遍历 (20 分)"></a>R7-1 顺序表的建立及遍历 (20 分)</h3><p>读入n值及n个整数，建立顺序表并遍历输出。</p>
<p>输入格式:<br>读入n及n个整数</p>
<p>输出格式:<br>输出n个整数，以空格分隔（最后一个数的后面没有空格）。</p>
<p>输入样例:<br>在这里给出一组输入。例如：</p>
<pre><code>4
-3 10 20 78</code></pre>
<p>输出样例:<br>在这里给出相应的输出。例如：</p>
<pre><code>-3 10 20 78</code></pre>
<p><strong>解法：</strong></p>
<pre><code class="c++">#include&lt;iostream&gt;
using namespace std;

typedef struct
&#123;
    int *a;
    int length;
&#125;List;

int create(List &amp;sq)
&#123;
    sq.a= new int[100];
    if(!sq.a) return 0;
    sq.length=0;
    return 1;
&#125;


int output(List &amp;sq)
&#123;
    int j;
    cout&lt;&lt;sq.a[0];
    for(j=1;j&lt;sq.length;j++)
    &#123;
        cout&lt;&lt;&quot; &quot;&lt;&lt;sq.a[j];
    &#125;
&#125;

int main()
&#123;
    List sqlist;
    int i,n;
    cin&gt;&gt;n;
    create(sqlist);
    for(i=0;i&lt;n;i++)
    &#123;
        cin&gt;&gt;sqlist.a[i];
        sqlist.length++;
    &#125;
    if(sqlist.length!=0) 
        output(sqlist);
    return 0;
&#125;</code></pre>
<h3 id="R7-2-jmu-ds-顺序表区间元素删除-20-分"><a href="#R7-2-jmu-ds-顺序表区间元素删除-20-分" class="headerlink" title="R7-2 jmu-ds-顺序表区间元素删除 (20 分)"></a>R7-2 jmu-ds-顺序表区间元素删除 (20 分)</h3><p>若一个线性表L采用顺序存储结构存储，其中所有的元素为整数。设计一个算法，删除元素值在[x,y]之间的所有元素，要求算法的时间复杂度为O(n)，空间复杂度为O(1)。</p>
<p>输入格式:<br>三行数据，第一行是顺序表的元素个数，第二行是顺序表的元素，第三行是x和y。</p>
<p>输出格式:<br>删除元素值在[x,y]之间的所有元素后的顺序表。</p>
<p>输入样例:</p>
<pre><code>10
5 1 9 10 67 12 8 33 6 2
3 10</code></pre>
<p>输出样例:</p>
<pre><code>1 67 12 33 2</code></pre>
<p><strong>解法：</strong></p>
<pre><code class="c++">#include&lt;iostream&gt;
using namespace std;

typedef struct
&#123;
    int *a;
    int length;
&#125;sqlist;

bool create(sqlist &amp;sq)
&#123;
    sq.a= new int[100];
    if(!sq.a) return false;
    sq.length=0;
    return true;
&#125;

bool del(sqlist &amp;sq,int x,int y)
&#123;
    int j,i;
    for(j=0;j&lt;sq.length;j++)
    &#123;
        if(sq.a[j]&gt;=x&amp;&amp;sq.a[j]&lt;=y)
        &#123;
            for(i=j;i&lt;sq.length;i++)
            &#123;
                sq.a[i]=sq.a[i+1];
            &#125;
            sq.length--;
            j--;
        &#125;
    &#125;
&#125;

int main()
&#123;
    sqlist List;
    int n,i,x,y;
    cin&gt;&gt;n;
    create(List);
    for(i=0;i&lt;n;i++)
    &#123;
        cin&gt;&gt;List.a[i];
        List.length++;
    &#125;
    cin&gt;&gt;x&gt;&gt;y;
    del(List,x,y);
    cout&lt;&lt;List.a[0];
    for(i=1;i&lt;List.length;i++)
    &#123;
        cout&lt;&lt;&quot; &quot;&lt;&lt;List.a[i];
    &#125;
    return 0;
&#125;</code></pre>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>数据结构学习</tag>
      </tags>
  </entry>
  <entry>
    <title>网页设计学习-2</title>
    <url>/2021/04/13/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0-2/</url>
    <content><![CDATA[<h1 id="表单结构"><a href="#表单结构" class="headerlink" title="表单结构"></a>表单结构</h1><p>表单是收集用户的信息和反馈意见，是前端和后端数据的传递媒介</p>
<h2 id="表单的组成"><a href="#表单的组成" class="headerlink" title="表单的组成"></a>表单的组成</h2><ul>
<li><h3 id="表单标签-form"><a href="#表单标签-form" class="headerlink" title="表单标签-form"></a>表单标签-form</h3><pre><code class="html">&lt;form action=&quot;url&quot; method=&quot;get/post&quot; name=&quot;value&quot;&gt;
    填入表单域和表单按钮等
&lt;/form&gt;</code></pre>
<p><strong>action：</strong>表示接受并处理表单数据的服务器程序的url地址</p>
<p><strong>method：get</strong>为默认，表单数据和URL一起发送，提交的数据显示在浏览器地址栏中，保密性差，有数据量限制；<strong>post</strong>保密性好，并且无数据量限制，表单数据和URL分开发送，保密性好</p>
<p><strong>name：</strong>指定表单名称，以区分一个页面中的多个表单</p>
</li>
</ul>
<ul>
<li><h3 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h3><p><strong>表单常用控件</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>预览</th>
</tr>
</thead>
<tbody><tr>
<td>input type=“text”</td>
<td>单行文本输入框</td>
<td><img src="/2021/04/13/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0-2/1.png" alt="1"></td>
</tr>
<tr>
<td>input type=“password”</td>
<td>密码输入框（输入的文字用*表示）</td>
<td><img src="/2021/04/13/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0-2/2.png" alt="2"></td>
</tr>
<tr>
<td>input type=“radio”</td>
<td>单选框（同一个name属性起效）</td>
<td><img src="/2021/04/13/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0-2/3.png" alt="3"></td>
</tr>
<tr>
<td>input type=”checkbox“</td>
<td>复选框（同一个name属性起效）</td>
<td><img src="/2021/04/13/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0-2/7.png" alt="7"></td>
</tr>
<tr>
<td>input type=“hidden”</td>
<td>隐藏域（不显示，供开发使用）</td>
<td>——————————</td>
</tr>
<tr>
<td>input type=“file”</td>
<td>文件域（上传文件）</td>
<td><img src="/2021/04/13/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0-2/4.png" alt="4"></td>
</tr>
<tr>
<td>select</td>
<td>列表框</td>
<td><img src="/2021/04/13/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0-2/5.png" alt="5"></td>
</tr>
<tr>
<td>textarea</td>
<td>多行文本输入框</td>
<td><img src="/2021/04/13/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0-2/6.png" alt="6"></td>
</tr>
</tbody></table>
</li>
</ul>
<p>  <strong>表单域常用属性</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>控件名称（公共属性，与每个表单域对应）</td>
</tr>
<tr>
<td>type</td>
<td>控件类型，如radio，text等</td>
</tr>
<tr>
<td>size</td>
<td>指定控件的宽度</td>
</tr>
<tr>
<td>value</td>
<td>用于设定输入默认值（公共属性，可用来指定输入区域默认值）</td>
</tr>
<tr>
<td>maxlength</td>
<td>在单行文本时允许输入的最大字符数</td>
</tr>
<tr>
<td>src</td>
<td>插入图像的地址</td>
</tr>
</tbody></table>
<ul>
<li><h3 id="表单按钮"><a href="#表单按钮" class="headerlink" title="表单按钮"></a>表单按钮</h3><p><strong>普通按钮:触发提交表单的动作，配合JavaScript使用</strong></p>
<pre><code class="html">&lt;input type=&quot;button&quot; name=&quot;name值&quot;/&gt;</code></pre>
<p><strong>提交按钮：将表单中的信息提交给表单中action指向的文件</strong></p>
<pre><code class="html">&lt;input type=&quot;submit&quot; name=&quot;button_name&quot; id=&quot;button_id&quot; value=&quot;提交&quot;&gt;</code></pre>
<p><strong>图片式提交按钮：指可以在按钮位置上放置图片，这幅图片具有提交按钮的功能</strong></p>
<pre><code class="html">&lt;input type=&quot;image&quot; /&gt;</code></pre>
<p><strong>重置按钮：指清除已填写的表单内容，恢复为默认内容，重新填写</strong></p>
<pre><code class="html">&lt;input type=&quot;reset&quot; /&gt;</code></pre>
</li>
</ul>
<h1 id="页面布局结构性标签"><a href="#页面布局结构性标签" class="headerlink" title="页面布局结构性标签"></a>页面布局结构性标签</h1><h2 id="框架示例："><a href="#框架示例：" class="headerlink" title="框架示例："></a>框架示例：</h2><pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;叮叮书店&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;div id=&quot;logo&quot; style=&quot;&quot;&gt;
        &lt;header class=&quot;container&quot;&gt;
            &lt;div id=&quot;logo&quot;&gt;
                &lt;h1&gt;网站logo·叮叮书店(div)&lt;/h1&gt;
            &lt;/div&gt;
            &lt;div id=&quot;search&quot;&gt;
                &lt;form&gt;
                    &lt;input type=&quot;search&quot;/&gt;
                    &lt;input type=&quot;button&quot; name=&quot;search&quot; value=&quot;搜索&quot;/&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        &lt;/header&gt;
        &lt;/div&gt;

        &lt;div id=&quot;nav&quot; style=&quot;&quot;&gt;
            &lt;nav&gt;
                &lt;div&gt;
                    &lt;ul&gt;
                        &lt;li&gt;首页&lt;/li&gt;
                        &lt;li&gt;书籍分类&lt;/li&gt;
                        &lt;li&gt;特刊降价&lt;/li&gt;
                        &lt;li&gt;联系我们&lt;/li&gt;
                        &lt;li&gt;关于我们&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
                &lt;div id=&quot;cart&quot;&gt;购物车&lt;/div&gt;
            &lt;/nav&gt;
        &lt;/div&gt;

        &lt;div&gt;
        &lt;main&gt;
        &lt;div id=&quot;adv&quot;&gt;
            此处用于添加广告
        &lt;/div&gt;

        &lt;section id=&quot;recommend&quot;&gt;
            &lt;h2&gt;本周推荐&lt;/h2&gt;
            &lt;section class=&quot;recommend-book&quot;&gt;
                &lt;h3&gt;书1标题&lt;/h3&gt;
            &lt;div class=&quot;content&quot;&gt;
                &lt;div class=&quot;cover-1&quot;&gt;&lt;/div&gt;
                &lt;div class=&quot;description-1&quot;&gt;&lt;p&gt;&lt;mark&gt;书1&lt;/mark&gt;简介&lt;/p&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;cart-more&quot;&gt;加入购物车详细内容&lt;/div&gt;
            &lt;/div&gt;
            &lt;/section&gt;
            &lt;section class=&quot;recommend-book&quot;&gt;
                &lt;h3&gt;书2标题&lt;/h3&gt;
            &lt;div class=&quot;content&quot;&gt;
                &lt;div class=&quot;cover-1&quot;&gt;&lt;/div&gt;
                &lt;div class=&quot;description-1&quot;&gt;&lt;p&gt;书2简介&lt;/p&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;cart-more&quot;&gt;加入购物车详细内容&lt;/div&gt;
            &lt;/div&gt;
            &lt;/section&gt;
        &lt;/section&gt;

        &lt;section id=&quot;new&quot;&gt;
            &lt;h2&gt;最近新书&lt;/h2&gt;

            &lt;div class=&quot;content&quot;&gt;
            &lt;section class=&quot;new-book&quot;&gt;
                &lt;h3&gt;书3标题&lt;/h3&gt;
            &lt;div class=&quot;effect-1&quot;&gt;
                &lt;div class=&quot;cover-2&quot;&gt;&lt;/div&gt;
                &lt;div class=&quot;description-2&quot;&gt;
                    &lt;h3&gt;书3标题&lt;/h3&gt;
                    &lt;p&gt;书3简介&lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;cart-more&quot;&gt;加入购物车详细内容&lt;/div&gt;
            &lt;/div&gt;
            &lt;/section&gt;

            &lt;section class=&quot;new-book&quot;&gt;
                &lt;h3&gt;书4标题&lt;/h3&gt;
            &lt;div class=&quot;effect-1&quot;&gt;
                &lt;div class=&quot;cover-2&quot;&gt;&lt;/div&gt;
                &lt;div class=&quot;description-2&quot;&gt;
                    &lt;h3&gt;书4标题&lt;/h3&gt;
                    &lt;p&gt;书4简介&lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;cart-more&quot;&gt;加入购物车详细内容&lt;/div&gt;
            &lt;/div&gt;
            &lt;/section&gt;
            &lt;/div&gt;
        &lt;/section&gt;

        &lt;section id=&quot;sale&quot;&gt;
            &lt;h2&gt;最近促销&lt;/h2&gt;
            &lt;div class=&quot;content&quot;&gt;
                &lt;section id=&quot;sale-book&quot;&gt;
                    &lt;h3&gt;书5标题&lt;/h3&gt;
                    &lt;div class=&quot;effort-1&quot;&gt;
                        &lt;div class=&quot;pic&quot;&gt;&lt;/div&gt;
                        &lt;div class=&quot;sale&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                &lt;/section&gt;
                &lt;section id=&quot;sale-book&quot;&gt;
                    &lt;h3&gt;书6标题&lt;/h3&gt;
                    &lt;div class=&quot;effort-1&quot;&gt;
                        &lt;div class=&quot;pic&quot;&gt;&lt;/div&gt;
                        &lt;div class=&quot;sale&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                &lt;/section&gt;
            &lt;/div&gt;
        &lt;/section&gt;
        &lt;/main&gt;
        &lt;/div&gt;

        &lt;div&gt;
        &lt;aside&gt;
            &lt;div id=&quot;advert&quot;&gt;&lt;/div&gt;
            &lt;section id=&quot;best-selling&quot;&gt;
                &lt;h2&gt;畅销图书&lt;/h2&gt;
                &lt;ul&gt;
                    &lt;li&gt;书1
                    &lt;div class=&quot;curr&quot;&gt;
                        &lt;div class=&quot;c-pic&quot;&gt;&lt;/div&gt;
                        &lt;div class=&quot;c-text&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;/li&gt;

                    &lt;li&gt;书2
                    &lt;div class=&quot;curr&quot;&gt;
                        &lt;div class=&quot;c-pic&quot;&gt;&lt;/div&gt;
                        &lt;div class=&quot;c-text&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;/li&gt;

                    &lt;li&gt;书3
                    &lt;div class=&quot;curr&quot;&gt;
                        &lt;div class=&quot;c-pic&quot;&gt;&lt;/div&gt;
                        &lt;div class=&quot;c-text&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;/li&gt;

                    &lt;li&gt;书4
                    &lt;div class=&quot;curr&quot;&gt;
                        &lt;div class=&quot;c-pic&quot;&gt;&lt;/div&gt;
                        &lt;div class=&quot;c-text&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;/li&gt;
                &lt;/ul&gt;
            &lt;/section&gt;
            &lt;div id=&quot;classify-partner&quot;&gt;
            &lt;section id=&quot;classify&quot;&gt;
                &lt;h2&gt;图书分类&lt;/h2&gt;
            &lt;/section&gt;
            &lt;section id=&quot;partner&quot;&gt;
                &lt;h2&gt;合作伙伴&lt;/h2&gt;
            &lt;/section&gt;
            &lt;/div&gt;
            &lt;section id=&quot;about&quot;&gt;
                &lt;h2&gt;关于书店&lt;/h2&gt;
            &lt;/section&gt;
        &lt;/aside&gt;
        &lt;/div&gt;

        &lt;div&gt;
        &lt;footer&gt;
            页脚
        &lt;/footer&gt;
        &lt;/div&gt;

    &lt;/div&gt;    
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>网页设计学习</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻引擎-2</title>
    <url>/2021/04/09/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-2/</url>
    <content><![CDATA[<h1 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h1><p>普通材质的文件下边框为浅绿色，直接资源管理器中右键创建即可</p>
<h2 id="材质域（常用）"><a href="#材质域（常用）" class="headerlink" title="材质域（常用）"></a>材质域（常用）</h2><p>材质的类型一般由材质域区分（材质界面左下角中，细节页的材质栏）</p>
<ul>
<li><h3 id="表面"><a href="#表面" class="headerlink" title="表面"></a>表面</h3><p>普通的基本材质，如木质、铁质、玻璃等覆盖在表面的东西</p>
</li>
<li><h3 id="延迟贴花"><a href="#延迟贴花" class="headerlink" title="延迟贴花"></a>延迟贴花</h3><p>类似等同于喷漆，混合模式只能是半透明，如同投影一样覆盖在物体表面，本质是Actor组件，但可以作为只有一个贴花组件的Actor放入场景</p>
</li>
<li><h3 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h3><p>用于UI显示，需要新建媒体播放器，使用媒体纹理生成材质，更改材质域为“用户界面”，在用户UI中添加图像时便可以使用该材质放入外观-笔刷中。</p>
<p>注：使用生成的材质时，需要在UI图表中添加默认值为该材质源媒体播放器的媒体播放器变量，并且事件构造中通过该变量添加对应播放器的“打开源”，如下图</p>
<p><img src="/2021/04/09/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-2/8.png" alt="8"></p>
</li>
</ul>
<p>左二接口接入媒体播放器（仅作为媒介），而左三接口则接入具体的视频媒体</p>
<h2 id="混合模式（常用）"><a href="#混合模式（常用）" class="headerlink" title="混合模式（常用）"></a>混合模式（常用）</h2><ul>
<li><h3 id="不透明"><a href="#不透明" class="headerlink" title="不透明"></a>不透明</h3><p>整个材质完全不透光，一般作为底层材质</p>
</li>
<li><h3 id="半透明"><a href="#半透明" class="headerlink" title="半透明"></a>半透明</h3><p>材质呈现半透明，可以和下层叠加，一般是作为贴花使用</p>
</li>
</ul>
<h2 id="材质结点引脚（常用）"><a href="#材质结点引脚（常用）" class="headerlink" title="材质结点引脚（常用）"></a>材质结点引脚（常用）</h2><ul>
<li><h3 id="基础颜色"><a href="#基础颜色" class="headerlink" title="基础颜色"></a>基础颜色</h3><p>材质的基本图像，可以是纯色或贴图，是整个材质的主外观</p>
</li>
<li><h3 id="Metallic"><a href="#Metallic" class="headerlink" title="Metallic"></a>Metallic</h3><p>一般叫做金属度，针对金属材质，设置金属的质感，反光光泽等</p>
</li>
<li><h3 id="高光度"><a href="#高光度" class="headerlink" title="高光度"></a>高光度</h3><p>基本用于非金属表面，一般输入一张比标准贴图亮的贴图，用于扩大光照面和暗面的对比，也可以直接输入一个具体的值，改变整体的反光强度，类似对比度</p>
</li>
<li><h3 id="粗糙度"><a href="#粗糙度" class="headerlink" title="粗糙度"></a>粗糙度</h3><p>决定材质的粗糙程度，0为完全光滑的镜面反射，1为完全粗糙的漫反射</p>
</li>
<li><h3 id="自发光颜色"><a href="#自发光颜色" class="headerlink" title="自发光颜色"></a>自发光颜色</h3><p>控制材质发光部位，设置自发光颜色或强度</p>
</li>
<li><h3 id="Normal"><a href="#Normal" class="headerlink" title="Normal"></a>Normal</h3><p>法线，输入一张法线贴图，用于记录材质不同位置的凹凸感</p>
</li>
<li><h3 id="折射"><a href="#折射" class="headerlink" title="折射"></a>折射</h3><p>输入一个很小的数，影响折射率，可以实现透明玻璃之类的折射，<strong>但效果不怎么样</strong></p>
</li>
</ul>
<h2 id="材质快捷键节点"><a href="#材质快捷键节点" class="headerlink" title="材质快捷键节点"></a>材质快捷键节点</h2><p><img src="/2021/04/09/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-2/1.png" alt="1"></p>
<p>快捷键：1+Left</p>
<p>具体作用：创建一个常数值</p>
<p><img src="/2021/04/09/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-2/3.png" alt="3"></p>
<p>快捷键：3+Left</p>
<p>具体作用：创建一个常量颜色值</p>
<p><img src="/2021/04/09/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-2/2.png" alt="2"></p>
<p>快捷键：s+Left</p>
<p>具体作用：创建一个变量数值</p>
<p><img src="/2021/04/09/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-2/6.png" alt="6"></p>
<p>快捷键：V+Left</p>
<p>具体作用：创建一个颜色变量</p>
<p><img src="/2021/04/09/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-2/5.png" alt="5"></p>
<p>快捷键：U+Left</p>
<p>具体作用：创建一个UV缩放节点，用于缩放贴图</p>
<p><img src="/2021/04/09/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-2/4.png" alt="4"></p>
<p>快捷键：A+Left</p>
<p>具体作用：将两种颜色或贴图叠加在一起</p>
<p><img src="/2021/04/09/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-2/7.png" alt="7"></p>
<p>快捷键：M+Left</p>
<p>具体作用：将两种颜色或贴图混合在一起，一般用选定颜色乘白色贴图进行染色</p>
<h2 id="材质实例"><a href="#材质实例" class="headerlink" title="材质实例"></a>材质实例</h2><p>由材质生成的材质实例将材质蓝图中的变量节点显示于右面接口，通过改变接口值来更加直观的实时改变材质的颜色等各种属性，能够实现一个材质创造一堆材质实例的操作</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>虚幻引擎学习</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻引擎-1</title>
    <url>/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/</url>
    <content><![CDATA[<h1 id="快捷键节点："><a href="#快捷键节点：" class="headerlink" title="快捷键节点："></a>快捷键节点：</h1><p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/1.png" alt="1"></p>
<p>节点名：延迟</p>
<p>呼出方式：（快捷键）D+left</p>
<p>具体作用：实现程序暂停，延迟一段时间继续执行后续节点</p>
<p>接口：Duration——延迟时长，单位为秒</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/2.png" alt="2"></p>
<p>节点名：分支</p>
<p>呼出方式：（快捷键）B+left</p>
<p>具体作用：实现程序因布尔值变化而条件分歧</p>
<p>接口：Condition——决定选择支的布尔值</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/3.png" alt="3"></p>
<p>节点名：序列</p>
<p>呼出方式：（快捷键）S+left</p>
<p>具体作用：使多个分支同时进行</p>
<p>接口：Then——同时进行的分支接口</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/4.png" alt="4"></p>
<p>节点名：For each loop</p>
<p>呼出方式：（快捷键）F+left</p>
<p>具体作用：根据数组元素的个数执行循环</p>
<p>接口：array——需要遍历的数组</p>
<p>Loop body——循环体</p>
<p>Array Element——当前数组元素的值</p>
<p>Array Index——当前数组元素的下标</p>
<p>Completed——循环出口</p>
<h1 id="普通节点："><a href="#普通节点：" class="headerlink" title="普通节点："></a>普通节点：</h1><p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/5.png" alt="5"></p>
<p>节点名：获取类的所有actor</p>
<p>呼出方式：右键查询（使用节点名或get all actor）</p>
<p>具体作用：获取场景中所有某类的实例</p>
<p>接口：Actor Class——需要获取的类</p>
<p>Out Actors——选中类的所有actor的数组</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/6.png" alt="6"></p>
<p>节点名：自定义事件（事件名称）</p>
<p>呼出方式：右键查询（使用节点名或custom event）</p>
<p>具体作用：定义一个自定义事件</p>
<p>接口：无</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/11.png" alt="11"></p>
<p>节点名：（事件名称）</p>
<p>呼出方式：右键查询（使用节点名查找引用）</p>
<p>具体作用：引用一个在某蓝图中定义好的自定义事件</p>
<p>接口：无</p>
<h1 id="时间轴与变换节点："><a href="#时间轴与变换节点：" class="headerlink" title="时间轴与变换节点："></a>时间轴与变换节点：</h1><p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/10.png" alt="10"></p>
<p>节点名：时间轴</p>
<p>呼出方式：右键查询（使用节点名或timeline）</p>
<p>具体作用：创建时间轴（用于播放动画等）</p>
<p>接口：play——正放</p>
<p>play from start——从头正放</p>
<p>stop——暂停</p>
<p>Reverse——倒放</p>
<p>Reverse from End——从最后倒放</p>
<p>Set New Time——跳转到特定时间轴</p>
<p>New Time——设定跳转到的特定时间轴（需要Set New Time启用）</p>
<p>Update——在时间轴移动时不断执行</p>
<p>Finished——时间轴结束后执行（无论正放倒放）</p>
<p>Direction——为时间轴进行方向，可在update或finished后接入switch判断正放倒放</p>
<p>*创建时间轴和圆滑曲线化：</p>
<p>通常使用浮点型轨道（f+），键入轨道名称后会出现相应接口，返回时间轴窗口创建关键帧，在两个不同关键帧间会形成对应时间和值的变化直线（折线），最后修改时间轴总长度等于有效变化直线的时间，若同时将两个或以上的关键帧插值改为“用户”型，可通过调整其切线使整个变化折线变为曲线，更加圆滑的完成值的变化</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/12.png" alt="12"></p>
<p>节点名：拆分变换</p>
<p>呼出方式：右键查找（使用节点名或break）</p>
<p>具体作用：将一个变换过程拆分成L、R、S三者</p>
<p>接口：In Transform——需要拆分的变换</p>
<p>Location——位置变化量</p>
<p>Rotation——旋转变化量</p>
<p>Scale——缩放变化量</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/13.png" alt="13"></p>
<p>节点名：创建变换</p>
<p>呼出方式：右键查找（使用节点名或make）</p>
<p>具体作用：合并L、R、S三者为一个变换过程</p>
<p>接口：Location——位置变化量</p>
<p>Rotation——旋转变化量</p>
<p>Scale——缩放变化量</p>
<p>Return value——变换的返回值</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/15.png" alt="15"></p>
<p>节点名：插值</p>
<p>呼出方式：右键查找（使用节点名或lerp）</p>
<p>具体作用：取出某个值随时间变化中特定比例处的值</p>
<p>接口：A——变化开始时值的初始量</p>
<p>B——变化结束时值的终点量</p>
<p>Alpha——变化量占A，B差值的比例（只能为0~1）</p>
<p>Return Value——返回初始值加变化量的结果</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/16.png" alt="16"></p>
<p>节点名：插值（向量）</p>
<p>呼出方式：右键查找（使用节点名或lerp）</p>
<p>具体作用：取出某个向量随时间变化中特定比例处的值</p>
<p>接口：A——变化开始时向量的初始值</p>
<p>B——变化结束时向量的终点值</p>
<p>Alpha——变化量占A，B差值的比例（只能为0~1）</p>
<p>Return Value——返回初始值加变化量的结果</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/14.png" alt="14"></p>
<p>节点名：已限制映射范围</p>
<p>呼出方式：右键查找（使用节点名或Clamp）</p>
<p>具体作用：将基准值实现In A~In B的变化，并且按In和Out的A、B比例缩放</p>
<p>接口：Value——输入的基准值</p>
<p>In Range A——输入的初始比例</p>
<p>In Range B——输入的终点比例</p>
<p>Out Range A——输出的初始比例</p>
<p>Out Range B——输出的终点比例</p>
<p>Return Value——返回变化且缩放后的值</p>
<p>注：上文所提到的普通插值可视作In A=0.0，In B=1.0的该结点</p>
<h1 id="运算节点："><a href="#运算节点：" class="headerlink" title="运算节点："></a>运算节点：</h1><p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/17.png" alt="17"></p>
<p>节点名：限制（浮点）</p>
<p>呼出方式：右键查找（使用节点名或clamp）</p>
<p>具体作用：将数据限制在范围内，范围外的数小于min的输出min，大于max输出max</p>
<p>接口：Value——输入值</p>
<p>Min——范围的最小值</p>
<p>Max——范围的最大值</p>
<p>Return Value——数据限制后的返回值</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/18.png" alt="18"></p>
<p>节点名：截断</p>
<p>呼出方式：右键查找（使用节点名）/将浮点数据直接接入整数接口</p>
<p>具体作用：将数据向0舍入，截断小数部分</p>
<p>注：1.6舍入为1，但-1.6舍入为-1</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/19.png" alt="19"></p>
<p>节点名：底部</p>
<p>呼出方式：右键查找（使用节点名或floor）</p>
<p>具体作用：将数据向负无穷舍入，下舍到前一个整数</p>
<p>注：1.6舍入为1，但-1.6舍入为-2</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/20.png" alt="20"></p>
<p>节点名：顶部</p>
<p>呼出方式：右键查找（使用节点名）</p>
<p>具体作用：将数据向正无穷/向上舍入到下一个整数</p>
<p>注：1.6舍入为2，而-1.6舍入为-1</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/21.png" alt="21"></p>
<p>节点名：舍入</p>
<p>呼出方式：右键查找（使用节点名或round）</p>
<p>具体作用：将数据舍入到最近的整数</p>
<p>注：1.6舍入为2，而-1.6舍入为-2</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/22.png" alt="22"></p>
<p>节点名：（dot）</p>
<p>呼出方式：右键查找（点乘积）</p>
<p>具体作用：计算向量点乘</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/23.png" alt="23"></p>
<p>节点名：（cross）</p>
<p>呼出方式：右键查找（叉乘积）</p>
<p>具体作用：计算向量叉乘</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/24.png" alt="24"></p>
<p>节点名：范围内随机浮点（其他数据类型也可）</p>
<p>呼出方式：右键查找（使用节点名或random float）</p>
<p>具体作用：生成随机浮点数</p>
<p>接口：min——最小值</p>
<p>max——最大值</p>
<p>return value——范围内的随机数</p>
<h1 id="选择节点："><a href="#选择节点：" class="headerlink" title="选择节点："></a>选择节点：</h1><p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/7.png" alt="7"></p>
<p>节点名：切换整型</p>
<p>呼出方式：右键查询（使用节点名或switch）</p>
<p>具体作用：利用整数切换引脚流程</p>
<p>接口：Selection——作为切换标准的整型</p>
<p>Default——不满足其他引脚时的默认执行引脚</p>
<p>注：除切换为整型以外，其他类型的数据也可使用switch查找对应类型的切换</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/9.png" alt="9"></p>
<p>节点名：开启字符串【翻译可能有误】</p>
<p>呼出方式：右键查询（使用节点名或switch）</p>
<p>具体作用：输入指定字符串选择完全相同的引脚执行</p>
<p>接口：Selection——输入作为判断依据的字符</p>
<p>Default——不满足其他引脚时的默认执行引脚</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/8.png" alt="8"></p>
<p>节点名：选择</p>
<p>呼出方式：右键查询（使用节点名或select）</p>
<p>具体作用：通过输入的内容得到已设定的返回值</p>
<p>接口：Option 0，Option 1——设置给出的index值得到的返回值</p>
<p>Index——可以接入任何类型的通配符</p>
<p>Return value——返回值的出口</p>
<h1 id="控制器节点："><a href="#控制器节点：" class="headerlink" title="控制器节点："></a>控制器节点：</h1><p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/26.png" alt="26"></p>
<p>节点名：设置仅输入模式游戏</p>
<p>呼出方式：右键查询（使用节点名或input only）</p>
<p>具体作用：设置鼠标的输入模式，将光标锁定在游戏界面中心</p>
<p>接口：Player Controller——接玩家控制器</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/25.png" alt="25"></p>
<p>节点名：设置仅输入模式UI</p>
<p>呼出方式：右键查询（使用节点名或input only）</p>
<p>具体作用：设置鼠标的输入模式，将光标锁定在某个UI上</p>
<p>接口：Player Controller——接玩家控制器</p>
<p>In Widget to Focus——将光标锁定在该接口指定的UI上</p>
<p>In Mouse Lock Mode——设置系统光标状态</p>
<p>注：In Mouse Lock Mode接口分不锁定、捕获时锁定、固定锁定、锁定为全屏；捕获时锁定指运行窗口在最前端时将系统光标锁定在程序窗口内，直到win键强行解锁；固定锁定指一直将系统光标锁定在程序窗口内，直到win键强行解锁；锁定为全屏指仅全屏时锁定光标。</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/31.png" alt="31"></p>
<p>节点名：获取玩家控制器/角色/pawn</p>
<p>呼出方式：右键查询（使用节点名或蓝色引脚牵出搜索get player）</p>
<p>具体作用：得到一个玩家控制器的返回值</p>
<p>接口：Player Index——玩家控制器的序号</p>
<p>Return Value——返回玩家控制器</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/33.png" alt="33"></p>
<p>节点名：（set）</p>
<p>呼出方式：右键查询（show mouse）[需要取消情境关联]</p>
<p>具体作用：设置鼠标的显示</p>
<p>接口：Show Mouse Cursor——是否显示鼠标</p>
<p>目标——接玩家控制器</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/32.png" alt="32"></p>
<p>节点名：生成Actor</p>
<p>呼出方式：右键查询（使用节点名或create）</p>
<p>具体作用：凭空创建一个actor</p>
<p>接口：Class——生成的actor类型</p>
<p>Spawn Transform——指定actor初始变换（生成位置、缩放、旋转度）</p>
<p>Collision Handing Override——判断生成的条件（和碰撞体积有关）</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/27.png" alt="27"></p>
<p>节点名：销毁Actor</p>
<p>呼出方式：右键查询（使用节点名或destroy）</p>
<p>具体作用：销毁目标Actor</p>
<p>接口：目标——被销毁的对象</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/30.png" alt="30"></p>
<p>节点名：构建</p>
<p>呼出方式：右键查询（使用节点名或create）</p>
<p>具体作用：创建一个UI</p>
<p>接口：Class——UI的类型</p>
<p>Owning Player——指定UI属于哪一个玩家</p>
<p>Return Value——生成的UI</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/29.png" alt="29"></p>
<p>节点名：添加到视口</p>
<p>呼出方式：右键查询（使用节点名或牵引构建ui的返回值引脚，输入add to）</p>
<p>具体作用：让创建的UI显示到用户界面</p>
<p>接口：目标——接已创建的UI</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/28.png" alt="28"></p>
<p>节点名：从父项中移除</p>
<p>呼出方式：右键查询（使用节点名或remove from parent）</p>
<p>具体作用：移除目标控件</p>
<p>接口：目标——需要移除的控件</p>
<h1 id="数组节点"><a href="#数组节点" class="headerlink" title="数组节点"></a>数组节点</h1><p>创建数组：在创建好的变量左侧图标上右键，能够创建一个同类型变量的数组</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/34.png" alt="34"></p>
<p>节点名：获取数组元素（上为复制，下为引用）</p>
<p>呼出方式：右键查询（使用节点名或数组引线查询get）</p>
<p>具体作用：获取数组中指定下标的元素</p>
<p>接口：（数组接口）——该元素所在数组</p>
<p>（整数型接口）——需要获取的数组元素下标</p>
<p>（右值）——返回值（复制返回值，引用返回地址）</p>
<p>注：该节点分为复制和引用两种方式，同c/c++中函数的传值和引用传址，复制会生成副本，引起的变化不改变数组本身，而引用则可以改变数组内元素的值，但操作不当易使数据受损</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/35.png" alt="35"></p>
<p>节点名：创建数组</p>
<p>呼出方式：右键查询（使用节点名或从set左值牵引查询make）</p>
<p>具体作用：创建一个数组</p>
<p>接口：左侧——设置序号下的数组值</p>
<p>右侧——得到数组变量</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/36.png" alt="36"></p>
<p>节点名：（set）</p>
<p>呼出方式：有引出变量的情况下，输入set查询</p>
<p>具体作用：设置数组</p>
<p>接口：左侧——被设置的对象变量数组</p>
<p>右侧——接已经创建的数组</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/37.png" alt="37"></p>
<p>节点名：设置阵列元素</p>
<p>呼出方式：右键查询（使用节点名或牵引数组接口查询set）</p>
<p>具体作用：设置数组单个元素的值</p>
<p>接口：Target Array——接该元素所在数组</p>
<p>Index——指定的数组元素的序号</p>
<p>Item——为该数组元素所赋的值</p>
<p>Size to Fit——当index大于数组大小时，数组将扩展</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/38.png" alt="38"></p>
<p>节点名：查找项目</p>
<p>呼出方式：右键查询（使用节点名或牵引数组接口查询array）</p>
<p>具体作用：查找与给定值相等的数组下标</p>
<p>接口：左侧——数组与需要查找的给定值</p>
<p>右侧——数组序号返回值</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/39.png" alt="39"></p>
<p>节点名：为有效索引</p>
<p>呼出方式：右键查询（使用节点名或牵引数组接口查询array）</p>
<p>具体作用：判断能否查找到指定元素</p>
<p>接口：左侧——数组与需要查找的给定值</p>
<p>右侧——能否找到的bool值返回</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/40.png" alt="40"></p>
<p>节点名：添加</p>
<p>呼出方式：右键查询（使用节点名或牵引数组接口查询array）</p>
<p>具体作用：在数组最后添加一个元素</p>
<p>接口：左侧——数组与需要添加的值</p>
<p>右侧——数组序号返回值</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/41.png" alt="41"></p>
<p>节点名：插入</p>
<p>呼出方式：右键查询（使用节点名或牵引数组接口查询array）</p>
<p>具体作用：在指定下标处插入一个元素，其他元素自动后移</p>
<p>接口：左侧——数组与需要查找的给定值，以及需要插入的位置序号</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/42.png" alt="42"></p>
<p>节点名：长度</p>
<p>呼出方式：右键查询（使用节点名或牵引数组接口查询array）</p>
<p>具体作用：返回数组长度</p>
<p>接口：左侧——数组</p>
<p>右侧——数组长度返回值</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/43.png" alt="43"></p>
<p>节点名：清空</p>
<p>呼出方式：右键查询（使用节点名或牵引数组接口查询array）</p>
<p>具体作用：清空整个数组</p>
<p>接口：左侧——需要清空的数组</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/44.png" alt="44"></p>
<p>节点名：移除项目</p>
<p>呼出方式：右键查询（使用节点名或牵引数组接口查询array）</p>
<p>具体作用：移除等于这个值的元素</p>
<p>接口：左侧——数组与需要移除的给定值</p>
<p>右侧——返回是否成功移除</p>
<p><img src="/2021/04/02/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E-1/45.png" alt="45"></p>
<p>节点名：移除索引</p>
<p>呼出方式：右键查询（使用节点名或牵引数组接口查询array）</p>
<p>具体作用：移除这个下标的元素</p>
<p>接口：左侧——数组和元素下标</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>虚幻引擎学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习-1</title>
    <url>/2021/01/26/Linux%E5%AD%A6%E4%B9%A0-1/</url>
    <content><![CDATA[<p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p>
<p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
<h1 id="Linux-应用领域"><a href="#Linux-应用领域" class="headerlink" title="Linux 应用领域"></a>Linux 应用领域</h1><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p>
<h1 id="Linux-和-Windows的区别"><a href="#Linux-和-Windows的区别" class="headerlink" title="Linux 和 Windows的区别"></a>Linux 和 Windows的区别</h1><p>目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。主要区别如下</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">Windows</th>
<th align="left">Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="left">界面</td>
<td align="left">界面统一，外壳程序固定所有 Windows 程序菜单几乎一致，快捷键也几乎相同</td>
<td align="left">图形界面风格依发布版不同而不同，可能互不兼容。GNU/Linux 的终端机是从 UNIX 传承下来，基本命令和操作方法也几乎一致。</td>
</tr>
<tr>
<td align="left">驱动程序</td>
<td align="left">驱动程序丰富，版本更新频繁。默认安装程序里面一般包含有该版本发布时流行的硬件驱动程序，之后所出的新硬件驱动依赖于硬件厂商提供。对于一些老硬件，如果没有了原配的驱动有时很难支持。另外，有时硬件厂商未提供所需版本的 Windows 下的驱动，也会比较头痛。</td>
<td align="left">由志愿者开发，由 Linux 核心开发小组发布，很多硬件厂商基于版权考虑并未提供驱动程序，尽管多数无需手动安装，但是涉及安装则相对复杂，使得新用户面对驱动程序问题（是否存在和安装方法）会一筹莫展。但是在开源开发模式下，许多老硬件尽管在Windows下很难支持的也容易找到驱动。HP、Intel、AMD 等硬件厂商逐步不同程度支持开源驱动，问题正在得到缓解。</td>
</tr>
<tr>
<td align="left">使用</td>
<td align="left">使用比较简单，容易入门。图形化界面对没有计算机背景知识的用户使用十分有利。</td>
<td align="left">图形界面使用简单，容易入门。文字界面，需要学习才能掌握。</td>
</tr>
<tr>
<td align="left">学习</td>
<td align="left">系统构造复杂、变化频繁，且知识、技能淘汰快，深入学习困难。</td>
<td align="left">系统构造简单、稳定，且知识、技能传承性好，深入学习相对容易。</td>
</tr>
<tr>
<td align="left">软件</td>
<td align="left">每一种特定功能可能都需要商业软件的支持，需要购买相应的授权。</td>
<td align="left">大部分软件都可以自由获取，同样功能的软件选择较少。</td>
</tr>
</tbody></table>
<h1 id="Linux-系统启动过程"><a href="#Linux-系统启动过程" class="headerlink" title="Linux 系统启动过程"></a>Linux 系统启动过程</h1><p>linux启动时我们会看到许多启动信息。</p>
<p>Linux系统的启动过程并不是大家想象中的那么复杂，其过程可以分为5个阶段：</p>
<ul>
<li>内核的引导</li>
<li>运行 init</li>
<li>系统初始化</li>
<li>建立终端 </li>
<li>用户登录系统</li>
</ul>
<h2 id="init程序的类型："><a href="#init程序的类型：" class="headerlink" title="init程序的类型："></a>init程序的类型：</h2><ul>
<li>SysV: init, CentOS 5之前, 配置文件： /etc/inittab</li>
<li>Upstart: init,CentOS 6, 配置文件： /etc/inittab, /etc/init/*.conf</li>
<li>Systemd： systemd, CentOS 7,配置文件： /usr/lib/systemd/system、 /etc/systemd/system</li>
</ul>
<h2 id="内核引导"><a href="#内核引导" class="headerlink" title="内核引导"></a>内核引导</h2><p>当计算机打开电源后，首先是BIOS开机自检，按照BIOS中设置的启动设备（通常是硬盘）来启动。</p>
<p>操作系统接管硬件以后，首先读入 /boot 目录下的内核文件。</p>
<h2 id="运行init"><a href="#运行init" class="headerlink" title="运行init"></a>运行init</h2><p>init 进程是系统所有进程的起点，你可以把它比拟成系统所有进程的老祖宗，没有这个进程，系统中任何进程都不会启动。</p>
<p>init 程序首先是需要读取配置文件 /etc/inittab。</p>
<h2 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h2><p>许多程序需要开机启动。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。</p>
<p>init进程的一大任务，就是去运行这些开机启动的程序。</p>
<p>但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要。</p>
<p>Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别”（runlevel）。也就是说，启动时根据”运行级别”，确定要运行哪些程序。</p>
<p>Linux系统有7个运行级别(runlevel)：</p>
<ul>
<li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li>
<li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li>
<li>运行级别2：多用户状态(没有NFS)</li>
<li>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</li>
<li>运行级别4：系统未使用，保留</li>
<li>运行级别5：X11控制台，登陆后进入图形GUI模式</li>
<li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li>
</ul>
<h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><p>在init的配置文件中有这么一行： si::sysinit:/etc/rc.d/rc.sysinit　它调用执行了/etc/rc.d/rc.sysinit，而rc.sysinit是一个bash shell的脚本，它主要是完成一些系统初始化的工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本。</p>
<p>它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务。</p>
<pre><code>l5:5:wait:/etc/rc.d/rc 5</code></pre>
<p>这一行表示以5为参数运行/etc/rc.d/rc，/etc/rc.d/rc是一个Shell脚本，它接受5作为参数，去执行/etc/rc.d/rc5.d/目录下的所有的rc启动脚本，/etc/rc.d/rc5.d/目录中的这些启动脚本实际上都是一些连接文件，而不是真正的rc启动脚本，真正的rc启动脚本实际上都是放在/etc/rc.d/init.d/目录下。</p>
<p>而这些rc启动脚本有着类似的用法，它们一般能接受start、stop、restart、status等参数。</p>
<p>/etc/rc.d/rc5.d/中的rc启动脚本通常是K或S开头的连接文件，对于以 S 开头的启动脚本，将以start参数来运行。</p>
<p>而如果发现存在相应的脚本也存在K打头的连接，而且已经处于运行态了(以/var/lock/subsys/下的文件作为标志)，则将首先以stop为参数停止这些已经启动了的守护进程，然后再重新运行。</p>
<p>这样做是为了保证是当init改变运行级别时，所有相关的守护进程都将重启。</p>
<p>至于在每个运行级中将运行哪些守护进程，用户可以通过chkconfig或setup中的”System Services”来自行设定。</p>
<h2 id="建立终端"><a href="#建立终端" class="headerlink" title="建立终端"></a>建立终端</h2><p>rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。</p>
<p>init接下来会打开6个终端，以便用户登录系统。在inittab中的以下6行就是定义了6个终端：</p>
<pre><code>1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6</code></pre>
<p>从上面可以看出在2、3、4、5的运行级别中都将以respawn方式运行mingetty程序，mingetty程序能打开终端、设置模式。</p>
<p>同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。</p>
<h1 id="用户登录系统"><a href="#用户登录系统" class="headerlink" title="用户登录系统"></a>用户登录系统</h1><p>一般来说，用户的登录方式有三种：</p>
<ul>
<li>（1）命令行登录</li>
<li>（2）ssh登录</li>
<li>（3）图形界面登录</li>
</ul>
<p>对于运行级别为5的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入 KDE、Gnome 等窗口管理器。</p>
<p>而本文主要讲的还是文本方式登录的情况：当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。</p>
<p>Linux 的账号验证程序是 login，login 会接收 mingetty 传来的用户名作为用户名参数。</p>
<p>然后 login 会对用户名进行分析：如果用户名不是 root，且存在 /etc/nologin 文件，login 将输出 nologin 文件的内容，然后退出。</p>
<p>这通常用来系统维护时防止非root用户登录。只有/etc/securetty中登记了的终端才允许 root 用户登录，如果不存在这个文件，则 root 用户可以在任何终端上登录。</p>
<p>/etc/usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。</p>
<h2 id="图形模式与文字模式的切换方式"><a href="#图形模式与文字模式的切换方式" class="headerlink" title="图形模式与文字模式的切换方式"></a>图形模式与文字模式的切换方式</h2><p>Linux预设提供了六个命令窗口终端机让我们来登录。</p>
<p>默认我们登录的就是第一个窗口，也就是tty1，这个六个窗口分别为tty1,tty2 … tty6，你可以按下Ctrl + Alt + F1 ~ F6 来切换它们。</p>
<p>如果你安装了图形界面，默认情况下是进入图形界面的，此时你就可以按Ctrl + Alt + F1 ~ F6来进入其中一个命令窗口界面。</p>
<p>当你进入命令窗口界面后再返回图形界面只要按下Ctrl + Alt + F7 就回来了。</p>
<p>如果你用的vmware 虚拟机，命令窗口切换的快捷键为 Alt + Space +（ F1-F6）. </p>
<p>如果你在图形界面下请按Alt + Shift + Ctrl + （F1-F6） 切换至命令窗口。</p>
<h1 id="Linux-关机"><a href="#Linux-关机" class="headerlink" title="Linux 关机"></a>Linux 关机</h1><p>在linux领域内<strong>大多用在服务器上，很少遇到关机的操作</strong>。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p>
<p>正确的关机流程为：sync &gt; shutdown &gt; reboot &gt; halt</p>
<p>关机指令为：shutdown ，你可以man shutdown 来看一下帮助文档。</p>
<pre><code>sync 将数据由内存同步到硬盘中。

shutdown 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：

shutdown –h 10 ‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。

shutdown –h now 立马关机

shutdown –h 20:25 系统会在今天20:25关机

shutdown –h +10 十分钟后关机

shutdown –r now 系统立马重启

shutdown –r +10 系统十分钟后重启

reboot 就是重启，等同于 shutdown –r now

halt 关闭系统，等同于shutdown –h now 和 poweroff</code></pre>
<p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中。</p>
<p>关机的命令有 <strong>shutdown –h now halt poweroff</strong> 和 <strong>init 0</strong> , 重启系统的命令有 <strong>shutdown –r now reboot init 6</strong>。</p>
<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p><strong>[Tab] 有『命令补全』与『文件补齐』的功能</strong></p>
<pre><code>[Tab]      ## 接在一串指令的第一个字的后面，则为『命令补全』
[Tab]      ## 接在一串指令的第二个字以后时，则为『文件补齐』</code></pre>
<p>若安装 bash-completion 软件，则在某些指令后面使用 [tab] 按键时，可以进行『选项/参数的补齐』功能！</p>
<p><strong>[Ctrl]+ C 如果在Linux 底下输入了错误的指令或参数，想让当前的程序『停掉』的话，可以输入：</strong></p>
<pre><code>[Ctrl] + c </code></pre>
<p><strong>[Ctrl]-d 『键盘输入结束(End Of File, EOF 或 End Of Input)』的意思</strong></p>
<p>另外，他也可以用来取代 exit 的输入。</p>
<p>例如你想要直接离开文字接口，可以直接按下：</p>
<pre><code>[Ctrl] + d   ## 相当于输入 exit</code></pre>
<p><strong>[shift]+{[PageUP]|[Page Down]}</strong></p>
<pre><code>[Shift]+[Page Up]    ## 往前翻页 

[Shift]+[Page Down] ## 往后翻页</code></pre>
<p>shutdown 会给系统计划一个时间关机。它可以被用于停止、关机、重启机器。shutdown 会给系统计划一个时间关机。它可以被用于停止、关机、重启机器。</p>
<pre><code># shutdown -p now  ### 关闭机器
# shutdown -H now  ### 停止机器      
# shutdown -r 09:35 ### 在 09:35am 重启机器</code></pre>
<p>要取消即将进行的关机，只要输入下面的命令：</p>
<pre><code># shutdown -c</code></pre>
<p>halt 命令通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态。注意在有些情况会它会完全关闭系统。</p>
<pre><code># halt             ### 停止机器
# halt -p          ### 关闭机器、关闭电源
# halt --reboot    ### 重启机器</code></pre>
<p>poweroff 会发送一个 ACPI 信号来通知系统关机。</p>
<pre><code># poweroff           ### 关闭机器、关闭电源
# poweroff --halt    ### 停止机器
# poweroff --reboot  ### 重启机器</code></pre>
<p>reboot 命令 reboot 通知系统重启。</p>
<pre><code># reboot           ### 重启机器
# reboot --halt    ### 停止机器
# reboot -p        ### 关闭机器</code></pre>
<h1 id="Linux-系统目录结构"><a href="#Linux-系统目录结构" class="headerlink" title="Linux 系统目录结构"></a>Linux 系统目录结构</h1><p>登录系统后，在当前命令窗口下输入命令：</p>
<pre><code> ls / </code></pre>
<p>可显示当前层的目录。</p>
<p><img src="/2021/01/26/Linux%E5%AD%A6%E4%B9%A0-1/pic-1.png" alt="树状目录结构图"></p>
<p>在 Linux 或 Unix 操作系统中，所有的文件和目录都被组织成以一个根节点开始的倒置的树状结构。</p>
<p>文件系统的最顶层是由根目录开始的，系统使用 <strong>/</strong> 来表示根目录。在根目录之下的既可以是目录，也可以是文件，而每一个目录中又可以包含子目录文件。如此反复就可以构成一个庞大的文件系统。</p>
<p>在Linux文件系统中有两个特殊的目录，一个用户所在的工作目录，也叫当前目录，可以使用一个点 <strong>.</strong> 来表示；另一个是当前目录的上一级目录，也叫父目录，可以使用两个点 <strong>..</strong> 来表示。</p>
<ul>
<li> . ：代表当前的目录，也可以使用 ./ 来表示；</li>
<li> .. ：代表上一层目录，也可以 ../ 来代表。</li>
</ul>
<p>如果一个目录或文件名以一个点 . 开始，表示这个目录或文件是一个隐藏目录或文件(如：.bashrc)。即以默认方式查找时，不显示该目录或文件。</p>
<h2 id="1-系统启动必须："><a href="#1-系统启动必须：" class="headerlink" title="1.系统启动必须："></a><strong>1.系统启动必须：</strong></h2><p><strong>/boot：</strong>存放的启动Linux 时使用的内核文件，包括连接文件以及镜像文件。</p>
<p><strong>/etc：</strong>存放<strong>所有</strong>的系统需要的<strong>配置文件</strong>和<strong>子目录列表，</strong>更改目录下的文件可能会导致系统不能启动。</p>
<p><strong>/lib</strong>：存放基本代码库（比如c++库），其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p>
<p><strong>/sys</strong>： 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中</p>
<h2 id="2-指令集合："><a href="#2-指令集合：" class="headerlink" title="2.指令集合："></a><strong>2.指令集合：</strong></h2><p><strong>/bin：</strong>存放着最常用的程序和指令</p>
<p><strong>/sbin：</strong>只有系统管理员能使用的程序和指令。</p>
<h2 id="3-外部文件管理："><a href="#3-外部文件管理：" class="headerlink" title="3.外部文件管理："></a><strong>3.外部文件管理：</strong></h2><p><strong>/dev ：</strong>Device(设备)的缩写, 存放的是Linux的外部设备。<strong>注意：</strong>在Linux中访问设备和访问文件的方式是相同的。</p>
<p><strong>/media</strong>：类windows的<strong>其他设备，</strong>例如U盘、光驱等等，识别后linux会把设备放到这个目录下。</p>
<p><strong>/mnt</strong>：临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p>
<h2 id="4-临时文件："><a href="#4-临时文件：" class="headerlink" title="4.临时文件："></a><strong>4.临时文件：</strong></h2><p><strong>/run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p>
<p><strong>/lost+found</strong>：一般情况下为空的，系统非法关机后，这里就存放一些文件。</p>
<p><strong>/tmp</strong>：这个目录是用来存放一些临时文件的。</p>
<h2 id="5-账户："><a href="#5-账户：" class="headerlink" title="5.账户："></a><strong>5.账户：</strong></h2><p><strong>/root</strong>：系统管理员的用户主目录。</p>
<p><strong>/home</strong>：用户的主目录，以用户的账号命名的。</p>
<p><strong>/usr</strong>：用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</p>
<p><strong>/usr/bin：</strong>系统用户使用的应用程序与指令。</p>
<p><strong>/usr/sbin：</strong>超级用户使用的比较高级的管理程序和系统守护程序。</p>
<p><strong>/usr/src：</strong>内核源代码默认的放置目录。</p>
<h2 id="6-运行过程中要用："><a href="#6-运行过程中要用：" class="headerlink" title="6.运行过程中要用："></a><strong>6.运行过程中要用：</strong></h2><p><strong>/var</strong>：存放经常修改的数据，比如程序运行的日志文件（/var/log 目录下）。</p>
<p><strong>/proc</strong>：管理<strong>内存空间！</strong>虚拟的目录，是系统内存的映射，我们可以直接访问这个目录来，获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件来做修改。</p>
<h2 id="7-扩展用的："><a href="#7-扩展用的：" class="headerlink" title="7.扩展用的："></a><strong>7.扩展用的：</strong></h2><p><strong>/opt</strong>：默认是空的，我们安装额外软件可以放在这个里面。</p>
<p><strong>/srv</strong>：存放服务启动后需要提取的数据<strong>（不用服务器就是空）</strong></p>
<h2 id="8-其他："><a href="#8-其他：" class="headerlink" title="8.其他："></a>8.其他：</h2><p><strong>/proc</strong>：<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p>
<pre><code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></pre>
<p><strong>/selinux：</strong><br> 这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p>
<h4 id="在-Linux-系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。"><a href="#在-Linux-系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。" class="headerlink" title="在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。"></a>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</h4><p><strong>/etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p>
<p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在 /bin/ls 目录下的。</p>
<p>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给 root 使用的指令。</p>
<p><strong>/var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 /var/log 目录下，另外 mail 的预设放置也是在这里。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习-3</title>
    <url>/2021/02/19/Linux%E5%AD%A6%E4%B9%A0-3/</url>
    <content><![CDATA[<h1 id="常用命令大全："><a href="#常用命令大全：" class="headerlink" title="常用命令大全："></a>常用命令大全：</h1><h2 id="日常使用命令"><a href="#日常使用命令" class="headerlink" title="日常使用命令"></a>日常使用命令</h2><p>开关机命令<br>1、shutdown –h now：立刻进行关机</p>
<p>2、shutdown –r now：现在重新启动计算机</p>
<p>3、reboot：现在重新启动计算机</p>
<p>4、su -：切换用户；passwd：修改用户密码</p>
<p>5、logout：用户注销</p>
<h2 id="常用快捷命令"><a href="#常用快捷命令" class="headerlink" title="常用快捷命令"></a>常用快捷命令</h2><p>1、tab = 补全</p>
<p>2、ctrl + l -：清屏，类似clear命令</p>
<p>3、ctrl + r -：查找历史命令（history）；ctrl+c = 终止</p>
<p>4、ctrl+k = 删除此处至末尾所有内容</p>
<p>5、ctrl+u = 删除此处至开始所有内容</p>
<p>6、linux中的帮助命令：man、info、–help【[root@localhost ~]# man ls；[root@localhost ~]# info ls；[root@localhost ~]# ls –help】。退出帮助的话，按快捷键q</p>
<h2 id="日常操作命令"><a href="#日常操作命令" class="headerlink" title="日常操作命令"></a>日常操作命令</h2><p>1、ls</p>
<p>ls命令是列出目录内容的意思（List Directtory Contents）。运行它就是列出文件夹的内容，可能是文件也可能是文件夹。</p>
<p>  ls -l命令以详情模式(long listing fashion)列出文件夹的内容。</p>
<p>  ls -a命令会列出文件夹里的所有内容，包括以”.”开头的隐藏文件。</p>
<p>  注意：在Linux中，文件以“.”开头就是隐藏文件，并且每个文件，文件夹，设备或者命令都是以文件对待。</p>
<p>  2、lsblk</p>
<p>  lsblk就是列出块设备。除了RAM外，以标准的树状输出格式，整齐地显示块设备。</p>
<p>  lsblk -l命令以列表格式显示块设备(而不是树状格式)。</p>
<p>  注意：lsblk是最有用和最简单的方式来了解新插入的USB设备的名字，特别是当你在终端上处理磁盘/块设备时。</p>
<p>  3、uname</p>
<p>  “uname”命令就是Unix Name的简写。显示机器名，操作系统和内核的详细信息。</p>
<p>  注意：uname显示内核类别，uname -a显示详细信息。</p>
<p>  4、history</p>
<p>  “history”命令就是历史记录。它显示了在终端中所执行过的所有命令的历史。</p>
<p>  5、sudo</p>
<p>  “sudo”(super userdo)命令允许授权用户执行超级用户或者其它用户的命令。通过在sudoers列表的安全策略来指定。</p>
<p>  注意：sudo允许用户借用超级用户的权限，然而”su”命令实际上是允许用户以超级用户登录。所以sudo比su更安全。</p>
<p>  并不建议使用sudo或者su来处理日常用途，因为它可能导致严重的错误如果你意外的做错了事。</p>
<p>  6、chmod</p>
<p>  “chmod”命令就是改变文件的模式位。chmod会根据要求的模式来改变每个所给的文件，文件夹，脚本等等的文件模式（权限）。</p>
<p>  7、chown</p>
<p>  “chown”命令就是改变文件拥有者和所在用户组。每个文件都属于一个用户组和一个用户。在你的目录下，使用”ls -l”,你就会看到像这样的东西。</p>
<p>  8、apt</p>
<p>  Debian系列以“apt”命令为基础，“apt”代表了Advanced Package Tool。APT是一个为Debian系列系统（Ubuntu，Kubuntu等等）开发的高级包管理器，在Gnu/Linux系统上，它会为包自动地，智能地搜索，安装，升级以及解决依赖。例如：apt-get install mplayer</p>
<p>  9、cal</p>
<p>  “cal”（Calender），它用来显示当前月份或者未来或者过去任何年份中的月份。</p>
<p>  10、date</p>
<p>  “date”命令使用标准的输出打印当前的日期和时间，也可以深入设置。</p>
<h3 id="系统常用操作命令"><a href="#系统常用操作命令" class="headerlink" title="系统常用操作命令"></a>系统常用操作命令</h3><h4 id="1、指定运行级别"><a href="#1、指定运行级别" class="headerlink" title="1、指定运行级别"></a>1、指定运行级别</h4><p>命令：init[0123456]</p>
<p>运行级别：（0：关机；1：单用户；2：多用户状态没有网络服务；3：多用户状态有网络服务；4：系统未使用保留给用户；5：图形界面；6：系统重启）。</p>
<p> 常用运行级别是3和5，要修改默认的运行级别可修改文件/etc/inittab的id:5:inittab：这一行的数字。</p>
<p> 在启动引导界面的时候按e进入编辑，在进入grub引界面时，请输入e再选中第二个选项按e，再最后输入1[单用户级别]，然后按b进入单用户模式。</p>
<p> *：可通过此方法进行linux用户密码的修改。</p>
<h4 id="2、文件显示命令"><a href="#2、文件显示命令" class="headerlink" title="2、文件显示命令"></a>2、文件显示命令</h4><p>more：显示文件内容，带分页；</p>
<p>less：显示文件内容带分页；</p>
<p> grep：在文件中查询内容，grep –n “查找内容” 文件名；</p>
<p> | [管道命令]：在linux和unix系统中 | 就是管道命令，把上一个命令的结果交给 | 的后面的命令进行处理。</p>
<p> 例：grep –n “查找内容” 文件名 | more</p>
<p> cat：把文件串连接后输出到屏幕或加 &gt; fileName 到另一个档案。</p>
<p> head：格式：head [-n|c num]fileName，说明：显示文件头部内容。没有参数时，显示最前10行。</p>
<p> tail：格式：tail [-n|c num]fileName，说明：显示文件尾部内容。没有参数时，显示最后10行。</p>
<p> cut：格式：cut -cnum1-num2 filename，说明：显示每行从开头算起第 num1 到 num2 的字符。</p>
<h4 id="3、文件搜索命令find"><a href="#3、文件搜索命令find" class="headerlink" title="3、文件搜索命令find"></a>3、文件搜索命令find</h4><p>find：搜索文件及目录</p>
<p>在linux中，因为文件系统是以级别式的结构来组成的，所以要在整个系统中找到特定的文件和目录并不是件容易的事。而find命令可以解决上述问题。</p>
<p>  1、在特定的目录下搜索并显示指定名称的文件和目录。</p>
<p>  find / -name man：意思是说从根目录开始搜索名称为man的文件或目录。</p>
<p>  2、搜索一段时间内被存取/变更的文件或目录</p>
<p>  find / home–amin -10：十分钟内存取的文件或目录</p>
<p>  find / home–atime -10：十小时内存取的文件或目录</p>
<p>  find / home–cmin -10：十分钟内更改过的文件或目录</p>
<p>  find / home–ctime -10：十小时内更改过的文件或目录</p>
<p>  3、搜索指定大小的文件</p>
<p>  find / home–size +10k：意思是说查找/home目录下大小为10K的文件。</p>
<h4 id="4、重定向命令"><a href="#4、重定向命令" class="headerlink" title="4、重定向命令"></a>4、重定向命令</h4><p>重定向命令：管道定向命令“&gt;”为覆盖，“&gt;&gt;”追加写在原文件内容后面。</p>
<p>ls –l &gt;a.txt 列表的内容写入文件a.txt中（覆盖写）。</p>
<p>  ls –al&gt;&gt; aa.txt 列表的内容追加到文件aa.txt的末尾。</p>
<h4 id="5、其他命令"><a href="#5、其他命令" class="headerlink" title="5、其他命令"></a>5、其他命令</h4><p>who：格式：who - [husfV] [user]。说明：显示有哪些用户登录到系统中，显示的信息包含用户ID，使用的终端，上线时间，呆滞时间，CPU使用量，动作等等。相关命令 : who am i：显示当前用户是谁。</p>
<p>sleep：格式：sleep [–help] [–version] number[smhd]。说明 : sleep 可以用来将当前动作延迟一段时间。</p>
<p>  kill：格式：kill [ -s signal ] pid … 或 kill -l [ signal ]。说明：kill送出一个特定的信号 (signal) 给进程号为 pid 的进程。根据该信号而做特定的动作，若没有指定，默认是送出终止(TERM)信号。</p>
<p>  ps：格式：ps [options] [–help]。说明：显示进程的名称、占用资源、状态等。</p>
<p>  top：说明：显示CPU的使用率、内存大小、内存使用率、进程状态等。</p>
<h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><p>arch 显示机器的处理器架构(1)<br>uname -m 显示机器的处理器架构(2)<br>uname -r 显示正在使用的内核版本<br>dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)<br>hdparm -i /dev/hda 罗列一个磁盘的架构特性<br>hdparm -tT /dev/sda 在磁盘上执行测试性读取操作<br>cat /proc/cpuinfo 显示CPU info的信息<br>cat /proc/interrupts 显示中断<br>cat /proc/meminfo 校验内存使用<br>cat /proc/swaps 显示哪些swap被使用<br>cat /proc/version 显示内核的版本<br>cat /proc/net/dev 显示网络适配器及统计<br>cat /proc/mounts 显示已加载的文件系统<br>lspci -tv 罗列 PCI 设备<br>lsusb -tv 显示 USB 设备<br>date 显示系统日期<br>cal 2007 显示2007年的日历表<br>date 041217002007.00 设置日期和时间 - 月日时分年.秒<br>clock -w 将时间修改保存到 BIOS</p>
<h3 id="关机-系统的关机、重启以及登出"><a href="#关机-系统的关机、重启以及登出" class="headerlink" title="关机 (系统的关机、重启以及登出 )"></a>关机 (系统的关机、重启以及登出 )</h3><p>shutdown -h now 关闭系统(1)<br>init 0 关闭系统(2)<br>telinit 0 关闭系统(3)<br>shutdown -h hours:minutes &amp; 按预定时间关闭系统<br>shutdown -c 取消按预定时间关闭系统<br>shutdown -r now 重启(1)<br>reboot 重启(2)<br>logout 注销</p>
<h3 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h3><p>cd /home 进入 ‘/ home’ 目录’<br>cd … 返回上一级目录<br>cd …/… 返回上两级目录<br>cd 进入个人的主目录<br>cd ~user1 进入个人的主目录<br>cd - 返回上次所在的目录<br>pwd 显示工作路径<br>ls 查看目录中的文件<br>ls -F 查看目录中的文件<br>ls -l 显示文件和目录的详细资料<br>ls -a 显示隐藏文件<br>ls <em>[0-9]</em> 显示包含数字的文件名和目录名<br>tree 显示文件和目录由根目录开始的树形结构(1)<br>lstree 显示文件和目录由根目录开始的树形结构(2)<br>mkdir dir1 创建一个叫做 ‘dir1’ 的目录’<br>mkdir dir1 dir2 同时创建两个目录<br>mkdir -p /tmp/dir1/dir2 创建一个目录树<br>rm -f file1 删除一个叫做 ‘file1’ 的文件’<br>rmdir dir1 删除一个叫做 ‘dir1’ 的目录’<br>rm -rf dir1 删除一个叫做 ‘dir1’ 的目录并同时删除其内容<br>rm -rf dir1 dir2 同时删除两个目录及它们的内容<br>mv dir1 new_dir 重命名/移动 一个目录<br>cp file1 file2 复制一个文件<br>cp dir/* . 复制一个目录下的所有文件到当前工作目录<br>cp -a /tmp/dir1 . 复制一个目录到当前工作目录<br>cp -a dir1 dir2 复制一个目录<br>ln -s file1 lnk1 创建一个指向文件或目录的软链接<br>ln file1 lnk1 创建一个指向文件或目录的物理链接<br>touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)<br>file file1 outputs the mime type of the file as text<br>iconv -l 列出已知的编码<br>iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.<br>find . -maxdepth 1 -name *.jpg -print -exec convert “{}” -resize 80x60 “thumbs/{}” ; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)</p>
<h3 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h3><p>find / -name file1 从 ‘/‘ 开始进入根文件系统搜索文件和目录<br>find / -user user1 搜索属于用户 ‘user1’ 的文件和目录<br>find /home/user1 -name *.bin 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件<br>find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件<br>find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件<br>find / -name *.rpm -exec chmod 755 ‘{}’ ; 搜索以 ‘.rpm’ 结尾的文件并定义其权限<br>find / -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备<br>locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令<br>whereis halt 显示一个二进制文件、源码或man的位置<br>which halt 显示一个二进制文件或可执行文件的完整路径</p>
<h3 id="挂载一个文件系统"><a href="#挂载一个文件系统" class="headerlink" title="挂载一个文件系统"></a>挂载一个文件系统</h3><p>mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 ‘/ mnt/hda2’ 已经存在<br>umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 ‘/ mnt/hda2’ 退出<br>fuser -km /mnt/hda2 当设备繁忙时强制卸载<br>umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用<br>mount /dev/fd0 /mnt/floppy 挂载一个软盘<br>mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom<br>mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom<br>mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom<br>mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件<br>mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统<br>mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备<br>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享</p>
<h3 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h3><p>df -h 显示已经挂载的分区列表<br>ls -lSr |more 以尺寸大小排列文件和目录<br>du -sh dir1 估算目录 ‘dir1’ 已经使用的磁盘空间’<br>du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小<br>rpm -q -a –qf ‘%10{SIZE}t%{NAME}n’ | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)<br>dpkg-query -W -f=’ I n s t a l l e d − S i z e ; 10 t {Installed-Size;10}t Installed−Size;10t{Package}n’ | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</p>
<h3 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a>用户和群组</h3><p>groupadd group_name 创建一个新用户组<br>groupdel group_name 删除一个用户组<br>groupmod -n new_group_name old_group_name 重命名一个用户组<br>useradd -c “Name Surname “ -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 “admin” 用户组的用户<br>useradd user1 创建一个新用户<br>userdel -r user1 删除一个用户 ( ‘-r’ 排除主目录)<br>usermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性<br>passwd 修改口令<br>passwd user1 修改一个用户的口令 (只允许root执行)<br>chage -E 2005-12-31 user1 设置用户口令的失效期限<br>pwck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户<br>grpck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组<br>newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组</p>
<h3 id="文件的权限"><a href="#文件的权限" class="headerlink" title="文件的权限"></a>文件的权限</h3><p><strong>使用 “+” 设置权限，使用 “-” 用于取消</strong></p>
<p>ls -lh 显示权限<br>ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示<br>chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限<br>chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限<br>chown user1 file1 改变一个文件的所有人属性<br>chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性<br>chgrp group1 file1 改变文件的群组<br>chown user1:group1 file1 改变一个文件的所有人和群组属性<br>find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件<br>chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限<br>chmod u-s /bin/file1 禁用一个二进制文件的 SUID位<br>chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的<br>chmod g-s /home/public 禁用一个目录的 SGID 位<br>chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件<br>chmod o-t /home/public 禁用一个目录的 STIKY 位</p>
<p>文件的特殊属性 - 使用 “+” 设置权限，使用 “-” 用于取消<br>chattr +a file1 只允许以追加方式读写文件<br>chattr +c file1 允许这个文件能被内核自动压缩/解压<br>chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件<br>chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接<br>chattr +s file1 允许一个文件被安全地删除<br>chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘<br>chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件<br>lsattr 显示特殊的属性</p>
<h3 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a>打包和压缩文件</h3><p>bunzip2 file1.bz2 解压一个叫做 ‘file1.bz2’的文件<br>bzip2 file1 压缩一个叫做 ‘file1’ 的文件<br>gunzip file1.gz 解压一个叫做 ‘file1.gz’的文件<br>gzip file1 压缩一个叫做 ‘file1’的文件<br>gzip -9 file1 最大程度压缩<br>rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包<br>rar a file1.rar file1 file2 dir1 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’<br>rar x file1.rar 解压rar包<br>unrar x file1.rar 解压rar包<br>tar -cvf archive.tar file1 创建一个非压缩的 tarball<br>tar -cvf archive.tar file1 file2 dir1 创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件<br>tar -tf archive.tar 显示一个包中的内容<br>tar -xvf archive.tar 释放一个包<br>tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下<br>tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包<br>tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包<br>tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包<br>tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包<br>zip file1.zip file1 创建一个zip格式的压缩包<br>zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包<br>unzip file1.zip 解压一个zip格式压缩包</p>
<h3 id="RPM-包-（Fedora-Redhat及类似系统）"><a href="#RPM-包-（Fedora-Redhat及类似系统）" class="headerlink" title="RPM 包 - （Fedora, Redhat及类似系统）"></a>RPM 包 - （Fedora, Redhat及类似系统）</h3><p>rpm -ivh package.rpm 安装一个rpm包<br>rpm -ivh –nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告<br>rpm -U package.rpm 更新一个rpm包但不改变其配置文件<br>rpm -F package.rpm 更新一个确定已经安装的rpm包<br>rpm -e package_name.rpm 删除一个rpm包<br>rpm -qa 显示系统中所有已经安装的rpm包<br>rpm -qa | grep httpd 显示所有名称中包含 “httpd” 字样的rpm包<br>rpm -qi package_name 获取一个已安装包的特殊信息<br>rpm -qg “System Environment/Daemons” 显示一个组件的rpm包<br>rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表<br>rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表<br>rpm -q package_name –whatrequires 显示与一个rpm包存在依赖关系的列表<br>rpm -q package_name –whatprovides 显示一个rpm包所占的体积<br>rpm -q package_name –scripts 显示在安装/删除期间所执行的脚本l<br>rpm -q package_name –changelog 显示一个rpm包的修改历史<br>rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供<br>rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表<br>rpm –import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书<br>rpm –checksig package.rpm 确认一个rpm包的完整性<br>rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性<br>rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间<br>rpm -Va 检查系统中所有已安装的rpm包- 小心使用<br>rpm -Vp package.rpm 确认一个rpm包还未安装<br>rpm2cpio package.rpm | cpio –extract –make-directories <em>bin</em> 从一个rpm包运行可执行文件<br>rpm -ivh /usr/src/redhat/RPMS/<code>arch</code>/package.rpm 从一个rpm源码安装一个构建好的包<br>rpmbuild –rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包</p>
<h3 id="YUM-软件包升级器-（Fedora-RedHat及类似系统）"><a href="#YUM-软件包升级器-（Fedora-RedHat及类似系统）" class="headerlink" title="YUM 软件包升级器 - （Fedora, RedHat及类似系统）"></a>YUM 软件包升级器 - （Fedora, RedHat及类似系统）</h3><p>yum install package_name 下载并安装一个rpm包<br>yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系<br>yum update package_name.rpm 更新当前系统中所有安装的rpm包<br>yum update package_name 更新一个rpm包<br>yum remove package_name 删除一个rpm包<br>yum list 列出当前系统中安装的所有包<br>yum search package_name 在rpm仓库中搜寻软件包<br>yum clean packages 清理rpm缓存删除下载的包<br>yum clean headers 删除所有头文件<br>yum clean all 删除所有缓存的包和头文件</p>
<h3 id="DEB-包-Debian-Ubuntu-以及类似系统"><a href="#DEB-包-Debian-Ubuntu-以及类似系统" class="headerlink" title="DEB 包 (Debian, Ubuntu 以及类似系统)"></a>DEB 包 (Debian, Ubuntu 以及类似系统)</h3><p>dpkg -i package.deb 安装/更新一个 deb 包<br>dpkg -r package_name 从系统删除一个 deb 包<br>dpkg -l 显示系统中所有已经安装的 deb 包<br>dpkg -l | grep httpd 显示所有名称中包含 “httpd” 字样的deb包<br>dpkg -s package_name 获得已经安装在系统中一个特殊包的信息<br>dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表<br>dpkg –contents package.deb 显示尚未安装的一个包所提供的文件列表<br>dpkg -S /bin/ping 确认所给的文件由哪个deb包提供</p>
<h3 id="APT-软件工具-Debian-Ubuntu-以及类似系统"><a href="#APT-软件工具-Debian-Ubuntu-以及类似系统" class="headerlink" title="APT 软件工具 (Debian, Ubuntu 以及类似系统)"></a>APT 软件工具 (Debian, Ubuntu 以及类似系统)</h3><p>apt-get install package_name 安装/更新一个 deb 包<br>apt-cdrom install package_name 从光盘安装/更新一个 deb 包<br>apt-get update 升级列表中的软件包<br>apt-get upgrade 升级所有已安装的软件<br>apt-get remove package_name 从系统删除一个deb包<br>apt-get check 确认依赖的软件仓库正确<br>apt-get clean 从下载的软件包中清理缓存<br>apt-cache search searched-package 返回包含所要搜索字符串的软件包名称</p>
<h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><p>cat file1 从第一个字节开始正向查看文件的内容<br>tac file1 从最后一行开始反向查看一个文件的内容<br>more file1 查看一个长文件的内容<br>less file1 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作<br>head -2 file1 查看一个文件的前两行<br>tail -2 file1 查看一个文件的最后两行<br>tail -f /var/log/messages 实时查看被添加到一个文件中的内容</p>
<h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><p>cat file1 file2 … | command &lt;&gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT<br>cat file1 | command( sed, grep, awk, grep, etc…) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中<br>cat file1 | command( sed, grep, awk, grep, etc…) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中<br>grep Aug /var/log/messages 在文件 ‘/var/log/messages’中查找关键词”Aug”<br>grep ^Aug /var/log/messages 在文件 ‘/var/log/messages’中查找以”Aug”开始的词汇<br>grep [0-9] /var/log/messages 选择 ‘/var/log/messages’ 文件中所有包含数字的行<br>grep Aug -R /var/log/* 在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug”<br>sed ‘s/stringa1/stringa2/g’ example.txt 将example.txt文件中的 “string1” 替换成 “string2”<br>sed ‘/^KaTeX parse error: Expected ‘EOF’, got ‘#’ at position 49: …所有空白行 sed ‘/ *#̲/d; /^/d’ example.txt 从example.txt文件中删除所有注释和空白行<br>echo ‘esempio’ | tr ‘[:lower:]’ ‘[:upper:]’ 合并上下单元格内容<br>sed -e ‘1d’ result.txt 从文件example.txt 中排除第一行<br>sed -n ‘/stringa1/p’ 查看只包含词汇 “string1”的行<br>sed -e ‘s/ <em>$//‘ example.txt 删除每一行最后的空白字符<br>sed -e ‘s/stringa1//g’ example.txt 从文档中只删除词汇 “string1” 并保留剩余全部<br>sed -n ‘1,5p;5q’ example.txt 查看从第一行到第5行内容<br>sed -n ‘5p;5q’ example.txt 查看第5行<br>sed -e ‘s/00</em>/0/g’ example.txt 用单个零替换多个零<br>cat -n file1 标示文件的行数<br>cat example.txt | awk ‘NR%2==1’ 删除example.txt文件中的所有偶数行<br>echo a b c | awk ‘{print $1}’ 查看一行第一栏<br>echo a b c | awk ‘{print $1,$3}’ 查看一行的第一和第三栏<br>paste file1 file2 合并两个文件或两栏的内容<br>paste -d ‘+’ file1 file2 合并两个文件或两栏的内容，中间用”+”区分<br>sort file1 file2 排序两个文件的内容<br>sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)<br>sort file1 file2 | uniq -u 删除交集，留下其他的行<br>sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)<br>comm -1 file1 file2 比较两个文件的内容只删除 ‘file1’ 所包含的内容<br>comm -2 file1 file2 比较两个文件的内容只删除 ‘file2’ 所包含的内容<br>comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分</p>
<h3 id="字符设置和文件格式转换"><a href="#字符设置和文件格式转换" class="headerlink" title="字符设置和文件格式转换"></a>字符设置和文件格式转换</h3><p>dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX<br>unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS<br>recode …HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html<br>recode -l | more 显示所有允许的转换格式</p>
<h3 id="文件系统分析"><a href="#文件系统分析" class="headerlink" title="文件系统分析"></a>文件系统分析</h3><p>badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块<br>fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性<br>fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br>e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br>e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br>fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br>fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性<br>fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性<br>dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</p>
<h3 id="初始化一个文件系统"><a href="#初始化一个文件系统" class="headerlink" title="初始化一个文件系统"></a>初始化一个文件系统</h3><p>mkfs /dev/hda1 在hda1分区创建一个文件系统<br>mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统<br>mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统<br>mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统<br>fdformat -n /dev/fd0 格式化一个软盘<br>mkswap /dev/hda3 创建一个swap文件系统</p>
<h3 id="SWAP文件系统"><a href="#SWAP文件系统" class="headerlink" title="SWAP文件系统"></a>SWAP文件系统</h3><p>mkswap /dev/hda3 创建一个swap文件系统<br>swapon /dev/hda3 启用一个新的swap文件系统<br>swapon /dev/hda2 /dev/hdb3 启用两个swap分区</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>dump -0aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的完整备份<br>dump -1aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的交互式备份<br>restore -if /tmp/home0.bak 还原一个交互式备份<br>rsync -rogpav –delete /home /tmp 同步两边的目录<br>rsync -rogpav -e ssh –delete /home ip_address:/tmp 通过SSH通道rsync<br>rsync -az -e ssh –delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录<br>rsync -az -e ssh –delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录<br>dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr ‘dd of=hda.gz’ 通过ssh在远程主机上执行一次备份本地磁盘的操作<br>dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件<br>tar -Puf backup.tar /home/user 执行一次对 ‘/home/user’ 目录的交互式备份操作<br>( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr ‘cd /home/share/ &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个目录内容<br>( tar c /home ) | ssh -C user@ip_addr ‘cd /home/backup-home &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个本地目录<br>tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接<br>find /home/user1 -name ‘*.txt’ | xargs cp -av –target-directory=/home/backup/ –parents 从一个目录查找并复制所有以 ‘.txt’ 结尾的文件到另一个目录<br>find /var/log -name ‘*.log’ | tar cv –files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 ‘.log’ 结尾的文件并做成一个bzip包<br>dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作<br>dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容</p>
<h3 id="光盘"><a href="#光盘" class="headerlink" title="光盘"></a>光盘</h3><p>cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容<br>mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件<br>mkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件<br>mkisofs -J -allow-leading-dots -R -V “Label CD” -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件<br>cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件<br>gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件<br>mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件<br>cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中<br>cd-paranoia – “-3” 从一个CD光盘转录音轨到 wav 文件中（参数-3）<br>cdrecord –scanbus 扫描总线以识别scsi通道<br>dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD</p>
<h3 id="网络-（以太网和WIFI无线）"><a href="#网络-（以太网和WIFI无线）" class="headerlink" title="网络 - （以太网和WIFI无线）"></a>网络 - （以太网和WIFI无线）</h3><p>ifconfig eth0 显示一个以太网卡的配置<br>ifup eth0 启用一个 ‘eth0’ 网络设备<br>ifdown eth0 禁用一个 ‘eth0’ 网络设备<br>ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址<br>ifconfig eth0 promisc 设置 ‘eth0’ 成混杂模式以嗅探数据包 (sniffing)<br>dhclient eth0 以dhcp模式启用 ‘eth0’</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习-2</title>
    <url>/2021/02/09/Linux%E5%AD%A6%E4%B9%A0-2/</url>
    <content><![CDATA[<h1 id="Linux-远程登录"><a href="#Linux-远程登录" class="headerlink" title="Linux 远程登录"></a>Linux 远程登录</h1><p>Linux 一般作为服务器使用，而服务器一般放在机房，你不可能在机房操作你的 Linux 服务器。</p>
<p>这时我们就需要远程登录到Linux服务器来管理维护系统。</p>
<p>Linux 系统中是通过 ssh 服务实现的远程登录功能，默认 ssh 服务端口号为 22。</p>
<p>Window 系统上 Linux 远程登录客户端有 SecureCRT, Putty, SSH Secure Shell 等</p>
<h2 id="使用密钥认证机制远程登录linux"><a href="#使用密钥认证机制远程登录linux" class="headerlink" title="使用密钥认证机制远程登录linux"></a>使用密钥认证机制远程登录linux</h2><p>SSH 为 Secure Shell 的缩写，由 IETF 的网络工作小组（Network Working Group）所制定。</p>
<p>SSH 为建立在应用层和传输层基础上的安全协议。</p>
<p>该工具可以生成三种格式的key ：SSH-1(RSA) SSH-2(RSA) SSH-2(DSA) ，我们采用默认的格式即 SSH-2(RSA)。Number of bits in a generated key 这个是指生成的key的大小，这个数值越大，生成的key就越复杂，安全性就越高。</p>
<h3 id="1）创建目录-root-ssh-并设置权限"><a href="#1）创建目录-root-ssh-并设置权限" class="headerlink" title="1）创建目录 /root/.ssh 并设置权限"></a>1）创建目录 /root/.ssh 并设置权限</h3><p>[root@localhost ~]# mkdir /root/.ssh mkdir 命令用来创建目录，以后会详细介绍，暂时只了解即可。</p>
<p>[root@localhost ~]# chmod 700 /root/.ssh chmod 命令是用来修改文件属性权限的，以后会详细介绍。</p>
<h3 id="2）创建文件-root-ssh-authorized-keys"><a href="#2）创建文件-root-ssh-authorized-keys" class="headerlink" title="2）创建文件 / root/.ssh/authorized_keys"></a>2）创建文件 / root/.ssh/authorized_keys</h3><p>[root@localhost ~]# vim /root/.ssh/authorized_keys vim 命令是编辑一个文本文件的命令，同样在后续章节详细介绍。</p>
<h3 id="3）打开刚才生成的public-key-文件"><a href="#3）打开刚才生成的public-key-文件" class="headerlink" title="3）打开刚才生成的public key 文件"></a>3）打开刚才生成的public key 文件</h3><p>建议使用写字板打开，这样看着舒服一些，复制从AAAA开头至 “—- END SSH2 PUBLIC KEY —-“ 该行上的所有内容，粘贴到/root/.ssh/authorized_keys 文件中，要保证所有字符在一行。（可以先把复制的内容拷贝至记事本，然后编辑成一行载粘贴到该文件中）。</p>
<p>在这里要简单介绍一下，如何粘贴，用vim打开那个文件后，该文件不存在，所以vim会自动创建。按一下字母”i”然后同时按shift + Insert 进行粘贴（或者单击鼠标右键即可），前提是已经复制到剪切板中了。粘贴好后，然后把光标移动到该行最前面输入 <strong>ssh-rsa</strong> </p>
<h3 id="4）再设置putty选项，点窗口左侧的SSh-–-gt-Auth"><a href="#4）再设置putty选项，点窗口左侧的SSh-–-gt-Auth" class="headerlink" title="4）再设置putty选项，点窗口左侧的SSh –&gt; Auth"></a>4）再设置putty选项，点窗口左侧的SSh –&gt; Auth</h3><p>单击窗口右侧的Browse… 选择刚刚生成的私钥， 再点Open ，此时输入root，就不用输入密码就能登录了。</p>
<p>如果在前面你设置了Key Passphrase ，那么此时就会提示你输入密码的。为了更加安全建议大家要设置一个Key Passphrase。</p>
<h2 id="终端利用ssh登录远程服务器"><a href="#终端利用ssh登录远程服务器" class="headerlink" title="终端利用ssh登录远程服务器"></a><strong>终端利用ssh登录远程服务器</strong></h2><p>安装ssh：</p>
<pre><code>yum install ssh</code></pre>
<p>启动ssh：</p>
<pre><code>service sshd start</code></pre>
<p>登录远程服务器：</p>
<pre><code>ssh -p 50022 my@127.0.0.1
输入密码：
my@127.0.0.1:</code></pre>
<p><strong>-p</strong> 后面是端口</p>
<p><strong>my</strong> 是服务器用户名</p>
<p><strong>127.0.0.1</strong> 是服务器 ip</p>
<p>回车输入密码即可登录</p>
<h1 id="Linux-文件基本属性"><a href="#Linux-文件基本属性" class="headerlink" title="Linux 文件基本属性"></a>Linux 文件基本属性</h1><p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。</p>
<p>为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>
<p>在 Linux 中我们通常使用以下两个命令来修改文件或目录的所属用户与权限：</p>
<ul>
<li>chown (change ownerp) ： 修改所属用户与组。</li>
<li>chmod (change mode) ： 修改用户的权限。</li>
</ul>
<p>在 Linux 中我们可以使用 <strong>ll</strong> 或者 <strong>ls –l</strong> 命令来显示一个文件的属性以及文件所属的用户和组，如：</p>
<pre><code>[root@www /]# ls -l
total 64
dr-xr-xr-x   2 root root 4096 Dec 14  2012 bin
dr-xr-xr-x   4 root root 4096 Apr 19  2012 boot
……</code></pre>
<p>实例中，<strong>bin</strong> 文件的第一个属性用 <strong>d</strong> 表示。<strong>d</strong> 在 Linux 中代表该文件是一个目录文件。</p>
<p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p>
<ul>
<li>当为 <strong>d</strong> 则是目录</li>
<li>当为 <strong>-</strong> 则是文件；</li>
<li>若是 <strong>l</strong> 则表示为链接文档(link file)；</li>
<li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li>
<li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为 <strong>rwx</strong> 的三个参数的组合。其中， <strong>r</strong> 代表可读(read)、 <strong>w</strong> 代表可写(write)、 <strong>x</strong> 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 <strong>-</strong> 而已。</p>
<p><img src="/2021/02/09/Linux%E5%AD%A6%E4%B9%A0-2/pic-2.png" alt="pic-2"></p>
<p>从左至右用 <strong>0-9</strong> 这些数字来表示。</p>
<p>第 <strong>0</strong> 位确定文件类型，第 <strong>1-3</strong> 位确定属主（该文件的所有者）拥有该文件的权限。</p>
<p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p>
<p>其中，第 <strong>1、4、7</strong> 位表示读权限，如果用 <strong>r</strong> 字符表示，则有读权限，如果用 <strong>-</strong> 字符表示，则没有读权限；</p>
<p>第 <strong>2、5、8</strong> 位表示写权限，如果用 <strong>w</strong> 字符表示，则有写权限，如果用 <strong>-</strong> 字符表示没有写权限；第 <strong>3、6、9</strong> 位表示可执行权限，如果用 <strong>x</strong> 字符表示，则有执行权限，如果用 <strong>-</strong> 字符表示，则没有执行权限。</p>
<h1 id="Linux文件属主和属组"><a href="#Linux文件属主和属组" class="headerlink" title="Linux文件属主和属组"></a>Linux文件属主和属组</h1><pre><code>[root@www /]# ls -l
total 64
drwxr-xr-x 2 root  root  4096 Feb 15 14:46 cron
drwxr-xr-x 3 mysql mysql 4096 Apr 21  2014 mysql
……</code></pre>
<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>
<p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p>
<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>
<p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>
<p>在以上实例中，mysql 文件是一个目录文件，属主和属组都为 mysql，属主有可读、可写、可执行的权限；与属主同组的其他用户有可读和可执行的权限；其他用户也有可读和可执行的权限。</p>
<p>对于 root 用户来说，一般情况下，文件的权限对其不起作用。</p>
<h2 id="更改文件属性"><a href="#更改文件属性" class="headerlink" title="更改文件属性"></a>更改文件属性</h2><h3 id="1、chgrp：更改文件属组"><a href="#1、chgrp：更改文件属组" class="headerlink" title="1、chgrp：更改文件属组"></a>1、chgrp：更改文件属组</h3><p>Linux chgrp（英文全拼：change group）命令用于变更文件或目录的所属群组。</p>
<p>与 chown的掌控以拥有者及所属群组来管理。您可以使用 chgrp 指令去变更文件与目录的所属群组，设置方式采用群组名称或群组识别码皆可。</p>
<p>在 UNIX 系统家族里，文件或目录权限的掌控以拥有者及所属群组来管理。您可以使用 chgrp 指令去变更文件与目录的所属群组，设置方式采用群组名称或群组识别码皆可。</p>
<h4 id="语法1："><a href="#语法1：" class="headerlink" title="语法1："></a>语法1：</h4><pre><code>chgrp [-R] 属组名 文件名</code></pre>
<h4 id="参数选项："><a href="#参数选项：" class="headerlink" title="参数选项："></a>参数选项：</h4><ul>
<li>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</li>
</ul>
<h4 id="语法2："><a href="#语法2：" class="headerlink" title="语法2："></a>语法2：</h4><pre><code>chgrp [-cfhRv][--help][--version][所属群组][文件或目录...] 或 chgrp [-cfhRv][--help][--reference=&lt;参考文件或目录&gt;][--version][文件或目录...]</code></pre>
<h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><p>　　-c或–changes 效果类似”-v”参数，但仅回报更改的部分。</p>
<p>　　-f或–quiet或–silent 　不显示错误信息。</p>
<p>　　-h或–no-dereference 　只对符号连接的文件作修改，而不更动其他任何相关文件。</p>
<p>　　-R或–recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。</p>
<p>　　-v或–verbose 　显示指令执行过程。</p>
<p>　　–help 　在线帮助。</p>
<p>　　–reference=&lt;参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。</p>
<p>　　–version 　显示版本信息。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="实例1：改变文件的群组属性："><a href="#实例1：改变文件的群组属性：" class="headerlink" title="实例1：改变文件的群组属性："></a>实例1：改变文件的群组属性：</h5><pre><code>chgrp -v bin log2012.log</code></pre>
<p>输出：</p>
<pre><code>[root@localhost test]# ll
---xrw-r-- 1 root root 302108 11-13 06:03 log2012.log
[root@localhost test]# chgrp -v bin log2012.log</code></pre>
<p>“log2012.log” 的所属组已更改为 bin</p>
<pre><code>[root@localhost test]# ll
---xrw-r-- 1 root bin  302108 11-13 06:03 log2012.log</code></pre>
<p>说明： 将log2012.log文件由root群组改为bin群组</p>
<h5 id="实例2：根据指定文件改变文件的群组属性"><a href="#实例2：根据指定文件改变文件的群组属性" class="headerlink" title="实例2：根据指定文件改变文件的群组属性"></a>实例2：根据指定文件改变文件的群组属性</h5><pre><code>chgrp --reference=log2012.log log2013.log</code></pre>
<p>输出：</p>
<pre><code>[root@localhost test]# ll
---xrw-r-- 1 root bin  302108 11-13 06:03 log2012.log
-rw-r--r-- 1 root root     61 11-13 06:03 log2013.log
[root@localhost test]#  chgrp --reference=log2012.log log2013.log 
[root@localhost test]# ll
---xrw-r-- 1 root bin  302108 11-13 06:03 log2012.log
-rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log</code></pre>
<p>说明： 改变文件log2013.log 的群组属性，使得文件log2013.log的群组属性和参考文件log2012.log的群组属性相同</p>
<h3 id="2、chown：更改文件属主，也可以同时更改文件属组"><a href="#2、chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="2、chown：更改文件属主，也可以同时更改文件属组"></a>2、chown：更改文件属主，也可以同时更改文件属组</h3><p>Linux chown（英文全拼：<strong>change owner</strong>）命令用于设置文件所有者和文件关联组的命令。</p>
<p>Linux/Unix 是多人多工操作系统，所有的文件皆有拥有者。利用 chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID，组可以是组名或者组 ID，文件是以空格分开的要改变权限的文件列表，支持通配符。 </p>
<p>只有超级用户和属于组的文件所有者才能变更文件关联组。非超级用户如需要设置关联组可能需要使用 chgrp 命令。</p>
<h4 id="语法1：-1"><a href="#语法1：-1" class="headerlink" title="语法1："></a>语法1：</h4><pre><code>chown [–R] 属主名 文件名
chown [-R] 属主名：属组名 文件名</code></pre>
<h4 id="语法2：-1"><a href="#语法2：-1" class="headerlink" title="语法2："></a>语法2：</h4><pre><code>chown [-cfhvR] [--help] [--version] user[:group] file...</code></pre>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数 :"></a><strong>参数</strong> :</h4><ul>
<li>user : 新的文件拥有者的使用者 ID</li>
<li>group : 新的文件拥有者的使用者组(group)</li>
<li>-c : 显示更改的部分的信息</li>
<li>-f : 忽略错误信息</li>
<li>-h :修复符号链接</li>
<li>-v : 显示详细的处理信息</li>
<li>-R : 处理指定目录以及其子目录下的所有文件</li>
<li>–help : 显示辅助说明</li>
<li>–version : 显示版本</li>
</ul>
<h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><p>把 /var/run/httpd.pid 的所有者设置 root：</p>
<pre><code>chown root /var/run/httpd.pid</code></pre>
<p>将文件 file1.txt 的拥有者设为 runoob，群体的使用者 runoobgroup :</p>
<pre><code>chown runoob:runoobgroup file1.txt</code></pre>
<p>将当前前目录下的所有文件与子目录的拥有者皆设为 runoob，群体的使用者 runoobgroup:</p>
<pre><code>chown -R runoob:runoobgroup *</code></pre>
<p>把 /home/runoob 的关联组设置为 512 （关联组ID），不改变所有者：</p>
<pre><code>chown :512 /home/runoob</code></pre>
<p>进入 /root 目录（~）将install.log的拥有者改为bin这个账号：</p>
<pre><code>[root@www ~] cd ~
[root@www ~]# chown bin install.log
[root@www ~]# ls -l
-rw-r--r--  1 bin  users 68495 Jun 25 08:53 install.log</code></pre>
<p>将install.log的拥有者与群组改回为root：</p>
<pre><code>[root@www ~]# chown root:root install.log
[root@www ~]# ls -l
-rw-r--r--  1 root root 68495 Jun 25 08:53 install.log</code></pre>
<h3 id="3、chmod：更改文件9个属性"><a href="#3、chmod：更改文件9个属性" class="headerlink" title="3、chmod：更改文件9个属性"></a>3、chmod：更改文件9个属性</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><pre><code>chmod [-cfvR] [--help] [--version] mode file...</code></pre>
<h4 id="参数说明：-1"><a href="#参数说明：-1" class="headerlink" title="参数说明："></a>参数说明：</h4><p>mode : 权限设定字串，格式如下 :</p>
<pre><code>[ugoa...][[+-=][rwxX]...][,...]</code></pre>
<h4 id="其中："><a href="#其中：" class="headerlink" title="其中："></a>其中：</h4><ul>
<li>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</li>
<li>+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。</li>
<li>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</li>
</ul>
<h4 id="其他参数说明："><a href="#其他参数说明：" class="headerlink" title="其他参数说明："></a>其他参数说明：</h4><ul>
<li>-c : 若该文件权限确实已经更改，才显示其更改动作</li>
<li>-f : 若该文件权限无法被更改也不要显示错误讯息</li>
<li>-v : 显示权限变更的详细资料</li>
<li>-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递归的方式逐个变更)</li>
<li>–help : 显示辅助说明</li>
<li>–version : 显示版本</li>
</ul>
<h4 id="符号模式"><a href="#符号模式" class="headerlink" title="符号模式"></a>符号模式</h4><p>使用符号模式可以设置多个项目：who（用户类型），operator（操作符）和 permission（权限），每个项目的设置可以用逗号隔开。 命令 chmod 将修改 who 指定的用户类型对文件的访问权限，用户类型由一个或者多个字母在 who 的位置来说明，如 who 的符号模式表所示:</p>
<table>
<thead>
<tr>
<th align="left">who</th>
<th align="left">用户类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>u</code></td>
<td align="left">user</td>
<td align="left">文件所有者</td>
</tr>
<tr>
<td align="left"><code>g</code></td>
<td align="left">group</td>
<td align="left">文件所有者所在组</td>
</tr>
<tr>
<td align="left"><code>o</code></td>
<td align="left">others</td>
<td align="left">所有其他用户</td>
</tr>
<tr>
<td align="left"><code>a</code></td>
<td align="left">all</td>
<td align="left">所用用户, 相当于 <em>ugo</em></td>
</tr>
</tbody></table>
<h5 id="operator-的符号模式表"><a href="#operator-的符号模式表" class="headerlink" title="operator 的符号模式表:"></a>operator 的符号模式表:</h5><table>
<thead>
<tr>
<th align="left">Operator</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>+</code></td>
<td align="left">为指定的用户类型增加权限</td>
</tr>
<tr>
<td align="left"><code>-</code></td>
<td align="left">去除指定用户类型的权限</td>
</tr>
<tr>
<td align="left"><code>=</code></td>
<td align="left">设置指定用户权限的设置，即将用户类型的所有权限重新设置</td>
</tr>
</tbody></table>
<h5 id="permission-的符号模式表"><a href="#permission-的符号模式表" class="headerlink" title="permission 的符号模式表:"></a>permission 的符号模式表:</h5><table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">名字</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>r</code></td>
<td align="left">读</td>
<td align="left">设置为可读权限</td>
</tr>
<tr>
<td align="left"><code>w</code></td>
<td align="left">写</td>
<td align="left">设置为可写权限</td>
</tr>
<tr>
<td align="left"><code>x</code></td>
<td align="left">执行权限</td>
<td align="left">设置为可执行权限</td>
</tr>
<tr>
<td align="left"><code>X</code></td>
<td align="left">特殊执行权限</td>
<td align="left">只有当文件为目录文件，或者其他类型的用户有可执行权限时，才将文件权限设置可执行</td>
</tr>
<tr>
<td align="left"><code>s</code></td>
<td align="left">setuid/gid</td>
<td align="left">当文件被执行时，根据who参数指定的用户类型设置文件的setuid或者setgid权限</td>
</tr>
<tr>
<td align="left"><code>t</code></td>
<td align="left">粘贴位</td>
<td align="left">设置粘贴位，只有超级用户可以设置该位，只有文件所有者u可以使用该位</td>
</tr>
</tbody></table>
<h4 id="八进制语法"><a href="#八进制语法" class="headerlink" title="八进制语法"></a>八进制语法</h4><p>chmod命令可以使用八进制数来指定权限。文件或目录的权限位是由9个权限位来控制，每三位为一组，它们分别是文件所有者（User）的读、写、执行，用户组（Group）的读、写、执行以及其它用户（Other）的读、写、执行。历史上，文件权限被放在一个比特掩码中，掩码中指定的比特位设为1，用来说明一个类具有相应的优先级。</p>
<table>
<thead>
<tr>
<th align="left">#</th>
<th align="left">权限</th>
<th align="left">rwx</th>
<th align="left">二进制</th>
</tr>
</thead>
<tbody><tr>
<td align="left">7</td>
<td align="left">读 + 写 + 执行</td>
<td align="left">rwx</td>
<td align="left">111</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">读 + 写</td>
<td align="left">rw-</td>
<td align="left">110</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">读 + 执行</td>
<td align="left">r-x</td>
<td align="left">101</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">只读</td>
<td align="left">r–</td>
<td align="left">100</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">写 + 执行</td>
<td align="left">-wx</td>
<td align="left">011</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">只写</td>
<td align="left">-w-</td>
<td align="left">010</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">只执行</td>
<td align="left">–x</td>
<td align="left">001</td>
</tr>
<tr>
<td align="left">0</td>
<td align="left">无</td>
<td align="left">—</td>
<td align="left">000</td>
</tr>
</tbody></table>
<p>例如， 765 将这样解释：</p>
<ul>
<li>所有者的权限用数字表达：属主的那三个权限位的数字加起来的总和。如 rwx ，也就是 4+2+1 ，应该是 7。</li>
<li>用户组的权限用数字表达：属组的那个权限位数字的相加的总和。如 rw- ，也就是 4+2+0 ，应该是 6。</li>
<li>其它用户的权限数字表达：其它用户权限位的数字相加的总和。如 r-x ，也就是 4+0+1 ，应该是 5。</li>
</ul>
<h4 id="实例：-1"><a href="#实例：-1" class="headerlink" title="实例："></a>实例：</h4><p>将文件 file1.txt 设为所有人皆可读取 :</p>
<pre><code>chmod ugo+r file1.txt</code></pre>
<p>将文件 file1.txt 设为所有人皆可读取 :</p>
<pre><code>chmod a+r file1.txt</code></pre>
<p>将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :</p>
<pre><code>chmod ug+w,o-w file1.txt file2.txt</code></pre>
<p>将 ex1.py 设定为只有该文件拥有者可以执行 :</p>
<pre><code>chmod u+x ex1.py</code></pre>
<p>将目前目录下的所有文件与子目录皆设为任何人可读取 :</p>
<pre><code>chmod -R a+r *</code></pre>
<p>此外chmod也可以用数字来表示权限如 :</p>
<pre><code>chmod 777 file</code></pre>
<p>语法为：</p>
<pre><code>chmod abc file</code></pre>
<p>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。</p>
<p>r=4，w=2，x=1</p>
<ul>
<li>若要 rwx 属性则 4+2+1=7；</li>
<li>若要 rw- 属性则 4+2=6；</li>
<li>若要 r-x 属性则 4+1=5。</li>
</ul>
<pre><code>chmod a=rwx file</code></pre>
<p>和</p>
<pre><code>chmod 777 file</code></pre>
<p>效果相同</p>
<pre><code>chmod ug=rwx,o=x file</code></pre>
<p>和</p>
<pre><code>chmod 771 file</code></pre>
<p>效果相同</p>
<p>若用 <strong>chmod 4755 filename</strong> 可使此程序具有 root 的权限。</p>
<h4 id="更多说明"><a href="#更多说明" class="headerlink" title="更多说明"></a>更多说明</h4><table>
<thead>
<tr>
<th align="left"><code>命令</code></th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>chmod a+r *file*</code></td>
<td align="left">给file的所有用户增加读权限</td>
</tr>
<tr>
<td align="left"><code>chmod a-x *file*</code></td>
<td align="left">删除file的所有用户的执行权限</td>
</tr>
<tr>
<td align="left"><code>chmod a+rw *file*</code></td>
<td align="left">给file的所有用户增加读写权限</td>
</tr>
<tr>
<td align="left"><code>chmod +rwx *file*</code></td>
<td align="left">给file的所有用户增加读写执行权限</td>
</tr>
<tr>
<td align="left"><code>chmod u=rw,go= *file*</code></td>
<td align="left">对file的所有者设置读写权限，清空该用户组和其他用户对file的所有权限（空格代表无权限）</td>
</tr>
<tr>
<td align="left"><code>chmod -R u+r,go-r *docs*</code></td>
<td align="left">对目录docs和其子目录层次结构中的所有文件给用户增加读权限，而对用户组和其他用户删除读权限</td>
</tr>
<tr>
<td align="left"><code>chmod 664 *file*</code></td>
<td align="left">对file的所有者和用户组设置读写权限, 为其其他用户设置读权限</td>
</tr>
<tr>
<td align="left"><code>chmod 0755 *file*</code></td>
<td align="left">相当于<code>u=rwx (4+2+1),go=rx (4+1 &amp; 4+1)</code>。<code>0</code> 没有特殊模式。</td>
</tr>
<tr>
<td align="left"><code>chmod 4755 *file*</code></td>
<td align="left"><code>4</code>设置了设置<a href="https://www.runoob.com/wiki/%E7%94%A8%E6%88%B7ID">用户ID</a>位，剩下的相当于 u=rwx (4+2+1),go=rx (4+1 &amp; 4+1)。</td>
</tr>
<tr>
<td align="left"><code>find path/ -type d -exec chmod a-x &#123;&#125; \;</code></td>
<td align="left">删除可执行权限对path/以及其所有的目录（不包括文件）的所有用户，使用’-type f’匹配文件</td>
</tr>
<tr>
<td align="left"><code>find path/ -type d -exec chmod a+x &#123;&#125; \;</code></td>
<td align="left">允许所有用户浏览或通过目录path/</td>
</tr>
</tbody></table>
<p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p>
<p>Linux 文件的基本权限就有九个，分别是 <strong>owner/group/others(拥有者/组/其他)</strong> 三种身份各有自己的 <strong>read/write/execute</strong> 权限。</p>
<p>先复习一下刚刚上面提到的数据：文件的权限字符为： <strong>-rwxrwxrwx</strong> ， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>
<ul>
<li>r:4</li>
<li>w:2</li>
<li>x:1</li>
</ul>
<p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： <strong>-rwxrwx—</strong> 分数则是：</p>
<ul>
<li>owner = rwx = 4+2+1 = 7</li>
<li>group = rwx = 4+2+1 = 7</li>
<li>others= — = 0+0+0 = 0</li>
</ul>
<p>所以等一下我们设定权限的变更时，该文件的权限数字就是 <strong>770</strong>。变更权限的指令 chmod 的语法是这样的：</p>
<pre><code> chmod [-R] xyz 文件或目录</code></pre>
<p>选项与参数：</p>
<ul>
<li>xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。</li>
<li>-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更</li>
</ul>
<p>举例来说，如果要将 .bashrc 这个文件所有的权限都设定启用，那么命令如下：</p>
<pre><code>[root@www ~]# ls -al .bashrc
-rw-r--r--  1 root root 395 Jul  4 11:45 .bashrc
[root@www ~]# chmod 777 .bashrc
[root@www ~]# ls -al .bashrc
-rwxrwxrwx  1 root root 395 Jul  4 11:45 .bashrc</code></pre>
<p>那如果要将权限变成 <em>-rwxr-xr–</em> 呢？那么权限的分数就成为 [4+2+1][4+0+1][4+0+0]=754。</p>
<h4 id="符号类型改变文件权限"><a href="#符号类型改变文件权限" class="headerlink" title="符号类型改变文件权限"></a>符号类型改变文件权限</h4><p>还有一个改变权限的方法，从之前的介绍中我们可以发现，基本上就九个权限分别是：</p>
<ul>
<li>user：用户</li>
<li>group：组</li>
<li>others：其他</li>
</ul>
<p>那么我们就可以使用 <strong>u, g, o</strong> 来代表三种身份的权限。</p>
<p>此外， <strong>a</strong> 则代表 <strong>all</strong>，即全部的身份。读写的权限可以写成 <strong>r, w, x</strong>，也就是可以使用下表的方式来看：</p>
<table>
<thead>
<tr>
<th>chmod</th>
<th>u g o a</th>
<th>+(加入) -(除去) =(设定)</th>
<th>r w x</th>
<th>文件或目录</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>如果我们需要将文件权限设置为 <strong>-rwxr-xr–</strong> ，可以使用 <strong>chmod u=rwx,g=rx,o=r 文件名</strong> 来设定:</p>
<pre><code>#  touch test1    // 创建 test1 文件
# ls -al test1    // 查看 test1 默认权限
-rw-r--r-- 1 root root 0 Nov 15 10:32 test1
# chmod u=rwx,g=rx,o=r  test1    // 修改 test1 权限
# ls -al test1
-rwxr-xr-- 1 root root 0 Nov 15 10:32 test1</code></pre>
<p>而如果是要将权限去掉而不改变其他已存在的权限呢？例如要拿掉全部人的可执行权限，则：</p>
<pre><code>#  chmod  a-x test1
# ls -al test1
-rw-r--r-- 1 root root 0 Nov 15 10:32 test1</code></pre>
<h1 id="Linux-文件与目录管理"><a href="#Linux-文件与目录管理" class="headerlink" title="Linux 文件与目录管理"></a>Linux 文件与目录管理</h1><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。</p>
<p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p>
<p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p>
<ul>
<li><p><strong>绝对路径：</strong><br>路径的写法，由根目录 <strong>/</strong> 写起，例如： /usr/share/doc 这个目录。</p>
</li>
<li><p><strong>相对路径：</strong><br>路径的写法，不是由 <strong>/</strong> 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： <strong>cd ../man</strong> 这就是相对路径的写法。</p>
</li>
</ul>
<hr>
<h2 id="处理目录的常用命令"><a href="#处理目录的常用命令" class="headerlink" title="处理目录的常用命令"></a>处理目录的常用命令</h2><p>接下来我们就来看几个常见的处理目录的命令吧：</p>
<ul>
<li>ls（英文全拼：list files）: 列出目录及文件名</li>
<li>cd（英文全拼：change directory）：切换目录</li>
<li>pwd（英文全拼：print work directory）：显示目前的目录</li>
<li>mkdir（英文全拼：make directory）：创建一个新的目录</li>
<li>rmdir（英文全拼：remove directory）：删除一个空的目录</li>
<li>cp（英文全拼：copy file）: 复制文件或目录</li>
<li>rm（英文全拼：remove）: 删除文件或目录</li>
<li>mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称</li>
</ul>
<p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p>
<h3 id="ls-列出目录"><a href="#ls-列出目录" class="headerlink" title="ls (列出目录)"></a>ls (列出目录)</h3><p>在Linux系统当中， ls 命令可能是最常被运行的。</p>
<p>语法：</p>
<pre><code>[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称
[root@www ~]# ls [--color=&#123;never,auto,always&#125;] 目录名称
[root@www ~]# ls [--full-time] 目录名称</code></pre>
<p>选项与参数：</p>
<ul>
<li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li>
<li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li>
<li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>
</ul>
<p>将家目录下的所有文件列出来(含属性与隐藏档)</p>
<pre><code>[root@www ~]# ls -al ~</code></pre>
<h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd (切换目录)"></a>cd (切换目录)</h3><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p>
<p>语法：</p>
<pre><code> cd [相对路径或绝对路径]
#使用 mkdir 命令创建 runoob 目录
[root@www ~]# mkdir runoob

#使用绝对路径切换到 runoob 目录
[root@www ~]# cd /root/runoob/

#使用相对路径切换到 runoob 目录
[root@www ~]# cd ./runoob/

# 表示回到自己的家目录，亦即是 /root 这个目录
[root@www runoob]# cd ~

# 表示去到目前的上一级目录，亦即是 /root 的上一级目录的意思；
[root@www ~]# cd ..</code></pre>
<p>接下来大家多操作几次应该就可以很好的理解 cd 命令的。</p>
<h3 id="pwd-显示目前所在的目录"><a href="#pwd-显示目前所在的目录" class="headerlink" title="pwd (显示目前所在的目录)"></a>pwd (显示目前所在的目录)</h3><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p>
<pre><code>[root@www ~]# pwd [-P]</code></pre>
<p>选项与参数：</p>
<ul>
<li><strong>-P</strong> ：显示出确实的路径，而非使用连结 (link) 路径。</li>
</ul>
<p>实例：单纯显示出目前的工作目录：</p>
<pre><code>[root@www ~]# pwd
/root   &lt;== 显示出目录啦～</code></pre>
<p>实例显示出实际的工作目录，而非连结档本身的目录名而已。</p>
<pre><code>[root@www ~]# cd /var/mail   &lt;==注意，/var/mail是一个连结档
[root@www mail]# pwd
/var/mail         &lt;==列出目前的工作目录
[root@www mail]# pwd -P
/var/spool/mail   &lt;==怎么回事？有没有加 -P 差很多～
[root@www mail]# ls -ld /var/mail
lrwxrwxrwx 1 root root 10 Sep  4 17:54 /var/mail -&gt; spool/mail
# 看到这里应该知道为啥了吧？因为 /var/mail 是连结档，连结到 /var/spool/mail 
# 所以，加上 pwd -P 的选项后，会不以连结档的数据显示，而是显示正确的完整路径啊！</code></pre>
<h3 id="mkdir-创建新目录"><a href="#mkdir-创建新目录" class="headerlink" title="mkdir (创建新目录)"></a>mkdir (创建新目录)</h3><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p>
<p>语法：</p>
<pre><code>mkdir [-mp] 目录名称</code></pre>
<p>选项与参数：</p>
<ul>
<li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>
<li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li>
</ul>
<p>实例：请到/tmp底下尝试创建数个新目录看看：</p>
<pre><code>[root@www ~]# cd /tmp
[root@www tmp]# mkdir test    &lt;==创建一名为 test 的新目录
[root@www tmp]# mkdir test1/test2/test3/test4
mkdir: cannot create directory `test1/test2/test3/test4&#39;: 
No such file or directory       &lt;== 没办法直接创建此目录啊！
[root@www tmp]# mkdir -p test1/test2/test3/test4</code></pre>
<p>加了这个 -p 的选项，可以自行帮你创建多层目录！</p>
<p>实例：创建权限为 <strong>rwx–x–x</strong> 的目录。</p>
<pre><code>[root@www tmp]# mkdir -m 711 test2
[root@www tmp]# ls -l
drwxr-xr-x  3 root  root 4096 Jul 18 12:50 test
drwxr-xr-x  3 root  root 4096 Jul 18 12:53 test1
drwx--x--x  2 root  root 4096 Jul 18 12:54 test2</code></pre>
<p>上面的权限部分，如果没有加上 -m 来强制配置属性，系统会使用默认属性。</p>
<p>如果我们使用 -m ，如上例我们给予 -m 711 来给予新的目录 drwx–x–x 的权限。</p>
<h3 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir (删除空的目录)"></a>rmdir (删除空的目录)</h3><p>语法：</p>
<pre><code> rmdir [-p] 目录名称</code></pre>
<p>选项与参数：</p>
<ul>
<li><strong>-p ：</strong>连同上一级『空的』目录也一起删除</li>
</ul>
<p>删除 runoob 目录</p>
<pre><code>[root@www tmp]# rmdir runoob/</code></pre>
<p>将 mkdir 实例中创建的目录(/tmp 底下)删除掉！</p>
<pre><code>[root@www tmp]# ls -l   &lt;==看看有多少目录存在？
drwxr-xr-x  3 root  root 4096 Jul 18 12:50 test
drwxr-xr-x  3 root  root 4096 Jul 18 12:53 test1
drwx--x--x  2 root  root 4096 Jul 18 12:54 test2
[root@www tmp]# rmdir test   &lt;==可直接删除掉，没问题
[root@www tmp]# rmdir test1  &lt;==因为尚有内容，所以无法删除！
rmdir: `test1&#39;: Directory not empty
[root@www tmp]# rmdir -p test1/test2/test3/test4
[root@www tmp]# ls -l        &lt;==您看看，底下的输出中test与test1不见了！
drwx--x--x  2 root  root 4096 Jul 18 12:54 test2</code></pre>
<p>利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 一次删除。</p>
<p>不过要注意的是，这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录。</p>
<h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp (复制文件或目录)"></a>cp (复制文件或目录)</h3><p>cp 即拷贝文件和目录。</p>
<p>语法:</p>
<pre><code>[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)
[root@www ~]# cp [options] source1 source2 source3 .... directory</code></pre>
<p>选项与参数：</p>
<ul>
<li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li>
<li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li>
<li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>
<li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>
<li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身；</li>
<li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li>
<li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li>
<li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li>
<li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li>
</ul>
<p>用 root 身份，将 root 目录下的 .bashrc 复制到 /tmp 下，并命名为 bashrc</p>
<pre><code>[root@www ~]# cp ~/.bashrc /tmp/bashrc
[root@www ~]# cp -i ~/.bashrc /tmp/bashrc
cp: overwrite `/tmp/bashrc&#39;? n  &lt;==n不覆盖，y为覆盖</code></pre>
<h3 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm (移除文件或目录)"></a>rm (移除文件或目录)</h3><p>语法：</p>
<pre><code> rm [-fir] 文件或目录</code></pre>
<p>选项与参数：</p>
<ul>
<li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>
<li>-i ：互动模式，在删除前会询问使用者是否动作</li>
<li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>
<li></li>
</ul>
<p>将刚刚在 cp 的实例中创建的 bashrc 删除掉！</p>
<pre><code>[root@www tmp]# rm -i bashrc
rm: remove regular file `bashrc&#39;? y</code></pre>
<p>如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</p>
<h3 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv (移动文件与目录，或修改名称)"></a>mv (移动文件与目录，或修改名称)</h3><p>语法：</p>
<pre><code>[root@www ~]# mv [-fiu] source destination
[root@www ~]# mv [options] source1 source2 source3 .... directory</code></pre>
<p>选项与参数：</p>
<ul>
<li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>
<li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>
<li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li>
</ul>
<p>复制一文件，创建一目录，将文件移动到目录中</p>
<pre><code>[root@www ~]# cd /tmp
[root@www tmp]# cp ~/.bashrc bashrc
[root@www tmp]# mkdir mvtest
[root@www tmp]# mv bashrc mvtest</code></pre>
<p>将某个文件移动到某个目录去，就是这样做！</p>
<p>将刚刚的目录名称更名为 mvtest2</p>
<pre><code>[root@www tmp]# mv mvtest mvtest2</code></pre>
<h2 id="Linux-文件内容查看"><a href="#Linux-文件内容查看" class="headerlink" title="Linux 文件内容查看"></a>Linux 文件内容查看</h2><p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul>
<li>cat 由第一行开始显示文件内容</li>
<li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>
<li>nl  显示的时候，顺道输出行号！</li>
<li>more 一页一页的显示文件内容</li>
<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li>
<li>head 只看头几行</li>
<li>tail 只看尾巴几行</li>
</ul>
<p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>由第一行开始显示文件内容</p>
<p>语法：</p>
<pre><code>cat [-AbEnTv]</code></pre>
<p>选项与参数：</p>
<ul>
<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>
<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>
<li>-E ：将结尾的断行字节 $ 显示出来；</li>
<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>
<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>
<li>-v ：列出一些看不出来的特殊字符</li>
</ul>
<p>检看 /etc/issue 这个文件的内容：</p>
<pre><code>[root@www ~]# cat /etc/issue
CentOS release 6.4 (Final)
Kernel \r on an \m</code></pre>
<h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p>
<pre><code>[root@www ~]# tac /etc/issue

Kernel \r on an \m
CentOS release 6.4 (Final)</code></pre>
<h3 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h3><p>显示行号</p>
<p>语法：</p>
<pre><code>nl [-bnw] 文件</code></pre>
<p>选项与参数：</p>
<ul>
<li>-b ：指定行号指定的方式，主要有两种：<br>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li>
<li>-n ：列出行号表示的方法，主要有三种：<br>-n ln ：行号在荧幕的最左方显示；<br>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>
<li>-w ：行号栏位的占用的位数。</li>
</ul>
<p>实例一：用 nl 列出 /etc/issue 的内容</p>
<pre><code>[root@www ~]# nl /etc/issue
     1  CentOS release 6.4 (Final)
     2  Kernel \r on an \m</code></pre>
<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>一页一页翻动</p>
<pre><code>[root@www ~]# more /etc/man_db.config 
#
# Generated automatically from man.conf.in by the
# configure script.
#
# man.conf from man-1.6d
....(中间省略)....
--More--(28%)  &lt;== </code></pre>
<p>在 more 这个程序的运行过程中：</p>
<ul>
<li>空白键 (space)：代表向下翻一页；</li>
<li>Enter     ：代表向下翻『一行』；</li>
<li>/字串     ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>
<li>:f      ：立刻显示出档名以及目前显示的行数；</li>
<li>q       ：代表立刻离开 more ，不再显示该文件内容。</li>
<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>
</ul>
<h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>一页一页翻动，以下实例输出/etc/man.config文件的内容：</p>
<pre><code>[root@www ~]# less /etc/man.config
#
# Generated automatically from man.conf.in by the
# configure script.
#
# man.conf from man-1.6d
....(中间省略)....
:   &lt;== 这里可以等待你输入命令！</code></pre>
<p>less运行时可以输入的命令有：</p>
<ul>
<li>空白键  ：向下翻动一页；</li>
<li>[pagedown]：向下翻动一页；</li>
<li>[pageup] ：向上翻动一页；</li>
<li>/字串   ：向下搜寻『字串』的功能；</li>
<li>?字串   ：向上搜寻『字串』的功能；</li>
<li>n     ：重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>N     ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>q     ：离开 less 这个程序；</li>
</ul>
<h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>取出文件前面几行</p>
<p>语法：</p>
<pre><code>head [-n number] 文件 </code></pre>
<p>选项与参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行的意思</li>
</ul>
<pre><code>[root@www ~]# head /etc/man.config</code></pre>
<p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p>
<pre><code>[root@www ~]# head -n 20 /etc/man.config</code></pre>
<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>取出文件后面几行</p>
<p>语法：</p>
<pre><code>tail [-n number] 文件 </code></pre>
<p>选项与参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行的意思</li>
<li>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</li>
</ul>
<pre><code>[root@www ~]# tail /etc/man.config
# 默认的情况中，显示最后的十行！若要显示最后的 20 行，就得要这样：
[root@www ~]# tail -n 20 /etc/man.config</code></pre>
<h2 id="Linux-链接概念"><a href="#Linux-链接概念" class="headerlink" title="Linux 链接概念"></a>Linux 链接概念</h2><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，<strong>ln</strong> 命令产生硬链接。</p>
<h3 id="硬连接"><a href="#硬连接" class="headerlink" title="硬连接"></a><strong>硬连接</strong></h3><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p>
<p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>
<h3 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a><strong>软连接</strong></h3><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p>
<h3 id="可以得到以下全部结论："><a href="#可以得到以下全部结论：" class="headerlink" title="可以得到以下全部结论："></a>可以得到以下全部结论：</h3><p>1).删除符号连接f3,对f1,f2无影响</p>
<p>2).删除硬连接f2，对f1,f3也无影响</p>
<p>3).删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效</p>
<p> 4).同时删除原文件f1,硬连接f2，整个文件会真正的被删除</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux学习</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习-2</title>
    <url>/2021/01/20/c++%E5%AD%A6%E4%B9%A0-2/</url>
    <content><![CDATA[<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p><strong>1.c++面向对象的三大特性：封装、继承、多态</strong></p>
<p><strong>2.c++认为万物皆可对象，对象上有其属性和行为</strong></p>
<p><strong>3.具有相同性质的对象，我们可以抽象称为类</strong></p>
<h3 id="4-封装"><a href="#4-封装" class="headerlink" title="4.封装"></a>4.封装</h3><h4 id="（1）意义："><a href="#（1）意义：" class="headerlink" title="（1）意义："></a>（1）意义：</h4><ul>
<li><p>将属性和行为作为一个整体，表现生活中的事物</p>
<p>在设计类的时候，属性和行为写在一起</p>
<pre><code>class 类名&#123; 访问权限: 属性 / 行为 &#125;;
//属性使用变量表示
//行为一般用函数表示</code></pre>
<p>在类的概念下，具体的一个物体（整体），称作对象。【类似结构体】</p>
</li>
<li><p>将属性和行为加以权限控制</p>
<p>访问权限有三种：</p>
<p>1.public（公共权限）：类内可以访问，类外可以访问</p>
<p>2.protected（保护权限)：类内可以访问，类外不可以访问，子类可以访问</p>
<p>3.private（私有权限）：类内可以访问，类外不可以访问，子类不可以访问</p>
</li>
</ul>
<h4 id="（2）struct和class区别（默认访问权限不同）"><a href="#（2）struct和class区别（默认访问权限不同）" class="headerlink" title="（2）struct和class区别（默认访问权限不同）"></a>（2）struct和class区别（默认访问权限不同）</h4><ul>
<li>struct默认权限为公共，可以定义成员函数</li>
<li>class默认权限为私有</li>
</ul>
<h4 id="（3）成员属性设置为私有"><a href="#（3）成员属性设置为私有" class="headerlink" title="（3）成员属性设置为私有"></a>（3）成员属性设置为私有</h4><p>优点1：将所有成员属性设置为私有，可以自己控制读写权限【通过设置公有权限下函数控制读写权限】</p>
<p>优点2：对于写权限，我们可以检测数据的有效性</p>
<h4 id="（4）对象的初始化和清理"><a href="#（4）对象的初始化和清理" class="headerlink" title="（4）对象的初始化和清理"></a>（4）对象的初始化和清理</h4><p>C++中的面向对象来源于生活，每个对象也都会有初始设置以及对象销毁前的清理数据的设置。</p>
<p>对象的初始化和清理也是两个非常重要的安全问题，一个对象或者变量没有初始状态，对其使用后果是未知。同样的使用完一个对象或变量,没有及时清理，也会造成一定的安全问题。</p>
<p>C++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构,编译器会提供。</p>
<p>编译器提供的构造函数和析构函数是空实现。</p>
<h5 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1.构造函数:"></a>1.构造函数:</h5><p>主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</p>
<p>默认情况下，c++一般给一个类添加三个函数：默认构造函数，默认析构函数，默认拷贝构造函数</p>
<p><strong>语法:</strong></p>
<pre><code>类名()&#123;函数体&#125;</code></pre>
<ul>
<li>构造函数，没有返回值也不写void</li>
<li>函数名称与类名相同</li>
<li>构造函数可以有参数，因此可以发生重载</li>
<li>程序在调用对象时候会自动调用构造，无须手动调用，,而且只会调用一次</li>
</ul>
<p><strong>构造函数的分类及调用：</strong></p>
<p>1.两种分类方式：</p>
<ul>
<li><p>按参数分：有参构造和无参构造（又称默认构造参数）</p>
</li>
<li><p>按类型分：</p>
<p>普通构造</p>
<p>拷贝构造（将其他对象的属性作为默认值拷贝过来）</p>
<pre><code>类名（const 类名 &amp;对象名）&#123;函数体&#125;</code></pre>
<p>c++中拷贝构造函数调用时机通常有三种情况：</p>
<ol>
<li>使用一个已经创建完毕的对象来初始化新对象</li>
<li>值传递的方式给函数参数传值</li>
<li>以值方式返回局部对象</li>
</ol>
</li>
</ul>
<p>2.三种调用方式：</p>
<ul>
<li><p><strong>括号法</strong>：通过有无括号和参数个数调用对应的构造函数，无括号调用默认构造函数</p>
</li>
<li><p><strong>显示法：</strong>通过“=”号调用对应构造函数，左侧是“类名 对象名”，右侧带入具体内容，无左侧内容和“=”号的，为匿名对象，特点是当前行执行结束后，系统会立刻回收掉匿名对象</p>
<p>*<strong>不要利用拷贝构造函数，初始化匿名对象！</strong>编译器会认为是重定义</p>
</li>
<li><p><strong>隐式转换法：</strong>隐藏掉显示法”=“右侧的类名和括号，是显示法的简化写法</p>
</li>
</ul>
<p>3.调用规则</p>
<ul>
<li>用户定义有参构造函数，c++ 不提供无参构造，但会提供默认拷贝构造</li>
<li>用户定义拷贝构造函数，c++不提供其他构造函数</li>
</ul>
<p>4.深浅拷贝</p>
<ul>
<li><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>
<p>【使用new在堆区开辟新空间（一般变量在栈上），并返回一段空间的首地址，一般用指针接收，需要手动在析构函数中用“delete”释放这一段空间，并且将指针变为空指针（指向NULL），如果用浅拷贝就会直接拷贝地址，从而发生重复释放，这时需要用深拷贝模仿操作开辟一个新空间】</p>
<p><img src="/2021/01/20/c++%E5%AD%A6%E4%B9%A0-2/pic-2.png" alt="pic-2"></p>
</li>
<li><p>浅拷贝：简单的赋值拷贝操作</p>
</li>
</ul>
<h5 id="2-析构函数"><a href="#2-析构函数" class="headerlink" title="2.析构函数:"></a>2.析构函数:</h5><p>主要作用在于对象销毁前系统自动调用，执行一些清理工作。</p>
<p>语法:</p>
<pre><code>~类名()&#123;函数体&#125;</code></pre>
<ul>
<li>没有返回值也不写void</li>
<li>函数名称与类名相同,在名称前加上符号~</li>
<li>析构函数不可以有参数,因此不可以发生重载</li>
<li>程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次</li>
</ul>
<p><strong>3.初始化列表</strong>——初始化属性</p>
<p>语法：</p>
<pre><code>构造函数（）:属性1（值1），属性2（值2）……&#123;构造函数的函数体&#125;</code></pre>
<h4 id="（5）类对象作为类成员"><a href="#（5）类对象作为类成员" class="headerlink" title="（5）类对象作为类成员"></a>（5）类对象作为类成员</h4><p>c++类的成员可以是另一个类的对象，我们称该成员为对象成员</p>
<p>B类中有对象A作为成员，A为对象成员，构造时，先构造类的对象，再构造自身，析构时先析构自身，再析构类的对象</p>
<h4 id="（6）静态成员"><a href="#（6）静态成员" class="headerlink" title="（6）静态成员"></a>（6）静态成员</h4><p>在成员变量和成员函数前加上关键字static，称为静态成员，分为：静态成员变量和静态成员函数</p>
<ul>
<li><p>静态成员变量</p>
<p>1.所有对象共享同一份数据</p>
<p>2.在编译阶段分配内存</p>
<p>3.类内声明（static 变量类型 静态成员变量名；），类外初始化（变量类型 类名::静态成员变量名 = 初值；）</p>
</li>
<li><p>静态成员函数</p>
<p>1.所有对象共享同一个函数</p>
<p>2.静态成员函数只能访问静态成员变量</p>
</li>
</ul>
<p>静态成员函数的访问：</p>
<ol>
<li>通过对象访问</li>
<li>通过类名访问</li>
</ol>
<p>*静态成员函数同样具有访问权限</p>
<h4 id="（7）c-对象模型和this指针"><a href="#（7）c-对象模型和this指针" class="headerlink" title="（7）c++对象模型和this指针"></a>（7）c++对象模型和this指针</h4><p>成员变量和成员函数分开存储：在c++中，类内的成员变量和成员函数分开储存，只有非静态成员变量才属于类的对象</p>
<p>空对象占用内存空间为：1，为了区分每个空对象所占内存的位置</p>
<p>非空对象占用内存空间决定于其包含成员所占字节数。</p>
<p>每一个非静态成员函数只会诞生-份函数实例，也就是说多个同类型的对象会共用一块代码那么问题是:这一块代码是如何区 分那个对象调用自己的呢?</p>
<p>C+ +通过提供特殊的对象指针，this指针， 解决上述问题。this指针指向被调用的成员函数所属的对象</p>
<p>this指针是隐含每一个非静态成员函数内的一种指针this指针不需要定义，直接使用即可</p>
<p><strong>this指针的用途:</strong></p>
<p>●当形参和成员变量同名时，可用this指针来区分</p>
<p>●在类的非静态成员函数中返回对象本身，可使用return *this</p>
<p>c++中，空指针也是可以调用成员函数的，但是需要注意有没有用到this指针，如果用到的话，需要加以判断保证代码的健壮性。</p>
<p><strong>常函数:</strong></p>
<p>●成员函数后加const后我们称为这个函数为常函数</p>
<p>●常函数内不可以修改成员属性</p>
<p>●成员属性声明时加关键字mutable后, 在常函数中依然可以修改</p>
<p>常对象:</p>
<p>●声明对象前加const称该对象为常对象</p>
<p>●常对象只能调用常函数</p>
<h4 id="（8）友元"><a href="#（8）友元" class="headerlink" title="（8）友元"></a>（8）友元</h4><p>在程序里，有些私有属性也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>
<p>友元的目的就是让一个函数或者类访问另一个类中私有成员，关键字为friend</p>
<p>友元的三种实现：</p>
<p>●全局函数做友元</p>
<p>●类做友元</p>
<p>●成员函数做友元.</p>
<h4 id="（9）运算符重载"><a href="#（9）运算符重载" class="headerlink" title="（9）运算符重载"></a>（9）运算符重载</h4><p>重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。</p>
<p>当调用一个重载函数或重载运算符时，编译器通过把所使用的参数类型与定义中的参数类型进行比较，决定选用最合适的定义。选择最合适的重载函数或重载运算符的过程，称为重载决策。</p>
<p>可以重定义或重载大部分 C++ 内置的运算符。这样就能使用自定义类型的运算符。</p>
<p>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。</p>
<pre><code>Box operator+(const Box&amp;);</code></pre>
<p>声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，如下所示：</p>
<pre><code>Box operator+(const Box&amp;, const Box&amp;);</code></pre>
<p>可重载运算符：</p>
<table>
<thead>
<tr>
<th>双目算术运算符</th>
<th>+ (加)，-(减)，*(乘)，/(除)，% (取模)</th>
</tr>
</thead>
<tbody><tr>
<td>关系运算符</td>
<td>==(等于)，!= (不等于)，&lt; (小于)，&gt; (大于)，&lt;=(小于等于)，&gt;=(大于等于)</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>||(逻辑或)，&amp;&amp;(逻辑与)，!(逻辑非)</td>
</tr>
<tr>
<td>单目运算符</td>
<td>+ (正)，-(负)，*(指针)，&amp;(取地址)</td>
</tr>
<tr>
<td>自增自减运算符</td>
<td>++(自增)，–(自减)</td>
</tr>
<tr>
<td>位运算符</td>
<td>| (按位或)，&amp; (按位与)，~(按位取反)，^(按位异或),，&lt;&lt; (左移)，&gt;&gt;(右移)</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>=, +=, -=, *=, /= , % = , &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=</td>
</tr>
<tr>
<td>空间申请与释放</td>
<td>new, delete, new[ ] , delete[]</td>
</tr>
<tr>
<td>其他运算符</td>
<td><strong>()</strong>(函数调用)，**-&gt;<strong>(成员访问)，</strong>,<strong>(逗号)，</strong>[]**(下标)</td>
</tr>
</tbody></table>
<p>不可重载运算符：</p>
<ul>
<li>**.**：成员访问运算符</li>
<li><strong>.*</strong>, <strong>-&gt;*</strong>：成员指针访问运算符</li>
<li>**::**：域运算符</li>
<li><strong>sizeof</strong>：长度运算符</li>
<li>**?:**：条件运算符</li>
<li>**#**： 预处理符号</li>
</ul>
<h3 id="（5）继承"><a href="#（5）继承" class="headerlink" title="（5）继承"></a>（5）继承</h3><p>面向对象程序设计中最重要的一个概念是继承。继承允许我们依据另一个类来定义一个类，这使得创建和维护一个应用程序变得更容易。这样做，也达到了重用代码功能和提高执行效率的效果。</p>
<p>当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为<strong>基类</strong>，新建的类称为<strong>派生类</strong>。</p>
<p>继承代表了 <strong>is a</strong> 关系。例如，哺乳动物是动物，狗是哺乳动物，因此，狗是动物，等等。</p>
<p><img src="/2021/01/20/c++%E5%AD%A6%E4%B9%A0-2/pic-3.png" alt="pic-3"></p>
<h4 id="基类-amp-派生类："><a href="#基类-amp-派生类：" class="headerlink" title="基类 &amp; 派生类："></a><strong>基类 &amp; 派生类：</strong></h4><p>一个类可以派生自多个类，这意味着，它可以从多个基类继承数据和函数。定义一个派生类，我们使用一个类派生列表来指定基类。类派生列表以一个或多个基类命名，形式如下：</p>
<pre><code>class derived-class: access-specifier base-class</code></pre>
<p>其中，访问修饰符 access-specifier 是 <strong>public、protected</strong> 或 <strong>private</strong> 其中的一个，base-class 是之前定义过的某个类的名称。如果未使用访问修饰符 access-specifier，则默认为 private。</p>
<h4 id="访问控制和继承："><a href="#访问控制和继承：" class="headerlink" title="访问控制和继承："></a><strong>访问控制和继承</strong>：</h4><p>派生类可以访问基类中所有的非私有成员。因此基类成员如果不想被派生类的成员函数访问，则应在基类中声明为 private。</p>
<p>我们可以根据访问权限总结出不同的访问类型，如下所示：</p>
<table>
<thead>
<tr>
<th align="left">访问</th>
<th align="left">public</th>
<th align="left">protected</th>
<th align="left">private</th>
</tr>
</thead>
<tbody><tr>
<td align="left">同一个类</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td align="left">yes</td>
</tr>
<tr>
<td align="left">派生类</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td align="left">no</td>
</tr>
<tr>
<td align="left">外部的类</td>
<td align="left">yes</td>
<td align="left">no</td>
<td align="left">no</td>
</tr>
</tbody></table>
<p>一个派生类继承了所有的基类方法，但下列情况除外：</p>
<ul>
<li>基类的构造函数、析构函数和拷贝构造函数。</li>
<li>基类的重载运算符。</li>
<li>基类的友元函数。</li>
</ul>
<h4 id="继承类型："><a href="#继承类型：" class="headerlink" title="继承类型："></a>继承类型：</h4><p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p>
<p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p>
<ul>
<li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li>
<li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li>
<li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li>
</ul>
<h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承:"></a>多继承:</h4><p>多继承即一个子类可以有多个父类，它继承了多个父类的特性。</p>
<p>C++ 类可以从多个类继承成员，语法如下：</p>
<pre><code>class &lt;派生类名&gt;:&lt;继承方式1&gt;&lt;基类名1&gt;,&lt;继承方式2&gt;&lt;基类名2&gt;,…
&#123;
&lt;派生类类体&gt;
&#125;;</code></pre>
<p>其中，访问修饰符继承方式是 <strong>public、protected</strong> 或 <strong>private</strong> 其中的一个，用来修饰每个基类，各个基类之间用逗号分隔，如上所示。现在让我们一起看看下面的实例：</p>
<h3 id="（6）多态"><a href="#（6）多态" class="headerlink" title="（6）多态"></a>（6）多态</h3><p><strong>多态</strong>按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。</p>
<p>多态分为两类：</p>
<p>●静态多态:函数重载和运算符重载属于静态多态，复用函数名</p>
<p>●动态多态:派生类和虚函数实现运行时多态</p>
<p>静态多态和动态多态区别:</p>
<p>●静态多态的函数地址早绑定- 编译阶段确定函数地址</p>
<p>●动态多态的函数地址晚绑定- 运行阶段确定函数地址</p>
<p>C++ 多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数。</p>
<p>每个子类都能有一个函数 area() 的独立实现。这就是<strong>多态</strong>的一般使用方式。有了多态，您可以有多个不同的类，都带有同一个名称但具有不同实现的函数，函数的参数甚至可以是相同的。</p>
<h4 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h4><p><strong>虚函数</strong> 是在基类中使用关键字 <strong>virtual</strong> 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。</p>
<p>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为<strong>动态链接</strong>，或<strong>后期绑定</strong>。</p>
<h4 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h4><p>您可能想要在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是您在基类中又不能对虚函数给出有意义的实现，这个时候就会用到纯虚函数。</p>
<h2 id="c-文件操作"><a href="#c-文件操作" class="headerlink" title="c++文件操作"></a>c++文件操作</h2><p>在C++中，有一个stream这个类，所有的I/O都以这个”流”类为基础的，包括我们要认识的文件I/O，stream这个类有两个重要的运算符：</p>
<h3 id="1、插入器-lt-lt"><a href="#1、插入器-lt-lt" class="headerlink" title="1、插入器(&lt;&lt;)"></a><strong>1、插入器(&lt;&lt;)</strong></h3><p>　　向流输出数据。比如说系统有一个默认的标准输出流(cout)，一般情况下就是指的显示器，所以，cout&lt;&lt;”Write Stdout”&lt;&lt;’/n’;就表示把字符串”Write Stdout”和换行字符(‘/n’)输出到标准输出流。</p>
<h3 id="2、析取器-gt-gt"><a href="#2、析取器-gt-gt" class="headerlink" title="2、析取器(&gt;&gt;)"></a><strong>2、析取器(&gt;&gt;)</strong></h3><p>　　从流中输入数据。比如说系统有一个默认的标准输入流(cin)，一般情况下就是指的键盘，所以，cin&gt;&gt;x;就表示从标准输入流中读取一个指定类型(即变量x的类型)的数据。</p>
<p>在C++中，对文件的操作是通过stream的子类fstream(file stream)来实现的，所以，要用这种方式操作文件，就必须加入头文件fstream。下面就把此类的文件操作过程一一道来。</p>
<h3 id="3、打开文件"><a href="#3、打开文件" class="headerlink" title="3、打开文件"></a><strong>3、打开文件</strong></h3><p>　　在fstream类中，有一个成员函数open()，就是用来打开文件的，其原型是：</p>
<p>　　void open(const char* filename,int mode,int access);</p>
<p>　　参数：</p>
<p>　　filename：　　要打开的文件名<br>　　mode：　　　　要打开文件的方式<br>　　access：　　　打开文件的属性<br>　　打开文件的方式在类ios(是所有流式I/O类的基类)中定义，常用的值如下：</p>
<p>　　ios::app：　　　以追加的方式打开文件<br>　　ios::ate：　　　文件打开后定位到文件尾，ios:app就包含有此属性<br>　　ios::binary： 　以二进制方式打开文件，缺省的方式是文本方式。两种方式的区别见前文<br>　　ios::in：　　　 文件以输入方式打开<br>　　ios::out：　　　文件以输出方式打开<br>　　ios::nocreate： 不建立文件，所以文件不存在时打开失败　<br>　　ios::noreplace：不覆盖文件，所以打开文件时如果文件存在失败<br>　　ios::trunc：　　如果文件存在，把文件长度设为0<br>　　可以用”或”把以上属性连接起来，如ios::out|ios::binary</p>
<p>　　打开文件的属性取值是：</p>
<p>　　0：普通文件，打开访问<br>　　1：只读文件<br>　　2：隐含文件<br>　　4：系统文件<br>　　可以用”或”或者”+”把以上属性连接起来 ，如3或1|2就是以只读和隐含属性打开文件。</p>
<p>　　例如：以二进制输入方式打开文件c:/config.sys</p>
<p>　　fstream file1;<br>　　file1.open(“c://config.sys”,ios::binary|ios::in,0);</p>
<p>　　如果open函数只有文件名一个参数，则是以读/写普通文件打开，即：</p>
<p>　　file1.open(“c://config.sys”);&lt;=&gt;file1.open(“c://config.sys”,ios::in|ios::out,0);</p>
<p>　　另外，fstream还有和open()一样的构造函数，对于上例，在定义的时侯就可以打开文件了：</p>
<p>　　fstream file1(“c://config.sys”);</p>
<p>　　特别提出的是，fstream有两个子类：ifstream(input file stream)和ofstream(outpu file stream)，ifstream默认以输入方式打开文件，而ofstream默认以输出方式打开文件。</p>
<p>　　ifstream file2(“c://pdos.def”);//以输入方式打开文件<br>　　ofstream file3(“c://x.123”);//以输出方式打开文件</p>
<p>　　所以，在实际应用中，根据需要的不同，选择不同的类来定义：如果想以输入方式打开，就用ifstream来定义；如果想以输出方式打开，就用ofstream来定义；如果想以输入/输出方式来打开，就用fstream来定义。</p>
<h3 id="4、关闭文件"><a href="#4、关闭文件" class="headerlink" title="4、关闭文件"></a>4、关闭文件</h3><p>　　打开的文件使用完成后一定要关闭，fstream提供了成员函数close()来完成此操作，如：file1.close();就把file1相连的文件关闭。</p>
<h3 id="5、读写文件"><a href="#5、读写文件" class="headerlink" title="5、读写文件"></a>5、读写文件</h3><p>　　读写文件分为文本文件和二进制文件的读取，对于文本文件的读取比较简单，用插入器和析取器就可以了；而对于二进制的读取就要复杂些，下要就详细的介绍这两种方式</p>
<h4 id="1、文本文件的读写"><a href="#1、文本文件的读写" class="headerlink" title="1、文本文件的读写"></a>1、文本文件的读写</h4><p>　　文本文件的读写很简单：用插入器(&lt;&lt;)向文件输出；用析取器(&gt;&gt;)从文件输入。假设file1是以输入方式打开，file2以输出打开。示例如下：</p>
<p>　　file2&lt;&lt;”I Love You”;//向文件写入字符串”I Love You”<br>　　int i;<br>　　file1&gt;&gt;i;//从文件输入一个整数值。</p>
<p>　　这种方式还有一种简单的格式化能力，比如可以指定输出为16进制等等，具体的格式有以下一些</p>
<p>　　操纵符 功能 输入/输出<br>　　dec 格式化为十进制数值数据 输入和输出<br>　　endl 输出一个换行符并刷新此流 输出<br>　　ends 输出一个空字符 输出<br>　　hex 格式化为十六进制数值数据 输入和输出<br>　　oct 格式化为八进制数值数据 输入和输出<br>　　setpxecision(int p) 设置浮点数的精度位数 输出</p>
<p>　　比如要把123当作十六进制输出：file1&lt;</p>
<h4 id="2、二进制文件的读写"><a href="#2、二进制文件的读写" class="headerlink" title="2、二进制文件的读写"></a>2、二进制文件的读写</h4><h5 id="①put"><a href="#①put" class="headerlink" title="①put()"></a>①put()</h5><p>　　put()函数向流写入一个字符，其原型是ofstream &amp;put(char ch)，使用也比较简单，如file1.put(‘c’);就是向流写一个字符’c’。</p>
<h5 id="②get"><a href="#②get" class="headerlink" title="②get()"></a>②get()</h5><p>　　get()函数比较灵活，有3种常用的重载形式：</p>
<p>　　一种就是和put()对应的形式：ifstream &amp;get(char &amp;ch);功能是从流中读取一个字符，结果保存在引用ch中，如果到文件尾，返回空字符。如file2.get(x);表示从文件中读取一个字符，并把读取的字符保存在x中。</p>
<p>　　另一种重载形式的原型是： int get();这种形式是从流中返回一个字符，如果到达文件尾，返回EOF，如x=file2.get();和上例功能是一样的。</p>
<p>　　还有一种形式的原型是：ifstream &amp;get(char *buf,int num,char delim=’/n’)；这种形式把字符读入由 buf 指向的数组，直到读入了 num 个字符或遇到了由 delim 指定的字符，如果没使用 delim 这个参数，将使用缺省值换行符’/n’。例如：</p>
<p>　　file2.get(str1,127,’A’);//从文件中读取字符到字符串str1，当遇到字符’A’或读取了127个字符时终止。</p>
<h5 id="③读写数据块"><a href="#③读写数据块" class="headerlink" title="③读写数据块"></a>③读写数据块</h5><p>　　要读写二进制数据块，使用成员函数read()和write()成员函数，它们原型如下：</p>
<p>　　read(unsigned char *buf,int num);<br>　　write(const unsigned char *buf,int num);</p>
<p>　　read()从文件中读取 num 个字符到 buf 指向的缓存中，如果在还未读入 num 个字符时就到了文件尾，可以用成员函数 int gcount();来取得实际读取的字符数；而 write() 从buf 指向的缓存写 num 个字符到文件中，值得注意的是缓存的类型是 unsigned char *，有时可能需要类型转换。</p>
<p>　　例：</p>
<p>　　unsigned char str1[]=”I Love You”;<br>　　int n[5];<br>　　ifstream in(“xxx.xxx”);<br>　　ofstream out(“yyy.yyy”);<br>　　out.write(str1,strlen(str1));//把字符串str1全部写到yyy.yyy中<br>　　in.read((unsigned char*)n,sizeof(n));//从xxx.xxx中读取指定个整数，注意类型转换<br>　　in.close();out.close();</p>
<h3 id="6、检测EOF"><a href="#6、检测EOF" class="headerlink" title="6、检测EOF"></a>6、检测EOF</h3><p>　　成员函数eof()用来检测是否到达文件尾，如果到达文件尾返回非0值，否则返回0。原型是int eof();</p>
<p>　　例：　　if(in.eof())ShowMessage(“已经到达文件尾！”);</p>
<h3 id="7、文件定位"><a href="#7、文件定位" class="headerlink" title="7、文件定位"></a>7、文件定位</h3><p>　　和C的文件操作方式不同的是，C++ I/O系统管理两个与一个文件相联系的指针。一个是读指针，它说明输入操作在文件中的位置；另一个是写指针，它下次写操作的位置。每次执行输入或输出时，相应的指针自动变化。所以，C++的文件定位分为读位置和写位置的定位，对应的成员函数是 seekg()和 seekp()，seekg()是设置读位置，seekp是设置写位置。它们最通用的形式如下：</p>
<p>　　istream &amp;seekg(streamoff offset,seek_dir origin);<br>　　ostream &amp;seekp(streamoff offset,seek_dir origin);</p>
<p>　　streamoff定义于 iostream.h 中，定义有偏移量 offset 所能取得的最大值，seek_dir 表示移动的基准位置，是一个有以下值的枚举：</p>
<p>　　ios::beg：　　文件开头<br>　　ios::cur：　　文件当前位置<br>　　ios::end：　　文件结尾<br>　　这两个函数一般用于二进制文件，因为文本文件会因为系统对字符的解释而可能与预想的值不同。</p>
<p>　　例：</p>
<p>　　file1.seekg(1234,ios::cur);//把文件的读指针从当前位置向后移1234个字节<br>　　file2.seekp(1234,ios::beg);//把文件的写指针从文件开头向后移1234个字节</p>
<h3 id="8-BCB提供的文件操作函数"><a href="#8-BCB提供的文件操作函数" class="headerlink" title="8.BCB提供的文件操作函数"></a>8.BCB提供的文件操作函数</h3><p>总共分为三类：</p>
<p>1、文件名函数</p>
<p>2、文件管理函数</p>
<p>3、文件I/O函数</p>
<h4 id="1、文件名函数"><a href="#1、文件名函数" class="headerlink" title="1、文件名函数"></a>1、文件名函数</h4><p>　　文件名函数可以对文件的名称、所在子目录、驱动器和扩展名等进行操作。下表列出这些函数及其功能。</p>
<p>　　函数 说明<br>　　ExpandFileName() 返回文件的全路径(含驱动器、路径)<br>　　ExtractFileExt() 从文件名中抽取扩展名<br>　　ExtractFileName() 从文件名中抽取不含路径的文件名<br>　　ExtractFilePath() 从文件名中抽取路径名<br>　　ExtractFileDir() 从文件名中抽取目录名<br>　　ExtractFileDrive() 从文件名中抽取驱动器名<br>　　ChangeFileExt() 改变文件的扩展名<br>　　ExpandUNCFileName() 返回含有网络驱动器的文件全路径<br>　　ExtractRelativePath() 从文件名中抽取相对路径信息<br>　　ExtractShortPathName() 把文件名转化为DOS的8·3格式<br>　　MatchesMask() 检查文件是否与指定的文件名格式匹配</p>
<p>　　下面就把这些函数作一一介绍：</p>
<h5 id="⑴ExpandFileName"><a href="#⑴ExpandFileName" class="headerlink" title="⑴ExpandFileName()"></a><strong>⑴ExpandFileName()</strong></h5><p>　　功能：返回文件的全路径(含驱动器、路径)</p>
<p>　　参数：FileName:要处理的文件名</p>
<p>　　例：ShowMessage(ExpandFileName(Application-&gt;ExeName));//显示你的程序文件名，如C:/MyBCB/Sample1.EXE</p>
<h5 id="⑵ExtractFileExt"><a href="#⑵ExtractFileExt" class="headerlink" title="⑵ExtractFileExt()"></a><strong>⑵ExtractFileExt()</strong></h5><p>　　功能：从文件名中抽取扩展名</p>
<p>　　参数：FileName:要处理的文件名（全路径）</p>
<p>　　例：ShowMessage(ExtractFileExt(Application-&gt;ExeName));//显示”.exe”</p>
<h5 id="⑶ExtractFileName"><a href="#⑶ExtractFileName" class="headerlink" title="⑶ExtractFileName()"></a><strong>⑶ExtractFileName()</strong></h5><p>　　功能：从文件名中抽取不含路径的文件名</p>
<p>　　参数：FileName:要处理的文件名</p>
<p>　　例：ShowMessage(ExtractFileExt(“c://Winnt//SOL.EXE”));//显示”SOL.EXE”</p>
<h5 id="⑷ExtractFilePath"><a href="#⑷ExtractFilePath" class="headerlink" title="⑷ExtractFilePath()"></a><strong>⑷ExtractFilePath()</strong></h5><p>　　功能：从文件名中抽取路径名</p>
<p>　　参数：FileName:要处理的文件名</p>
<p>　　例：ShowMessage(ExtractFilePath(“Winnt//SOL.EXE”));//显示”Winnt/“</p>
<h5 id="⑸ExtractFileDir"><a href="#⑸ExtractFileDir" class="headerlink" title="⑸ExtractFileDir()"></a><strong>⑸ExtractFileDir()</strong></h5><p>　　功能：从文件名中抽取目录名(和上个函数不同，不包括最后的”/“)</p>
<p>　　参数：FileName:要处理的文件名</p>
<p>　　例：ShowMessage(ExtractFileDir(“Winnt//SOL.EXE”));//显示”Winnt”,注意和上个函数的区别</p>
<h5 id="⑹ExtractFileDrive"><a href="#⑹ExtractFileDrive" class="headerlink" title="⑹ExtractFileDrive()"></a><strong>⑹ExtractFileDrive()</strong></h5><p>　　功能：从文件名中抽取驱动器名</p>
<p>　　参数：FileName:要处理的文件名</p>
<p>　　例：ShowMessage(ExtractFileDrive(“c://Winnt//SOL.EXE”));//显示”c:”</p>
<h5 id="⑺ChangeFileExt"><a href="#⑺ChangeFileExt" class="headerlink" title="⑺ChangeFileExt()"></a><strong>⑺ChangeFileExt()</strong></h5><p>　　功能：更改文件名的扩展名，不是对真正的文件进行改名，只是对文件名这个字符串进行处理</p>
<p>　　参数：FileName:要改名的文件名，Extension：新的扩展名</p>
<p>　　例：ShowMessage(ChangeFileExt(“c://Winnt//SOL.EXE”,”.OOO”));//显示”c:/winnt/SOL.OOO”</p>
<h5 id="⑻ExpandUNCFileName"><a href="#⑻ExpandUNCFileName" class="headerlink" title="⑻ExpandUNCFileName()"></a><strong>⑻ExpandUNCFileName()</strong></h5><p>　　功能：返回含有网络驱动器的文件全路径，格式为：//机器名/共享名/文件名</p>
<p>　　参数：FileName:要处理的文件名</p>
<p>　　例：ShowMessage(ExpandUNCFileName(“F://Winnt//SOL.EXE”));/<em>如果F:是映射的网络驱动器//NT40/WINNT，则显示”//NT40/WINNT/SOL.EXE”</em>/</p>
<h5 id="⑼ExtractRelativePath"><a href="#⑼ExtractRelativePath" class="headerlink" title="⑼ExtractRelativePath()"></a><strong>⑼ExtractRelativePath()</strong></h5><p>　　功能：从文件名中抽取相对路径信息，如”../sss/ss.asd”这种形式</p>
<p>　　参数：BaseName：基准文件名；DestName：目标文件名</p>
<p>　　例：ShowMessage(ExtractRelativePath(“D://Source//c//1.123”,”D://Source//Asm//dz.asm”));/<em>显示”../asm/dz.asm”</em>/</p>
<h5 id="10-ExtractShortPathName"><a href="#10-ExtractShortPathName" class="headerlink" title="(10) ExtractShortPathName()"></a><strong>(10) ExtractShortPathName()</strong></h5><p>　　功能：把文件名转换为DOS的8、3格式</p>
<p>　　参数：FileName:要处理的文件名</p>
<p>　　例：ShowMessage(ExtractShortPathName(“E://Program Files//Dual Wheel Mouse//4dmain.exe”));/<em>显示”E:/Progra<del>1/dualwh</del>1/4dmain.exe”</em>/</p>
<h5 id="⑾MatchesMask"><a href="#⑾MatchesMask" class="headerlink" title="⑾MatchesMask()"></a><strong>⑾MatchesMask()</strong></h5><p>　　功能：检查文件是否与指定的文件名格式匹配</p>
<p>　　参数：FileName:要处理的文件名；Mask:文件名格式，支持通配符</p>
<p>　　例：ShowMessage(MatchesMask(“Lxf.exe”,”*.?x?));//显示”true”</p>
<h4 id="2、文件管理函数"><a href="#2、文件管理函数" class="headerlink" title="2、文件管理函数"></a>2、文件管理函数</h4><p>　　这类函数包括设置和读取驱动器、子目录和文件的有关的各种操作，下表列出这类操作常用的函数及其功能。</p>
<p>　　函数 功能<br>　　CreateDir() 创建新的子目录<br>　　DeleteFile() 删除文件<br>　　DirectoryExists() 判断目录是否存在<br>　　DiskFree() 获取磁盘剩余空间<br>　　DiskSize() 获取磁盘容量<br>　　FileExists() 判断文件是否存在<br>　　FileGetAttr() 获取文件属性<br>　　FileGetDate() 获取文件日期<br>　　GetCurrentDir() 获取当前目录<br>　　RemoveDir() 删除目录<br>　　SetCurrentDir() 设置当前目录</p>
<p>　　下面就把这些函数作一一介绍：</p>
<h5 id="⑴CreateDir"><a href="#⑴CreateDir" class="headerlink" title="⑴CreateDir()"></a><strong>⑴CreateDir()</strong></h5><p>　　功能：建立子目录，如果成功返回true，否则返回false</p>
<p>　　参数：Dir:要建立的子目录的名字</p>
<p>　　例：Create(“ASM”);//在当前目录下建立一个名为ASM的子目录</p>
<h5 id="⑵DeleteFile"><a href="#⑵DeleteFile" class="headerlink" title="⑵DeleteFile()"></a><strong>⑵DeleteFile()</strong></h5><p>　　功能：删除文件，如果成功返回true，否则返回false</p>
<p>　　参数：FileName:要删除的文件名</p>
<p>　　例：if(OpenDialog1-&gt;Execute())DeleteFile(OpenDialog1-&gt;FileName);</p>
<h5 id="⑶DirectoryExists"><a href="#⑶DirectoryExists" class="headerlink" title="⑶DirectoryExists()"></a><strong>⑶DirectoryExists()</strong></h5><p>　　功能：检测目录是否存在，如果存在返回true，否则返回false</p>
<p>　　参数：Name:要检测的目录名</p>
<p>　　例：if(!DirectoryExists(“ASM”))CreateDir(“ASM”);//如果ASM这个目录不存在则创建之</p>
<h5 id="⑷DiskFree"><a href="#⑷DiskFree" class="headerlink" title="⑷DiskFree()"></a><strong>⑷DiskFree()</strong></h5><p>　　功能：检测磁盘剩余空间，返回值以字节为单位，如果指定的磁盘无效，返回-1</p>
<p>　　参数：Drive：磁盘的代号，0表示当前盘, 1=A,2=B,3=C 以此类推</p>
<p>　　例：ShowMessage(DiskFree(0));//显示当前盘的剩余空间</p>
<h5 id="⑸DiskSize"><a href="#⑸DiskSize" class="headerlink" title="⑸DiskSize()"></a><strong>⑸DiskSize()</strong></h5><p>　　功能：检测磁盘容量，返回值以字节为单位，如果指定的磁盘无效，返回-1</p>
<p>　　参数：Drive：磁盘的代号，0表示当前盘, 1=A,2=B,3=C 以此类推</p>
<p>　　例：ShowMessage(DiskFree(0));//显示当前盘的容量</p>
<p>　　<strong>⑹FileExists()</strong> </p>
<p>　　功能：检测文件是否存在，如果存在返回true，否则返回false</p>
<p>　　参数：FileName:要检测的文件名</p>
<p>　　例：if(FileExists(“AAA.ASM”))DeleteFile(“AAA.ASM”);</p>
<h5 id="⑺FileGetAttr"><a href="#⑺FileGetAttr" class="headerlink" title="⑺FileGetAttr()"></a><strong>⑺FileGetAttr()</strong></h5><p>　　功能：取得文件属性，如果出错返回-1</p>
<p>　　返回值如下表，如果返回$00000006表示是一个具有隐含和系统属性的文件(4+2)</p>
<p>　　常量 值 含义<br>　　faReadOnly $00000001 只读文件<br>　　faHidden $00000002 隐含文件<br>　　faSysFile $00000004 系统文件<br>　　faVolumeID $00000008 卷标<br>　　faDirectory $00000010 目录<br>　　faArchive $00000020 归档文件</p>
<p>　　例：if(FileGetAttr(“LLL.TXT”)&amp;0x2)ShowMessage(“这是一个有隐含属性的文件”);</p>
<p>　　与此对应的有FileSetAttr() ，请自已查阅帮助系统</p>
<h5 id="⑻FileGetDate"><a href="#⑻FileGetDate" class="headerlink" title="⑻FileGetDate()"></a><strong>⑻FileGetDate()</strong></h5><p>　　功能：返回文件的建立时间到1970-1-1日0时的秒数</p>
<p>　　参数：Handle:用FileOpen()打开的文件句柄。</p>
<p>　　例：</p>
<p>　　int i=FileOpen(“C://autoexec.bat”,fmOpenRead);<br>　　ShowMessage(FileGetDate(i));<br>　　FileClose(i);</p>
<p>　　与此对应的有FileSetDate()</p>
<p>　　<strong>⑼GetCurrentDir()</strong> </p>
<p>　　功能：取得当前的目录名</p>
<p>　　例：ShowMessage(GetCurrentDir());</p>
<h5 id="⑽RemoveDir"><a href="#⑽RemoveDir" class="headerlink" title="⑽RemoveDir()"></a><strong>⑽RemoveDir()</strong></h5><p>　　功能：删除目录，如果成功返回true，否则返回false</p>
<p>　　参数：Dir:要删除的目录名</p>
<p>　　例：if(DiectoryExists(“ASM”))RemoveDir(“ASM”);</p>
<h5 id="⑾SetCurrentDir"><a href="#⑾SetCurrentDir" class="headerlink" title="⑾SetCurrentDir()"></a><strong>⑾SetCurrentDir()</strong></h5><p>　　功能：设置当前目录，如果成功返回true，否则返回false</p>
<p>　　参数：Dir:要切换到的目录名</p>
<p>　　例：SetCurrentDir(“C://WINDOWS”);</p>
<h4 id="3、文件I-O函数"><a href="#3、文件I-O函数" class="headerlink" title="3、文件I/O函数"></a>3、文件I/O函数</h4><p>　　这类函数完成对文件的读写相关的操作，这种类型的操作和C的基于I/O文件操作类似，下表列出这类操作常用的函数及其功能。</p>
<p>　　FileOpen() 打开文件<br>　　FileClose() 关闭文件<br>　　FileRead() 读文件<br>　　FileSeek() 文件定位<br>　　FileWrite() 写文件<br>　　FileCreate() 创建文件</p>
<p>　　下面就对这些函数作详细介绍。</p>
<p>　　<strong>⑴FileOpen()</strong> </p>
<p>　　功能：打开文件，如果成功返回其句柄，否则返回-1</p>
<p>　　参数：FileName:要打开的文件名；Mode：打开的方式，取值如下表，可用”或”(“|”)运算符连接。</p>
<p>　　常量 值 说明 </p>
<p>　　fmOpenRead 0 以只读属性打开<br>　　fmOpenWrite 1 以只写属性打开<br>　　fmOpenReadWrite 2 以读/写属性打开<br>　　fmShareCompat 0 兼容FCB方式(汇编中有相应的DOS功能调用)<br>　　fmShareExclusive 16 共享方式：以独占方式打开，在关闭以前，别人不能访问<br>　　fmShareDenyWrite 32 共享方式：拒绝写访问<br>　　fmShareDenyRead 48 共享方式：拒绝读访问<br>　　fmShareDenyNone 64 共享方式：无限制，允许读写<br>　　例：int i=FileOpen(“C://WINDOWS//Win.ini”,fmOpenReadWrite|fmShareExclusive);</p>
<p>　　<strong>⑵FileClose()</strong> </p>
<p>　　功能：关闭打开的句柄。</p>
<p>　　参数：Handle:要关闭的句柄</p>
<p>　　例：FileClose(i);</p>
<p>　　<strong>⑶FileRead()</strong> </p>
<p>　　功能：读文件，返回实际读取的字节数，句柄必须首先由FileOpen或FileCreate创建。</p>
<p>　　参数：Handle:要读取的句柄；Buffer:存放读取的数据的缓冲区；Count:想读取的字节数</p>
<p>　　例：char str[400];FileRead(hnd1,str,400);</p>
<p>　　<strong>⑷FileSeek()</strong> </p>
<p>　　功能：移动文件读取指针，成功返回文件指针的位置，失败返回-1</p>
<p>　　参数：Handle:相关联的句柄；Offset:移动的量；Orgin:移动的基准，0=文件头，1=当前位置，2=文件尾。</p>
<p>　　例：ShowMessage(FileSeek(hnd1,0,2));//取得文件的长度</p>
<p>　　<strong>⑸FileWrite()</strong> </p>
<p>　　功能：写文件，返回实际写入的字节数，句柄必须首先由FileOpen或FileCreate创建。</p>
<p>　　参数：Handle:要写入的句柄；Buffer:存放写入数据的缓冲区；Count:想写入的字节数</p>
<p>　　例：char str[]=”I Love You”;FileWrite(hnd1,str,strlen(str));</p>
<p>　　<strong>⑹FileCreate()</strong> </p>
<p>　　功能：创建文件。成功返回其句柄，否则返回-1</p>
<p>　　参数：FileName:要创建的文件名</p>
<p>　　例：if(!FileExists(“KC.C”))hnd1=FileCreate(“KC.C”);</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>c++学习</tag>
      </tags>
  </entry>
  <entry>
    <title>《南城院校风纪委员部》</title>
    <url>/2021/01/18/%E3%80%8A%E5%8D%97%E5%9F%8E%E9%99%A2%E6%A0%A1%E9%A3%8E%E7%BA%AA%E5%A7%94%E5%91%98%E9%83%A8%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《南城院校风纪委员部》"><a href="#《南城院校风纪委员部》" class="headerlink" title="《南城院校风纪委员部》"></a>《南城院校风纪委员部》</h1><p>*注：所有内容均为封艾羽原创，禁止未经允许的一切形式转载</p>
<h1 id="第一卷：新生「太阳」与南城院校"><a href="#第一卷：新生「太阳」与南城院校" class="headerlink" title="第一卷：新生「太阳」与南城院校"></a>第一卷：新生「太阳」与南城院校</h1><h2 id="第1章：新生「太阳」与南城院校（一）"><a href="#第1章：新生「太阳」与南城院校（一）" class="headerlink" title="第1章：新生「太阳」与南城院校（一）"></a>第1章：新生「太阳」与南城院校（一）</h2><div>你听说过“南城院校”吗？</div><div>那是传说中的十四等魔法使所缔造的，有着「魔法使的天堂」、「天才的乐园」之称，仅次于「神之箱庭」的独立高级位面。</div><div>说到这个宛若乌托邦的南城院校，那么首先要提的便是学生会和风纪委员部——他们是屹立于最顶端的两大势力，学生会担任政府的角色，而风纪委则是支配着军事与纪律的一切。</div><div>因为年龄限制的缘故，他们都有着年轻气盛的正义感与超乎常人的天赋和实力，同时，担任学生会成员的人往往都会先一步在风纪委的环境中锻炼着自我。</div><div>这便注定了，南城院校风纪委员部，这个神话诞生的地方。</div><div>其中，最为耀眼的便数初代、三代、和实力巅峰的七代风纪委。</div><div>初代风纪委员部，仅凭四人击退由压境的「神之箱庭」，成功守护了刚刚创造不久的这个位面，其中一人甚至登上了真正的“神”的宝座。</div><div>三代风纪委员部，人数最少却开创了金三角时代，真正实现了将各个位面的天才汇聚于南院，彻底落实「天才的乐园」之名。</div><div>至于七代风纪委员部——</div><div>历史长河中的他们如何成为传说，如何以双手创造了这个神也无法知晓的未来，也正是这个故事的开始。</div><div>…………</div><div>穿过繁华的街道，在熙熙攘攘的人群间穿梭着，少年般的少女此刻正打量着周围的一切，一双碧绿的眸中颇有些不可思议的味道。</div><div>她，封艾羽，一月前才刚刚从下等位面来到这里的魔法使。由于原来所处的位面比起这里来说，资源过于贫乏，所以即便是现在，她也还仍旧还没能习惯这里的一切。</div><div>带有青草芬芳的空气中，有着她难以想象的魔力浓度。</div><div>现在的这个位面，让她总觉得曾经那些为一颗低等魔力核就拼死拼活的日子仿若是在做梦一样。</div><div>一路走来，原本极其贵重的魔法道具理所当然的被作为公共设施出现在大街小巷，成了人手一份的日常工具，以至于她的价值观不断遭到抨击。</div><div>这里果然是那个南城院校啊——她甚至不由得冒出了这样的念头。</div><div>当然，除了价值观的冲击之外，其实也有很多事情令她在这个陌生的世界感到安心。</div><div>比如，眼前这座“要塞”，曾被她戏称“龟壳”的结界，如今却意外令她感到十分安心。并不是因为结界本身能够阻挡陨星的满级防御力，而是这个结界，从来都只有一个人会构建，就连她自己也做不到。</div><div>只不过，当走进“要塞”包围的小洋楼，通过当初在对方身上留下的魔力标记，到达对方的所在地时，封艾羽不由得扯了扯嘴角，嗯，她其实早就猜到了一些的，不过还是感觉有点气就是了。</div><div>“啊啊，好可爱！！”某绿毛毫无形象的抱着光脑在地板上打滚，一边疯狂叫嚣着，一边擦口水：“简直太犯规了！萝莉这种小小的生物到底能可爱到什么地步啊！！”封艾羽当即一扶额，抬手敲了敲门框，好吧，至少能肯定她没找错人：“喂，安迪你个死萝莉控，麻烦收敛一下你变态的表情先。”</div><div>眼前的绿毛萝莉控名为安向阳，是她在原来位面的挚友之一，比她稍早通过空间裂缝来到这边，虽然是有时候行为的确是令人难以言喻了一点，但人品还是非常值得信任的。</div><div>而听到封艾羽的声音，安向阳猛然回头，迅雷不及掩耳盗铃之势整理好了自己的表情，仿佛刚刚的一切都没有发生过一样：“艾姐，没想到你来得这么突然。”听此，封艾羽嘴角再次一抽：“这还突然？有人进你结界都不知道？真亏你没被人入室抢劫啊。”</div><div>“别在意这种细节嘛——”</div><div>两人还没说上什么，忽然，不知从哪里来的一个金发少年莫名冲过来，提剑就挡在了安向阳身前，一脸警惕的看着封艾羽：“阁下擅自闯进别人的结界，有何贵干？”少年似乎有着很锐利的表情，只不过还在湿漉漉向下滴水的的短发完全破坏了整个人的气势，嗯……他这之前大概、也许是在洗澡？</div><div>还没等封艾羽回答，安向阳就赶紧制止了面前少年的行动，在他看来，这就是个找虐的行为：“啊，等等，维斯特，这是我朋友，不是什么可疑人物。”</div><div>“哎？是这样吗？”少年的表情化作有些天然的一愣，然后略为尴尬的笑出了两颗虎牙：“抱歉啊，好像是我误会了。”</div><div>“我叫维斯特·夏尔伯特，是名魔剑士，暂时在向阳这里借住。”</div><div>“我是安迪的旧友，封艾羽，很高兴认识你。”</div><div>“安迪？是说向阳吗？”维斯特有些疑惑的看向安向阳，他怎么从来不知道对方还有个这么女气的名字？</div><div>“嗯，诺灵克斯亚·冥·安迪，对吧？”封艾羽说着，开玩笑似的看向了安向阳，对方当即露出一个快哭的表情：“艾姐，算我求你，别再提这全名了好吧……超级羞耻的哎！”见此，封艾羽一笑：“那就不提了，现在先说回正题，关于南院招生的事情，你知道多少？”</div><div>“招生？”安向阳一愣：“艾姐要进外院吗？”</div><div>“嗯，准确来说是要去内院。”听见这个，在一旁擦着头发的维斯特不由得抬眼看了过来：“但是你可能来不及了呢，内院的招生据说是今天就结束。”</div><div>“你想多了，维斯特，艾姐根本不是常规生的。”安向阳带着一丝怜悯的眼神落向维斯特，就见他似乎没有反应过来，歪着头想了想，然后突然一下子站了起来：“哎？难道说有邀请函吗？！”</div><div>“是的，所以只需要通过外院考核就能直接成为内院生。”</div><div>“请、请教阁下……如今的等阶是？”维斯特的声音有点颤，连敬语都用上了，明显是难以置信导致的。</div><div>“啊，我是赤金十二等。”封艾羽抬起手指，指尖燃起一束魔法火焰，正是赤金色——</div><div>“果然被吓到了啊，维斯特。”安向阳抬手拍了拍他的肩膀，一副非常能理解他的表情。</div><div>维斯特和他虽然从下级位面前来，还不是外院的学员，但对于平时的魔力等级还是心里有数的，即使是面对外院生、甚至内院生也好，都对自己金色十等的水平还是挺自信的，毕竟金色十等已经是风委部都可以入门的等阶了，半数以上的内院生也就是白色七等和银色八等左右的水平。</div><div>至于赤金十二等更是少得可怜，听说过的也就那位风委部部长和学生会会长两人，哪怕将深藏不露的隐士计算在内，也绝对只是个位数。</div><div>“有那么夸张吗？”偏偏眼前的封艾羽还从来没有这种自觉，导致长期和她并肩作战的安向阳都逐渐习惯了被打击到吐血。</div><div>就是可怜了维斯特，现在还在被支配的深渊无法自拔——哎？人嘞？</div><div>刚想再拍拍维斯特的肩膀劝他振作，安向阳就发现人不见了。一抬头，维斯特已经满眼星星：“还请前辈参加考核的时候务必带上我同行！”</div><div>“前辈什么的，总觉得哪里奇奇怪怪的……你不嫌弃的话就跟安迪一样叫我艾姐就好了。”</div><div>“好的，前辈！”</div><div>…………</div><div>纷乱的桌面已经有许久无人整理，堆满了各种各样的文件，甚至有些已经被风吹得满房间都是，站在床头的御姐却仿若不知，只是望着窗外被阳光照亮的庭院发呆。</div><div>恰在这时，敲门的声音响起，随后传来了属于少女的声音：“命姐，学生会那边——”还没说完，御姐的声音便打断了她的话：“不是特别重要的事情，仙霖你就看着处理吧。”</div><div>“我又擅自决定可以吗……”似乎不是第一次发生这种事了，仙霖的声音有些失落，却并不出乎意料。御姐的话中则是满满的不容置疑：“交给你了。”</div><div>“知道了。”在门外应了一声，仙霖转身离开。</div><div>而房间内，御姐的目光始终未曾移开过，身后却不知什么时候出现了一个人影。</div><div>“你会来这里，真是出乎意料，尤利卡。”似乎早就察觉了一般，御姐终于转过了身，紫色的双眸望向这名突然出现的客人。尤利卡几乎是立刻就听懂了她话里的意思，随即摇了摇头：“我不是为了你的颓唐而来，君初晓。”</div><div>“那，是为什么？”她问道。</div><div>“「太阳」出现了。”</div><div>“……克洛斯说的？”</div><div>“嗯，主人希望你同时也留意一下「太阳」身边是否有「月亮」。”尤利卡说着，朝她笑了笑：“如果能早日确定「太阳」的所在，你也可以如愿以偿的离开这个位置了。”</div><div>“我会留意的，只希望，那是个性格可靠的孩子就好了。”君初晓轻轻垂下紫眸，毕竟她如今所在的位置是这个风纪委员部的部长，如果对方的性格不够沉稳可靠，她也无法放心的将这份权利交予对方手中。</div><div>“其实我完全不懂呢，为什么你一定要放弃呢？这个位置由你来掌控本该是最合适的。”面对尤利卡的提问，君初晓顿了顿，良久才道：“我是最合适的？呵。”</div><div>“不，仅仅是我姓君这一点，就已经是最不合适的了。”    </div>



<h2 id="第2章：新生「太阳」与南城院校（二）"><a href="#第2章：新生「太阳」与南城院校（二）" class="headerlink" title="第2章：新生「太阳」与南城院校（二）"></a>第2章：新生「太阳」与南城院校（二）</h2><div>因为决定要参加当天的外院考核，并为此在前一天就顺便落脚在了更近的安向阳那里，封艾羽自然是一早就提前到达了这个负责外院考核的指定会场门口。不过出乎意料的是，跟着她一同前来的参加外院考核的不仅是维斯特，还有本该家里蹲的安向阳。</div><div>“居然没有留在你的「龟壳」里做个家里蹲，这还真是令人惊讶呢。”封艾羽随口打趣着，安向阳抬手掐了掐眉心：“就算要家里蹲，那还不得起码是个合法公民？”</div><div>“院外可不是外院啊……要是遇上官方拆迁，那质量可不是能让人放心的程度。”</div><div>“怎么，陨星都能挡得住，还怕官方拆迁？”</div><div>“这边位面又不一样，官方拆迁威力说不定比得上十个陨星……”</div><div>“嘛，这倒也是。”</div><div>闲聊几句，三人依次进入了会场，此时离考核开始还有十分钟，所以此刻会场内的人已经比较多了。但这种情况下还有心情和同伴闲聊的人本就没几个，所以会场内的气氛实际上安静得有些压抑。</div><div>见此，三人自然也没再说什么，安向阳划开了光脑，继续攻略他的萝莉，像是从来不知道紧张为何物一般。相反，维斯特有些紧张的盯着最前方的平台，阴影中站着一名穿着南院制式校服的少女，即使因为距离太远而基本看不清，但多半就是本次来自学生会或者风委部的考核官。封艾羽则是直接打量起周围的面孔来，而她这一看，倒是的确发现了一位与周围十分显眼的少年。</div><div>这里的显眼，不是指他脸上带着的半张面具，而是周围的人都不知为何刻意与他拉开距离，以至于他身边形成了仿若隔离带一般的空旷，极其显眼。</div><div>不过，令她注意到这个少年的原因并不只是这一点。事实上，他应该是全会场除了封艾羽外等阶最高的——紫金十一等，就连会场讲台上的那名应该是考核官的少女的气息也没有他强。</div><div>上午十点，入场正式截止，会场的玻璃门也十分准时的关闭了，一道少女的声音则通过话筒响彻整个会场：“接下来考核即将开始，请将注意力集中到我这里！”</div><div>“我是本次的考核官，风纪委员部的醉仙霖。”</div><div>“考核的内容一如既往的很简单，各位只要一直站在会场内就可以了，不过禁止互相争斗，在考核过程中倒下的人会被直接传送到会场外。”说着，一张古朴的卷轴浮现于她的手中，人群中立刻就有人认出了她的魔武——「亘古·山河社稷图」，以控制与防御著称的传承魔武。</div><div>象征着十等的魔力泛着灿烂的金色，仅仅只是一瞬间，整个会场冰封了起来，魔力等级并不达标的人当即就毫不留情的被冻成了冰雕。而其他人也没有好到哪里去，一个个被冻得瑟瑟发抖，能力稍强的也有些慌忙的运转魔力，只有少数十几人还十分平静，这其中就有封艾羽三人。</div><div>这位名为醉仙霖的考核官和安向阳、维斯特两人的魔力等阶是相同的，而且对方并没有怎么动真格，他们要承受下来还是很容易的。而等阶更高的封艾羽就更不用说了，只不过是这种极端环境而已，倒不如说，如果外院考核只有这种程度的东西会令她十分失望。</div><div>而她的目光正落在不远处，那位自带生人勿近气场的真空带少年也是一脸平静，甚至还取出了一个小笔记本来，也不知道那上面写的是什么，他看得十分认真。</div><div>不过在冰封的幻境中站了许久，封艾羽不由得有些无聊了起来，最后干脆凑到了安向阳身边看他打游戏。</div><div>而就在这个过程中，场内也有将近三分之二的人退场了。说实话，从一开始的冰封到现在逐渐接近绝对零度的气温，能撑得住一个小时的人的确没有多少，就连打游戏的安向阳也没刚刚那么自在了。</div><div>却没成想，在讲台上刷着光脑的仙霖忽然抬起了头看向场内的人，又似乎是感觉人数比预计中的多，一抬手，金色魔力就将冰封的世界又毫无预兆的转化为了燃烧的炼狱。</div><div>一寒一热间，本来就达到极限的人毫无悬念的倒下了，温度从沸水的滚烫程度开始，还在持续上升着。当然，封艾羽仍旧跟没事人一般，她下意识抬头看了一眼刚刚的面具少年，却发现不知什么时候，他的气息节奏突然开始被打乱了。</div><div>但他的魔力运转仍旧正常，体温也没有要随着火海上升的意思，莫非……是对火焰本身有不好的回忆？嘛，总之希望他不会被拖入幻境吧。</div><div>正这么想着，山河社稷图的结界便突然间完全消失了。</div><div>“恭喜你们能够继续下一项考核，接下来请各位自觉的排成一队。”听到仙霖的声音，封艾羽下意识环视了周围一眼——最初入场时至少有上万的人，现在却只剩下了不到千人，看来这场考核的淘汰率意外还挺高的。</div><div>抱着这种想法，封艾羽三人排进了队伍，十分凑巧的是，刚刚的面具少年正好排在了他们三人后面。</div><div>一抬眼就对上了封艾羽望过来的视线，少年似乎吓了一跳，纯黑的双眸里满是惊讶的意味，封艾羽随即朝他一笑：“你的实力似乎很不错呢，认识一下，我是封艾羽，然后这边是安向阳和维斯特·夏尔伯特。”</div><div>“这真是承您谬赞了……在下羽耀光。”说着，他朝三人一拱手，黑眸中流露出一些探究，却在下一刻便立刻收回。</div><div>只是这一眼，他已经看清了名为安向阳与维斯特的两人实力在金色十等，即使等阶比他略低，但已经是如今仅剩的人中排的上号的角色了。</div><div>但令他不敢继续深究而立刻收回视线的，还是与他搭话的封艾羽——他看不透对方的实力，无论是因为对方实力本就高于他，还是携带了什么魔法道具，这个人都必须要谨慎对待。</div><div>当然，无论羽耀光心下脑补了多少内容，封艾羽通通不知道，而且也没打算知道，她只是默默的记下了这个名为羽耀光的面具少年。</div><div>第二轮的考核据仙霖说明，需要每个人各自显现攻击、防御、辅助三种类型的魔法，而听到这个时，封艾羽下意识看了一眼安向阳：“安迪，你没问题吧？”</div><div>也不怪封艾羽会这么问，毕竟安向阳一直以来都是个奇葩，像他这样持有短程攻击性魔武，却偏偏只打辅助的人，恐怕世界上也再找不出第二个来了。</div><div>还好的是，虽然从来不负责输出，但攻击魔法怎么说还是会那样一两个的，即使那些魔法构造本身比较低级，不过加上他金色十等的魔力，想来也还是不会差到哪里去的。</div><div>第二部分的考核持续进行着，又刷下了一部分不满足标准的人。三人中首先考核的是维斯特，作为魔剑士，攻击和辅助魔法的表现自然都是十分出色了，相比起来防御魔法略为欠佳，但也依旧表现出色。</div><div>接下来就到了安向阳，熟练的「龟壳」结界在防御魔法部分得到了极高的评分，常用的辅助魔法也得心应手。</div><div>但是转头到了攻击魔法，站在试炼台上的安向阳一挥手，他的面前就多了一片——小火球？！！！</div><div>负责考核的仙霖差点一口老血喷出来，兄嘚你搞什么鬼？！虽然因为有着金色十等的魔力，所以火球的个头很大，但别以为这样她就瞎到认不出来这只是普通的入门魔法小火球啊？！</div><div>虽说仙霖莫名憋屈的心情最终还是屈服于防御魔法部分的高分，给出了通过，但安向阳看得出来，仙霖那表情完全就是在跟他说：“等着，我记住你了！”</div><div>所以，他记得仙霖好像是风委部的？这之后他犯错会不会被刻意重处啊……</div><div>一边悄悄跟维斯特描述着刚刚仙霖那因为感觉被糊弄而各种不高兴的眼神，安向阳在试炼台的另一侧等着封艾羽出场。却没成想，先上来的并不是封艾羽，而是在那边刚刚认识的羽耀光。</div><div>他中规中矩用着防壁魔法与力量提升这样常见到不能再常见的防御和辅助魔法，但紫金色的魔力却没有遮掩，姑且让仙霖多了些耐心，并没有因为刚刚安向阳的事情扰乱了心情而提前判定他不合格。</div><div>而当紫金色箭矢成型的那一刻，仙霖差点没直接跳起来——不就外院考核，兄嘚你至于吗？！用在最外层包裹着魔力的那个绝对是正气吧？！绝对是那个不知道要锄强扶弱多少次才能积攒一丢丢的正气吧？！</div><div>可怕，紫金强者竟恐怖如斯？！</div><div>仙霖的小心脏有点承受不住的疯狂乱跳，这次外院考核这么猛的吗？先是身高与杀伤力疑似成反比的萝莉，然后是脑回路奇怪到攻击魔法居然直接放毒的少年，再往后是攻击魔法居然用小火球糊弄她的金色十等“绿毛龟”，现在还来了个完全不怕浪费正气的紫金十一等面具人？！</div><div>这些人就算放到内院都是数一数二的实力，绝对是来为难她的吧？！</div><div>偏偏这时，从已完成考核的一侧传来了喧哗的人声。而下一刻，一道身影忽然就出现在了仙霖的身边：“别发呆，把结界替换成山河社稷图，全力以赴，否则很可能会波及周围。”这个声音过于熟悉，仙霖几乎是立刻就认出来了：“命、命姐？！”</div><div>没错，此刻突然出现在仙霖身边的，正是风纪委员部部长，君初晓，字子命。</div>



<h2 id="第3章：新生「太阳」与南城院校（三）"><a href="#第3章：新生「太阳」与南城院校（三）" class="headerlink" title="第3章：新生「太阳」与南城院校（三）"></a>第3章：新生「太阳」与南城院校（三）</h2><div>虽然不知道君初晓为什么突然出现，但仙霖还是先照吩咐做了，然而再抬头时，她却发现身边的君初晓正与试炼台上的最后一名新生对视。不知是不是察觉了仙霖的视线，君初晓的视线移了过来，脸上带着她已经许久没有见到的温柔笑容：“继续考核吧，别让后辈们久等了。”</div><div>“好的……”有些心不在焉的应了一声，仙霖望向试炼台，一头金色碎发的封艾羽正站在那里，不知为何对她轻笑着，仿若披着一层阳光的那名少女，看上去实在是有些耀眼。</div><div>这样的场景，仿佛在哪里见过一样。</div><div>只是当下的场面并不允许她想这么多了，事实上，自从赤金色的光芒从对方的手中溢出开始，全场就陷入了惊人的寂静之中。</div><div>耀眼的赤金色魔力同时构造了三类魔法，面前的屏障是高阶防御类的「神御」，转瞬就到了眼前的无形气浪是高阶攻击类的「空间刃」——君初晓比较满意的默默点了点头，但是令她有些在意的是，她竟然没有发现辅助类的魔法到底是以什么为媒介的……啊，没想到居然是那个吗。</div><div>“向两位献丑了。”</div><div>“不必谦虚，的确是很精彩的展示。”拍了拍因为冲击太大，还没找回自己声音的仙霖，君初晓上前一步，站到了封艾羽面前：“特别是将它作为辅助类魔法的媒介这一点。”看见对方摊开的掌心上因为阳光照射而泛着金色，封艾羽不由得露出了笑容：“最后果然还是被察觉到了呢。”</div><div>“借助魔力的赤金色光芒这些金粉洒出，很不错的主意。”</div><div>“多谢夸奖。”说着，两双眸再次对上了视线，这次则是君初晓先开了口：“下一场考核是实战——虽说如此，外院也没有和你能力相当的学生。”</div><div>“所以，介意和我模拟战吗？”</div><div>“不嫌弃的话，请多指教。”</div><div>见此，刚刚从惊呆场面回神的仙霖脸上难免出现了不可思议的表情。</div><div>她听到什么了？</div><div>那个除了十分重要的事情之外几乎都将风委部事务扔给她，一个人在房间里颓废的命姐，居然这分钟主动提出了要考核后辈？！</div><div>虽说下一项的确是模拟战，也的确没有外院学生能和赤金十二等对战，但是，等阶达到了金色九等以上的人就不用参加了啊？再进一步，由风纪委员部部长考核，这种事情已经完全是风纪委的考核了吧？不对，命姐虽然颓废，这种事情还是很清楚的，难道她本来就是打算让对方进入风纪委员部吗？！</div><div>“先、先等一下！”仙霖不由得叫出了声：“命姐，如果是那个的话，需要先向学生会会长那边提交申请的吧？！”</div><div>“你以为我会没有做好准备就来吗？”说着，君初晓将一张卡片递到了仙霖手中，学生会的印章在纯白的纸面上清晰得有些耀眼——竟然已经连申请都提前准备好了，所以命姐居然难得是认真的吗？！</div><div>再没有理由阻拦的仙霖随即无语扶额，直接转头去带其他的新生前往外院试炼场了，而提前就得知了不用参加最后一场的安向阳和维斯特则直接跟了过去，他们比较好奇的是，为什么封艾羽早就知道这个事实却并没有拆穿君初晓的话，甚至要去参加这场没有必要的考核。</div><div>而同样跟了过来的还有羽耀光，他的理由是不想错过这样能够正大光明观摩赤金十二等之间的战斗，又不会被卷入其中的机会。</div><div>由君初晓空间传送来到的试炼场，据说是专属于学生会与风纪委员部，有着十四阶魔法使留下的结界的特殊试炼场，如今这一结界作为两个赤金十二等对战的地方，将她们两人与外界相隔开，想必也不会因为动静太大而产生波及。而升起的结界外，跟来的安向阳三人则是与来自风纪委员部的另外三人坐在高处俯瞰着场内的一切——其中维斯特甚至比场中两人还要紧张的捏紧了拳头，赤金十二等的战斗，这是世界级的难得一见啊。</div><div>“我不会留情，所以对我的攻击，记得用上全力，否则可能会死掉，这是我不想看到的。”出言警告一声，君初晓虚空一握，就是一柄泛着冰蓝色光芒的太刀出现在了手中。</div><div>这是她曾不顾一切也想要得到的力量的具象化，只属于她的伴生魔武：绝刃·天羽羽斩。</div><div>…………</div><div>“你这家伙，别以为成了南院风委部的部长就能怎么样，剑无论再怎么锋利，什么时候都不过是把剑而已！”</div><div>“呵呵，别忘了，你那个废物姐姐还留在君家——君家就连一条狗都比她强。”</div><div>…………</div><div>看着眼前那双紫碧玺般的眼眸中情绪渐渐褪去，整个人仿佛与手中的刀刃融为一体，封艾羽不由得眉头一皱，那样明明活着却像是死了的，和杀戮工具一样的姿态，令她实在颇为讨厌。</div><div>她其实从发现对方是赤金十二等时，便猜到了眼前的人是风纪委员部的部长，自然也同样知道对方提出模拟战是出于什么想法。</div><div>虽然并不是因为打算加入风纪委员部而接受的，但是在这里留下也没关系的吧——直到像那个时候，那个人对她所做的一样，从鸟笼中将眼前这个本该翱翔于世界间的雄鹰放飞为止。</div><div>现在，感觉稍微能够理解你的心情了呢。</div><div>这种不想让其他人像曾经的自己一样的心情……</div><div>“君初晓，赤金十二等魔法使，请指教。”</div><div>“封艾羽，赤金十二等魔法使，请指教。”</div><div>说着，一对黑白短刃出现在了封艾羽手中。下一刻，两人的距离便拉到了近乎为零，可却并不是君初晓的行动，而是在一瞬间封艾羽就出现在了君初晓身前用双刃紧紧锁住了太刀，并以超乎想象的柔度朝着君初晓的身后翻去。</div><div>“「炎裂」。”近在咫尺的魔法发动让封艾羽不由得佩服起君初晓精准的预判，双脚还没触地，便再次以凌空的状态发动了空间魔法——然而，她似乎少计算到了什么。魔法刚刚发动成功，还未结束便扑面而来的锐利感让她再次本能的叠加了空间魔法。</div><div>这次，封艾羽没有再放松，对方同样能够使用空间魔法这一点令她感到不知名的兴奋从心底浮现，她嘴角勾起了笑容，从原来的高速移动中突然扭转了方向，以攻代守，两柄刃尖正中刀侧的一点：“「吟唱省略·单向解离」！”</div><div>明显感觉到手中的绝刃在不停的震颤着，君初晓毫不怀疑，她如果再不松手，就会被那一点式的进攻直接击碎。所以她干脆直接松手，任由魔力构筑的绝刃消散，借空间魔法拉开距离以重新构筑手中的绝刃：“「吟唱省略·苍之一闪」！”</div><div>重型巨剑突然凌空劈下，让封艾羽不由得吓了一跳，这种说什么也知道不能硬接的魔法，对她来说也就只剩下一个选择——扛不住还不能跑吗？一瞬间的三个连续转移在场内留下好几个虚影。虽然一时无法确认目标，但君初晓的动作却没有任何迟疑的握着巨剑腾空而起，一片剑雨便随后铺满空中：“「吟唱省略·天之逆鳞」！”</div><div>“哇呜，好过分，居然用范围攻击对付近程短兵！”有些郁闷的甩出好几个防护屏障，在理所当然没能起作用后，封艾羽却没有认输的意思，只是有些无奈的叹了口气：“这算是在逼我用魔武吗……”话音未落，她的身影便凭空消失了，只听她的声音在剑雨的冲击中传来：“「撕裂黑暗之曙光，剥夺灵魂之碧绿，以我之名，承以赤羽一族之荣耀，魔武解放——狱镰·伊伽莉玛！」”</div><div>“不是吟唱省略？”这下不仅是君初晓，就连场外的三人也愣了一下。按常理来说，魔武解放的吟唱省略应该是所有魔法中最容易实现的，但明明其他魔法都能使用吟唱省略，她却偏偏在这么紧张的战斗中还通过魔法吟唱实现魔武解放？！</div><div>金属碰撞的声音不绝于耳，如雨倾泻而下的利刃带着青蓝的光芒，以挥舞碧绿的战镰为盾，令灵魂颤抖的气息不断从那柄战镰上传来，君初晓神情骤然一凛，灰暗的紫色眸恢复了原来的模样。</div><div>两柄魔武相接，其本身的碧色与苍蓝交错，碧色与紫色的双眸也再次对上了视线，忽然间相视一笑，两人重新拉开了距离。</div><div>“你的确很不错。”</div><div>“你也一样。”</div><div>伴随着消散的两柄魔武，面对面的两人向前迈步，封艾羽先一步朝她伸出了手：“新生封艾羽，很高兴认识你。”回握着对方的手，君初晓也露出了更为稳重一些的笑容：“现任风纪委员部部长君初晓，欢迎你的加入。”</div><div>“今后还请多指教，命姐。”</div><div>“嗯，请多指教。”</div><div>如果真同克洛斯所说的一样，这次的新生之中的确有着对方所寻找的「太阳」存在，那么君初晓相信，那毫无疑问是眼前的这个人。</div><div>这真是个比预料中更加耀眼夺目的，照亮着「世界」的「太阳」啊。</div>



<h2 id="第4章：新生「太阳」与南城院校（四）"><a href="#第4章：新生「太阳」与南城院校（四）" class="headerlink" title="第4章：新生「太阳」与南城院校（四）"></a>第4章：新生「太阳」与南城院校（四）</h2><div>预料之外的成为了风纪委，本来其实通过邀请函就毫无悬念的事情变得更加板上钉钉。如果一定要说有什么对封艾羽来讲有些失望的事情的话，那么就要属与安向阳、维斯特两人的分别了——风纪委员所属需要直接进入内院学习，但在已经超出了内院考核期限的情况下，没有邀请函的那两人接下来想必是得在外院修满一年的。</div><div>而按安向阳的打算，这样进入外院后就算是正式有了合法的身份，只要不违法违纪，他也不用担心被抄家（误）了，所以进不进入内院，对他来说其实没差。维斯特倒是在离开的时候非常不舍，一脸认真的握着拳头说了类似于：“我一定会抓住各种机会，尽可能早的进入内院！到时候还请前辈多多关照。”之类的话。</div><div>当然，封艾羽也没有独自一人踏进内院。跟着安向阳他们一起前来观摩战斗的羽耀光在这之后直接拿出了邀请函，与封艾羽一同进入内院，而负责引导他们的则是之前负责外院考核的仙霖。</div><div>“说起来，能向你打听一下学生会的千景会长的事吗？”</div><div>“会长的事情吗？”仙霖有些出乎意料的看向了问出这话的封艾羽，又记起什么似的点了点头：“的确，你也是赤金十二等的话，对会长感兴趣也是应该的。”</div><div>“不过……”仙霖话音一转，勾起一个狡黠的笑容：“我推荐你亲自去看比较好呢！实际上我们现在正是要去找他，这个时间点应该是正在大礼堂进行内院新生入学演讲。”</div><div>“是这样啊。”封艾羽应了一声，她总觉得仙霖这个笑容里还有别的意思，但对方要刻意卖关子，她也不打算非要问个水落石出。实际上，会问起千景晴的事，并不是仙霖所想的对其他赤金十二等魔法使的好奇，而是因为在下级位面时，将邀请函交给她的那位魔术师——百里朔夜拜托她给千景晴带了封信。对方本身帮过她很多，所以她当时也就直接答应下来了，只是为什么对方明明实力足够，却不愿意直接到这里来，这一点还是令封艾羽有些许的在意。</div><div>不过现在，封艾羽更加在意的，是从刚刚开始就一直望向这边的羽耀光的视线。</div><div>“有什么事吗？”她最终还是没能忍住，问出了声：“你好像从试炼场出来之后就一直看着我的样子，是看到什么了吗？”</div><div>听此，羽耀光一愣，随即立刻撇开了视线：“没，只是有些在意......”</div><div>“在意什么？”</div><div>“就是……你的魔武是狱镰的话，也就是那个赤羽家的人吧？”羽耀光说着，将刚刚拿到手的校徽递到封艾羽眼前：“明明有着这么大的家族背景，为什么你不姓赤羽，而姓封？”听此，封艾羽一愣：“狱镰……和赤羽家有什么关系？”</div><div>“哎？！你不知道吗？”这回换羽耀光和仙霖同时发出了不可思议的声音，仙霖随即立刻补充道：“伴生魔武因为和个人的灵魂特质有关，通常会家族遗传，而上一个持有狱镰的人，是创立了赤羽家的初代风纪委，赤羽律大人哦？”</div><div>“是这样的吗？不过说起来，魔武解放的吟唱里也有「承以赤羽一族之荣耀」这样的台词来着……”封艾羽想了想，然后朝羽耀光一笑：“嘛，到底是不是赤羽家的人，我也不清楚的。”</div><div>“毕竟我从小就不知道父母是谁，有血缘关系的亲人之类的也完全没有听说。”说着这样有些悲哀的事情，封艾羽的表情却不见任何伤感，倒是还露出了有些怀念的笑：“非要说有家人的话，大概也就是安迪了，啊，就是刚刚那个一头绿毛的萝莉控，我一直以来都承蒙他关照呢！”</div><div>“……”听她这么说，羽耀光沉默了一会，突然一个土下座，十分诚恳的跪在了仙霖和封艾羽面前，简直把两人吓了个够呛：“擅自提起了这种事，真是抱歉！”</div><div>“没、没事的啦，其实我这样也还挺自由的，可以尽情做自己喜欢的事情。”</div><div>“……”</div><div>之前的小插曲平息后，三人也恰好到达了大礼堂。不出仙霖所料，面对内院新生的演讲正在进行中，现在也正巧到了学生会长上台的时候。只不过，那个站上讲台的身影让封艾羽一时间有点怀疑她的眼睛——</div><div>“欢迎各位来到内院，并成为真正的南院学员之一，我是学生会长，千景晴。”站在台上发言的，是一个穿着同款女式校服，披着深蓝色长发的少女。但高挑的身材加上高跟鞋，便看上去有一米八左右，似乎之前的君命响都比她要矮上一截。</div><div>“虽然在入学演讲时就说这种话对大家很是抱歉，不过，请记住一点，整个南院都不需要比我到场更晚的学员。”说着，千景晴周身释放出了惊人的魔力气息，压迫得全场新生都有些窒息：“所以，违反以上规则的学员已经失去了这次进入内院的机会。”不过千景晴并没有要停下的意思，继续悠闲的说着：“我知道，在座的人都是外院或者从异世界而来的佼佼者，也许有人会不服教训，但是请你们别忘了，这里是精英汇聚的内院，在这里，一切都必须服从学生会和风纪委员部的统领。”</div><div>“弱肉强食的道理，在外院挣扎攀登的你们应该已经懂了。”</div><div>“而且非常不巧的是，在内院，你们是弱者。”</div><div>“……”台上的演讲还在继续，封艾羽的视线却已经失去了灵魂，一旁的仙霖看到她这个表情，还悄悄的笑了起来，随后拍了拍她的肩膀：“会长的演讲针对的是考核进入南院的常规生，你们不在范围内的啦，别担心。”</div><div>“不，不是这个问题……”封艾羽说着，因为有些难以控制自己的表情，而显得颇为僵硬。</div><div>这个少女到底是谁？她因为曾经跟百里朔夜确定过千景晴的长相，以防信件落入其他人手中，所以她知道，对方应该是一个深蓝色的头发，年龄比她稍大的少年才对……眼前这个，性别就完全不对啊！要说是换届的话，那也不应该是两人用同一个名字吧？</div><div>想到了这里，封艾羽抽抽嘴角，看向仙霖：“那个……仙霖前辈……”</div><div>“前辈什么的，叫我仙霖就好了。”</div><div>“那，仙霖，千景会长，不是男性吗？”听封艾羽这样有些不确定的问着，却见仙霖像是突然反应过来什么似的，随即笑着回应：“是男生没错啊，讲台上的也的确是会长本尊哦？”</div><div>“哦，是这样啊……哎？！”</div><div>“你是才入校的新生，估计不是怎么清楚情况。不过，会长可的确是个超厉害的女装大佬呢。”听仙霖这么说，封艾羽瞬间愣在了原地，我去，南院的学生会长是女装大佬？！她可从来只听说过学生会长是女仆……额，不对，串戏了。</div><div>倒是百里朔夜那家伙，从来就没和她讲过这种事情啊。嘁，等再见到他，自己非得狠狠敲诈（误）他一顿才行。</div><div>“啊，会长的演讲结束了呢。”说着，仙霖拉着刚刚被她一句话就直接石化的封艾羽和羽耀光两人，到幕后与千景晴会面去了。</div><div>而最初见到面前的封艾羽时，说实话千景晴是愣了愣的。</div><div>他几乎是瞬间就注意到了对方身上的魔力气息，准确来说，早在演讲时他就察觉了，他的魔武「歼琴·浮士德琴弦」擅自与会场中某人的魔力气息发生了共鸣，只是没能确定，这样的魔法气息到底是来自谁身上。</div><div>但是在如今面对面的距离下，他却是再怎么也不可能会认错了——这是属于「狱镰·伊伽莉玛」的气息。</div><div>听过仙霖的说明，千景晴再次将视线落在眼前的封艾羽和羽耀光身上。</div><div>羽耀光身上的正气积累和仙霖所说的一样令人难以置信，但直觉让千景晴对他表现出来的性格感到有些违和。</div><div>而封艾羽，之前君初晓突然来找他要申请的时候，他还有点疑惑，这会切实的见到了人，倒是能够理解了。</div><div>“这么说来，你就是君部长那边的特招生吧，有什么事吗？”</div><div>听千景晴这么问了，一边从随身空间中取出信封递给他，封艾羽一边说着，略显无奈的笑了笑：“其实是我之前的一个朋友让我捎封信过来，说交给学生会长，还让我转告，说「他很快就会回来了」之类的。”千景晴听此，有些疑惑的接过信封，随即又想到什么似的立刻拆开——看着信笺纸上的落款，果不其然，是如他所料的名字之一。</div><div>“多谢你的转告，信我会详读的。”</div><div>“嗯，那么就是这样。”将该传达的事情全部传达完，仙霖便将两人带向了宿舍。而千景晴则是在他们走后重新展开信纸，不知不觉的微微露出了笑容：“终于舍得回来了啊，朔……不过看你的样子，大概也完全没能想到，那个叫封艾羽的少女，会在入学当天就成为风纪委员吧。”</div><div>“赤金十二等的魔力等阶，和君初晓势均力敌的实战能力，而且性格也比较可靠，看来可以作下任部长考虑了。只是可惜了君初晓，被区区一个君家所束缚。”</div>



<h2 id="第5章：新生「太阳」与南城院校（五）"><a href="#第5章：新生「太阳」与南城院校（五）" class="headerlink" title="第5章：新生「太阳」与南城院校（五）"></a>第5章：新生「太阳」与南城院校（五）</h2><div>之前也提到过，南城院校并不单单只是一座魔法院校，而是一个独立位面的中心，分布呈现以禁书塔为中心的四个圆环区。</div><div>而从外向内数的话，第一圆环区便是封艾羽与安向阳一开始汇合的驻地，也是刚刚从下等位面前来不久的各类人群所聚集的地方，通常被称为第五区。</div><div>由于各个位面的状况都各不相同，所以第五区并不受南院法则管理，也没有各种福利，算是灰色地带，因此趁机作乱的人也不少，这也是为什么安向阳会选择参加外院考核的原因之一。</div><div>但从第二圆环区的外院部分起，就需要严格遵守校规了。南院的外院完全是一座繁华的都市，以高等的科技与魔法结合，实现着与其他位面都十分相似的运作，各种行业也都应有尽有，生活也比第五区更加舒适、平稳。</div><div>再向内一层，则就到了南城院校真正的主体，精英的聚集地——第三圆环区，南院内院。内院有着真正的学院设施，既负责教育，也同时进行着各类研究。同时，也只有正式成为内院学员之后才被允许穿着黑白配色的制式校服外出，在外院有资格享受特别的优待。当然，内院招生的要求也会更加严格，虽然二十岁以下达到黑色七等就能得到暂时进入内院的资格，但要成为内院学员却至少达到白色八等。</div><div>至于第四圆环区，便是风纪委员部和学生会成员的生活区——除了持有居住权的风纪委员和学生会之外，只有极少部分内院学员被允许进入的地方。与普通内院学员不同，风纪委员部的制式校服为红白或红黑配色，而学生会则是蓝白或蓝黑配色，在制服上的这一点不同也使持有特殊职权的他们的身份更加容易分辨。</div><div>而封艾羽此刻便在第四圆环区，以新生风纪委员的身份。</div><div>顺带一提，因为风纪委员宿舍与普通的内院生宿舍并没有被安排在一起，所以与封艾羽同行的只剩下负责带路的仙霖。</div><div>在这之前，封艾羽倒是对第四圆环区姑且也有所耳闻，但实际站在这片土地上，还是令她感到有些不可思议——</div><div>“我说，仙霖……这里，这个第四圆环区究竟有多大啊？”</div><div>“哼哼，占地面积可是和整个内院一样大呢，被吓到了？”仙霖似乎很高兴看到封艾羽惊讶得不知道说什么的表情，继续解说道：“不过，这其实还包括禁书塔周围立入禁止的第五圆环区，只有历届风纪委员部部长和学生会的特殊人物能够自由出入，对普通成员都不开放，可以说是南院的绝对禁地呢。”</div><div>“是这样啊。”封艾羽点了点头，看向距离她们有些遥远，却因为本身高耸入云而十分引人注目的黑色建筑：“那就是禁书塔吗？感觉几乎看不到顶呢。”</div><div>“对，据说是十四阶的那位留下来的，南院不会与其他平行的上级位面产生碰撞都是多亏了它的排斥力场。”说着，仙霖朝她招招手：“别这么在意啦，快来，我先带你去风纪委的宿舍，晚一点你也大家见个面吧。”</div><div>“好的！”封艾羽应了一声，随即便快步追了上来，与仙霖并肩：“话说回来，仙霖，现在部里有多少人啊？”</div><div>“嗯……加上我们的话，就是七个人。”仙霖随即扳着指头数了起来：“学院内有命姐、我和御七，还有与小艾你同级，但稍早一些入部的祈栎和临渊。”</div><div>“那还有一个人？”</div><div>“嗯，但是小满因为能力特殊，向命姐申请了驻守边境，大概要等之后才能见到了。”仙霖正说着，一片花田与中央坐落的洋楼出现在了两人的视野中，她随即扬起笑容：“我们到了哦。”</div><div>“这片花田还真是惊人……现在明明都已经入秋了，不是吗？”</div><div>“哼哼，这些孩子们可不止是反季节呢。”仙霖颇为自满的挺起胸膛：“它们全部都是我培养的魔植，看上去或许只是一朵娇娇弱弱的牡丹，但只要给一点魔力，转眼就能变成食人花。”</div><div>“这个伪装很厉害啊，像这样的话，魔力也基本感知不到，仙霖还真擅长培养魔植呢。”用有些羡慕的语气说着，封艾羽轻轻拨弄着眼前一株混在其中的含羞草的叶子，看它慢慢卷起：“像我就不行了啦，几乎是养什么死什么……连仙人掌都没能成功存活。”</div><div>“是吗？”仙霖不是很理解的歪歪头：“说不定是小艾与它们步调不一致吧。”</div><div>“嗯，大概是吧。”</div><div>穿过花田来到洋楼，一层的木框玻璃门窗让被照亮的室内充满了阳光的气息。进门的左侧，主色调为橙黄色的窗帘与沙发给人一种暖意，而小桌上的绿色盆栽则是更添一份清新。右侧则不知出于什么考虑设置了酒柜与吧台，晶莹剔透的无色玻璃杯与酒柜上五颜六色的酒瓶标签达成着奇妙的和谐。再往里一些，则能够见到通往楼上的旋梯、挂有厨房字样挂牌的门与铺着干净桌布的长餐桌。</div><div>总而言之，是给人感觉十分温柔，而且不知为何有些怀念的环境。</div><div>哎？明明是第一次来，为什么居然会下意识用上了怀念这个词？</div><div>封艾羽摇了摇头，把突然冒出的奇怪思绪都先甩到了一边，听仙霖介绍着这里的一切：“那边是餐厅与厨房，一看就知道的，然后这边就是休息区，小艾如果一个人在房间里无聊的话，也可以下来跟我们一起打打扑克什么的。”</div><div>“吧台那边则是命姐的领地，她不在的话最好是不要动，啊，顺带一提，虽然不常见，但命姐调酒实在是超好喝的！”</div><div>“……”仙霖有些兴奋的说了一堆，封艾羽也没打断她，就这样静静听着她说，偶尔搭上一两句话。</div><div>从刚刚开始，这种怀念的，令人安心的感觉，仿佛她很早之前就一直住在这里了一样。但是她的记忆里却并没有任何与这里相似的场景，实在是不可思议。</div><div>“从二楼开始，上面都是宿舍，只要是没有被挂上名牌的房间都可以选择，除了楼层和位置以外其他都没有区别，还可以在入住后凭个人意愿用魔法修改室内装饰，同时也都是空间不小的单人间哦！”</div><div>“我和御七、祈栎、临渊都住二楼，命姐和小满的房间则在三楼，小艾也考虑下吧！”说着，仙霖视线忽然扫过了大厅里的钟表，随后可爱的朝她吐了吐舌头，然后就立刻有些风风火火的冲了出去，声音从远处飘来：“啊，居然都已经这个时间了，我还要给御七那边送东西过去，这会就不陪你上去了哦，一会见。”</div><div>“嗯，一会见。”站在原地朝离开的仙霖的背影挥了挥手，封艾羽轻轻笑了，不久之前，这个人还是她的考核官，这会就已经成为了说得上是熟悉的前辈，这么想来还是有些不可思议的。</div><div>封艾羽随即踏上了二楼，正对楼梯口的201室和210室的木牌已经分别写上了「木祈栎」和「江临渊」的名字，而「醉仙霖」与「殷御麒」的名字则是写在了左边走廊尽头的205室与206室。</div><div>“之前总听仙霖叫那个人御七，原来名字是叫御麒啊。”自言自语着回到楼梯口，封艾羽转身上了三楼，那份越加强烈的既视感令刚刚略为消散了些的怀念感又涌上心头。</div><div>这次，她走向了左边的走廊，其中有名字的，只有走廊尽头倒数第二间，307室门口写有「君初晓」的名字。而右边的走廊则是仅有305室门口写着「司陵满」的名字，大概就是仙霖口中那个主动申请外出驻边的风纪委员。</div><div>回过神来时，封艾羽发现自己不知为何已经的站在了303室门口，抱着有些复杂的心情，她按仙霖教的方法激活了303室，在门牌上留下她的名字，随后推开了房门。</div><div>那样扑面而来的，是极其熟悉的房间味道和不用看也知道是怎样的房间布局，甚至，连书架上的书，仿佛都熟悉得能顺背出名字一样。</div><div>唯一出乎意料的，只有桌上那份被空白相框压着的，在阳光下泛着金色光芒的纸，以及上面那简单的五个字——</div><div>「欢迎回来，羽。」</div><div>“……我回来了，影。”脱口而出的言语令自己也愣了一下，虽然不知道为什么，但仿佛这样回答是理所当然的，察觉到这一点，封艾羽不由得下意识的皱了皱眉。</div><div>究竟是为什么呢？为什么，她总觉得她似乎忘记了一件事，一件和她的生命一样，甚至比之更加重要的事情。</div><div>可一旦细想起来，却什么头绪也没有。</div><div>“到底是……怎么回事？”她不由得这样问着自己，但却根本无法得到答案。</div><div>而等她再度看向桌上时，那张写有字迹的纸却消失了，明明没有睡着，却像是经历了一场突如其来的梦。</div><div>但那份理所当然绝不会是错觉。</div><div>这样去想的话，解释就只剩下了“她的记忆出错了”这唯一一种。</div><div>但问题在于，精神系是她的第一辅修，如果通过人为手段影响她的记忆，要么对方实力高出她太多，比如传说中的十四阶那位，要么是她自愿被人篡改记忆，要么——是她对那个擅自篡改她记忆的人根本毫无防备。</div>



<h2 id="第6章：新生「太阳」与南城院校（六）"><a href="#第6章：新生「太阳」与南城院校（六）" class="headerlink" title="第6章：新生「太阳」与南城院校（六）"></a>第6章：新生「太阳」与南城院校（六）</h2><div>“那么，为了欢迎三位新人的加入——干杯！”</div><div>装有饮料的透明玻璃杯发出清脆的碰撞声， 柔和的气氛间穿插着属于美食的芬芳，填满了整个一楼大厅。</div><div>“我和大家都认识，所以自我介绍就从仙霖那边开始吧。”被要求坐在主位的君初晓朝左手边的仙霖一抬手，刚刚咬下一口炸虾的仙霖一愣，随即有些无奈的笑了起来：“命姐是在报复座位安排吗？这可不像是部长该做的事情呢。”君初晓也有些揶揄的一笑：“这可说不上什么报复，不过是部长的判断而已。”</div><div>“嘛，我是内院二年生醉仙霖，醉梦仙霖的醉仙霖，这个姓氏仅此一家，如有雷同纯属抄袭！今年十八岁，实力在金色十等，虽然是基本和你们一样的水准，不过要是认真的想叫前辈也可以的！”仙霖说这话的时候完全是看着对面除封艾羽外的另两人，然后才转头扫过封艾羽，补上一句：“当然，某个实力超过我的新人还是别叫前辈了，会感觉超丢脸的。”说完，她极其熟练的拍了拍身边同龄的少年：“该你啦，御七。”被称作御七的少年扯了扯嘴角，然后朝仙霖一指，一副似乎要跟新人扒一扒这个所谓“前辈”的样子：“知道她为什么姓醉吗？这家伙明明是女生却完全是个酒鬼——”</div><div>“你倒是做你的自我介绍啊！”说着，仙霖有些不高兴的伸手去揉他那头棕色碎发，似乎不将它揉成鸡窝就誓不罢休。</div><div>“嘛嘛，先扯掰两句呗，谁让你自己不提的。”御七从头上扒拉下仙霖按过来的手：“我是这家伙的青梅竹马，内院二年生殷御麒，就是和段字长得很像的殷，御下有方的御，麒麟的麒，不过因为在家里排行第七，平时叫我御七就行，和她同岁，也是金色十等魔法使。”</div><div>“青梅竹马啊，你们关系真好呢。”封艾羽不由得这么脱口而出。仙霖和御七两双蓝眸却同时望了过来：“嘻嘻，是时候也该你了呢——”</div><div>“提问！已经有喜欢的男生了吗？”</div><div>“你和那个安向阳真的只是家人吗？”</div><div>“说起来你这样的风格，有被女生告白过吗？”</div><div>“……”</div><div>像是被触动了什么奇怪的机关一样，仙霖叉起一根炸虾当作话筒，递到了封艾羽嘴边，御七则是不知道从哪里掏出来了小本本，一副准备切实记录封艾羽的回答的样子。</div><div>“额……”要说的话一时梗在嘴边，见封艾羽这个表情，君初晓也不由得笑了笑：“这两人，似乎对八卦情有独钟的样子，虽说的确是前辈，如果不想回答的话就算了吧。”</div><div>“也不是什么不好说的……该说是完全被吓了一跳。”封艾羽笑了笑：“我没有那种喜欢的人，安迪也的确只是我的家人，类似于兄弟的那种，被女生告白的事情发生过，但绝对不会交往的。”</div><div>“真遗憾。”仙霖无奈的摊了摊手。</div><div>“我是内院一年生封艾羽，封印的封，艾草的艾，羽翼的羽，十六岁，赤金十一等魔法使。”</div><div>“好小！”仙霖几乎是下一刻就惊呼出声，同时叫出声的还有一旁的御七：“你还是未成年吗？！”</div><div>就连君初晓也不由得投来了惊讶，不，堪称被惊吓的表情：“十六岁的赤金十一等啊……比我还要早两年……”</div><div>“不可思议。”身旁另外两名新人中的少女面无表情的说着，其中的少年则是吞了口唾沫：“到底是怎么做到的？这就是南院本地人的才能吗？”</div><div>“不，我其实是从下界来的……”封艾羽的话音未落，周围便陷入了惊人的寂静。随后就是御七突如其来的一句：“我不相信！不可能！”</div><div>“这绝对有问题吧？！下界那种魔力都稀缺的地方，你到底是怎么修成赤金十一等的？！”仙霖也没能忍住的彻底咆哮了起来。</div><div>“这就是、奇迹？”三无少女说着，看向了她身边的少年，对方有些僵硬的点点头：“嗯，我想大概没错了。”</div><div>“是、是吗……”没想到一句话会引起这么大的轰动，封艾羽默默闭上了嘴，她还是别擅自开口了。</div><div>这波余震一直到五分钟后才姑且平静下来，但所有人看封艾羽的眼神都充满了不可置信，看得她背脊发凉：“那个，还是让剩下两位发个言好吧……”</div><div>听她这么说，所有人才将视线移开，仙霖长呼一口气，平定下心情，才看向了最后两人：“那么，到你们了。”</div><div>“内院一年生木祈栎，十七岁，金色十等。”过于简短的介绍结束，三无少女木祈栎顿了顿，良久又显得非常刻意的补上：“树木的木，祈祷的祈，栎树的栎。”而与她相比，身旁的少年就要略显活泼一点了，虽然似乎还是有种莫名其妙的死板就对了：“同为内院一年生的江临渊，长江的江，登临的临，深渊的渊，十七岁，金色十等，今后还请前辈们请多指教。”</div><div>明明入学更晚却已经被直接划到了“前辈”范畴的封艾羽：……</div><div>“需要提前说明一下的是，除了在场的我们以外，风委部这边还有两个特殊的名额。”看所有人都完成了介绍，君初晓干脆就将这件事先提出来了：“一个是自请驻边的内院二年生司陵满，偶尔也会回到这边的宿舍来。”</div><div>“那另一人是？”</div><div>“另外一个是因为能力不稳定而无法成为正式风纪委的外院毕业生，莫笙箫。”</div><div>“外院生？”江临渊一愣，不是属于风委部都能够直接进入内院吗？</div><div>“能力不稳定是指……”封艾羽也有些在意的问道，君初晓随即看了她一眼，解释道：“他必须魔武解放后才能显现真实等阶，为紫金十一等，但使用普通魔法时的等阶只有黑色六等，无论是内院考核的标准，还是风委部的考核标准，都完全无法达到。”</div><div>“但是紫金十一等是他切实的等阶啊，怎么会……”</div><div>“据会长说是心理作用导致的，因为始终有着想要隐藏的想法，之类的。”君初晓说着，紫色的眸中流露出些许的复杂神情，然后话音一转：“总之，现在他还不是正式成员，但是会长承认他作为风纪委的权利，只是行事需要比你们更加谨慎一些，如果之后你们在哪里遇上的话，也互相协助一下吧。”</div><div>在提到莫笙箫的情况时，封艾羽有些敏锐的在君初晓眼中看到了不知名的情绪，似乎有些失落，却又带着些无奈。就好像，她并不希望这个人成为风纪委，但却又没有理由阻止对方一样。</div><div>与此同时，在平行位面的「神之箱庭」第九层。</div><div>高贵的王座之上，赤色长发的少女单手撑着脸，看向面前被投影出来的画面，正是在风委部宿舍一层大厅聚餐的君初晓六人。随后，画面突然定格在了某处，少女也随之露出了浅浅的笑容：“不愧是律啊，无论轮回转世多少次，即使失去了各种各样的记忆，你依旧如此耀眼，让人一瞬间就能够认出。”听她这么说，坐在肩上的人偶有些疑惑的歪了歪头，如果君初晓在这里的话，想必能立刻认出这个最初带话给她的人——不是尤利卡又是谁？</div><div>“主人，现在的律身边没有缪呢。”</div><div>“不用担心，她们的命运线是交缠在一起的，在特定的时间一定会相遇，这一点不必怀疑。”她似乎不怎么在意尤利卡所说的事，只是思考着什么，无意识的敲着王座的扶手：“尤利卡，你应该只抹去了她关于我们的记忆吧。”</div><div>“哎？没错啊，那个时候律也没有其他的记忆吧。”说着，她像是想起什么似的，突然从少女的肩上跳了起来：“说起来，那个时候我在律的意识海里找到了更强的记忆封印，比「神之力」还要强大的那种！”</div><div>“比「神之力」还……？！这件事，之前怎么没听你说过？”</div><div>“因为、因为，缪说这是特殊的记忆，而且缪的意识海里也有这样的封印，我想着大概是两个人之间的一些想要忘记的回忆，就没有太在意……”见尤利卡有些紧张而慌乱的解释着，的确不像是在刻意隐瞒的样子，少女皱了皱眉：“既然如此，律和缪是知道这件事的，也就不可能了。”</div><div>“什么不可能啊？”</div><div>“没什么，如果是她们的话，无论命运变得多么残酷，也一定能跨越的吧。”弦从王座上起身，望向天际的边境线，那里是那场至今令她无法释怀的惨剧所发生的地方。一切就因为那场受人利用而打响的无谓的种族之争，她失去了重要的挚友 ——</div><div>“放心吧，律，无论是南院还是神庭，无论是人还是神，欠你们的，我都会全部替你和缪讨回来。”</div><div>“……以「诸神之神」的克洛斯之名。”</div>



<h2 id="第7章：新生「太阳」与南城院校（七）"><a href="#第7章：新生「太阳」与南城院校（七）" class="headerlink" title="第7章：新生「太阳」与南城院校（七）"></a>第7章：新生「太阳」与南城院校（七）</h2><div>入眼的，只剩下赤红一片。</div><div>在这种地方持续着杀戮，到底是从什么时候开始的，到底是为了什么样的事，少女早就已经忘记了。</div><div>只知道要杀掉所有靠近的生物，任凭鲜血染红整个房间。</div><div>直到有一天，自称实验员的人出现在了她的面前，告诉她，她的心脏是他们的试验品，要她将心脏交出来。</div><div>她愣住了，为什么活生生人会被当作试验品呢？她简单的脑回路无法理解这种残酷的现实。</div><div>但毫无疑问的是，她拒绝了。因为她知道没有心脏自己会死掉，因为她知道死掉之后会变得和她杀掉的那些人一样……她必须要活下来，虽然不知道为什么。</div><div>所以，她抢在被夺走心脏之前，选择了首先夺走他们的生命。</div><div>回想起来，这大概是她所做的最正确的决定——即使梦魇般的过去挥之不去，但只要再次睁开眼，一切就能够回到这样仿若是奇迹般的，平淡却令人安心的日常之中；即使回忆的角落堆满了肮脏的过往，只要身边的人还能扬起笑容，那个像太阳般笑着，仿佛没有忧愁的封艾羽就永远不会消失。</div><div>…………</div><div>虽说在这之前君初晓说过内院的课程其实没必要去听，但是想着擅自翘课什么的会不会不太好，封艾羽姑且还是和木祈栎两人一起去了。</div><div>结果就是，她一个赤金十二等在那里格格不入的，一边感受着被人围观的目光，一边听着台上的讲师分享怎么将魔力等阶突破到紫金十一等。</div><div>果然啊，她就完全不该去。</div><div>（君初晓：不听命姐言，吃亏在眼前。）</div><div>“哈哈，小艾完全想太多啦。”听过对方今天的经历，仙霖非常没有形象的笑了起来：“不用参加平时的那些课程是风纪委的特权，只要每个学期最后的考试都能够通过就没问题。”</div><div>“顺带一提，正在跟你说这话的这家伙就经常被要求补考。”</div><div>“御七！！！”话音未落，沙发上的靠枕一下子砸在御七脸上，仙霖一脸委屈的鼓起腮帮子：“还不是因为你擅自报了那个讨厌的古语研究课啊！”</div><div>“古语研究？还有这样的选修内容吗？”</div><div>“嗯，不过要等成为二年生才有，一年生的教学都是关于实力提升的，有时候还需要外出实战。”说着，仙霖随意的摆了摆手：“哎呀，反正这方面小艾肯定没问题的，只要小心谨慎一点的话，在学期末的竞技场实战拿到第一是板上钉钉啦。”像是突然想起什么似的，仙霖突然一拍脑袋：“说起来，新生入学后，今年下半年的「学院狩猎祭」也要开始了啊！”听她提起这一点，御七也点了点头：“嗯，大概就是这个时候吧，我记得外院那边的通知，学生会似乎已经发下去了来着。”</div><div>“「学院狩猎祭」？那是什么活动吗？”封艾羽在一旁不由得好奇的问了起来，虽然身边木祈栎的和江临渊两人也是新生，不过看上去却似乎没什么要开口问的意思，倒不如说，从刚刚开始，这两人就完全没有要加入聊天的意思。</div><div>“「学院狩猎祭」，这次更具体一点应该说是狩猎祭中的「秋猎祭」。就是这段时间正赶上空间边境最为不稳定的时期，所以学院会直接组织学员前往南院外虚空狩猎区进行为期三日的狩猎。”</div><div>“而且，为了实力均衡，内外院会一起行动，这可是除了学院祭以外唯一内外院同时进行的活动呢。”</div><div>原来，由于南城院校的空间是人为创造出来的，所以和其他自然形成的有所不同，不仅会受到虚空排斥，还会不停的吸引众多被超出其他空间承受极限的力量源。</div><div>这些力量源的形式各有不同，有生命，也有物体，无法一概而论。非生命体没有固定方向，不过由于只是单纯的无规则运动，和其他一切产生碰撞，处理起来也不是很困难。</div><div>而归属于生命体的，又大致被分为这样三类：有意识也有形态的，无意识却有形态的，以及无形态却有意识的。其中有意识也有形态的，会被南院的空间所接纳，也就是和封艾羽一样来自的异世界的佼佼者，或是被吸引来到南院的非外院居民。</div><div>而无意识却有形态的，以及部分无形态却有意识的，则会在被非生命体力量源的虚空力场撕扯下破碎或暴走，成为攻击南院空间边境力量的主要组成部分。这一类力量源由于不能通过外力干扰，改变移动方向阻止碰撞，从而必须直接进行歼灭。</div><div>而它们，自然也就是这场「学院狩猎祭」的猎物了。</div><div>通常情况下，「学院狩猎祭」会在新生入校战后举行，不仅是为了维持南院空间的存在，还同时作为内外院共同的实战课程，一年两次，因为时间分别在春秋两季，故又分「春猎祭」和「秋猎祭」。</div><div>“但是今年的「秋猎祭」，大概会变得非常危险。”仙霖说这话时，显得有些纠结，事实上，按照现今战线上传回的消息，这次各方边境的危险程度都有提升，所以内外院都仅有白色七等以上魔力等阶的学员能够参加，而且也是提前说明过危险性后自愿报名。但是，唯独西方边境的危险程度远远超过了往回，甚至君初晓因此决定不将这件事告诉新入部的这几人——仙霖当然是知道这意味着什么，所以她才会纠结过后，擅自决定违背对方的意愿：“ 这次的任务会非常危险，所以命姐说了，不需要告诉你们这件事。”</div><div>“不过，这样的话，命姐的压力就太大了，以我和御七的力量，真正危险的时候又帮不上命姐什么忙……” 仙霖的话虽然说到一半就戛然而止，不过其中的意思却已经很明显。而封艾羽也如她所想的没有犹豫：“不嫌弃的话，请允许我与大家并肩作战。” 江临渊见此，转头看了看身边的木祈栎，见她肯定的点了点头，便开口答道：“如果不觉得拖后腿的话，我们也去！”</div><div>“当然不会拖后腿，那么，这次就拜托大家了！” 仙霖似乎很高兴的样子，只是那眼泪看上去并非喜极而泣，在引起注意前就被她抬手擦掉了。御七则欲言又止的沉默了下来，他和仙霖是最熟悉的，当然知道她这样的说话方式就是刻意算计这三人主动提出前往边境，这样的话命姐也一定没有办法拒绝。</div><div>但是，就这样让他们卷入这件事真的是正确的吗？他无法问心无愧的回答自己这是对的。同样的，他也无法说出“牺牲的事情只需要他们来做就好了”这样的漂亮话，因为无论是两小无猜的仙霖，还是于他们有恩的命姐，他都完全不想失去。</div><div>…………</div><div>单手撑着脸，君初晓坐在书桌前，似乎在想着什么，时不时还会在纸面上写下零星的字迹。</div><div>忽然响起的敲门声伴随着仙霖的声音，打断了她的思绪，她当即抬头看向了门口：“请进。”</div><div>“命姐，关于「秋猎祭」的事情……”</div><div>“你还是跟他们说了吗？”君初晓敛下眸，似乎这并不出乎她的预料。</div><div>“因为命姐是我们的部长，大家都不希望命姐孤身犯险啊！”仙霖咬了咬唇：“所以，哪怕就只有这一次，拜托了，也用上我们的力量吧？”见此，君初晓不免有些无奈的揉了揉她的头：“好吧，既然如此，这件事就听你们的吧。”</div><div>“但是，我的事不可以再告诉少臣了。”</div><div>“笙箫哥......吗。”</div><div>“这次西方边境的狩猎行动，他一定不能去。”听此，仙霖的表情顿时变得凝重了起来，而君初晓则是叹了口气：“你也知道，他的魔武……有特别的触发唤醒要求，要是擅自到那样的战场上去，后果会很严重。”</div><div>“笙箫哥的魔武要是能用的话，命姐也不用这么辛苦，更不要说被君家……”仙霖的话还没有说完，就听君初晓突然出声打断，语气沉重：“仙霖！君家的事，别再提起了……对任何人。”</div><div>“是，命姐。”显得有些低落的垂下头，仙霖似乎暗中考虑着什么，随后又将脑海中的想法甩开——她如果到现在还没有察觉命姐其实想要退位让贤，那她也不是仙霖了。但如果连命姐也要离开的话，仅凭她们，怎么支撑得住这个庞大的风纪委员部？</div><div>虽然三代的千景会长他们用只有三个人的团队稳住了整个南院……但实力也比她们强太多，更别说初代的五人了，仅有现在的她们，命姐要是还离开的话，这个逐渐势弱的风纪委员部说不定会彻底解体吧。</div><div>“别想太多了，仙霖，也不需要强迫自己坚强起来。”看到她的神色，君初晓就明白她其实在想些什么，不由得抬手拍了拍她的肩膀：“我知道，你是因为小艾她们才来不久，也是你的后辈，所以不愿做出与前辈不符的举动，但你毕竟也只比她们早一年，只是多参加一年的历练，什么大事件都还没有经历过。”</div><div>“仙霖，你也还是个后辈啊。”</div><div>“以前是你对我说的，这次就换我来说一次吧。”、</div><div>“别把神经崩太紧了，这样就算不是剑，也很容易断掉的。”</div><div>“但是……”仙霖的声音有些哽咽的吼出声：“但是！当初是命姐把我和御七捡回来的啊！要是命姐离开的话，要是什么都帮不上忙的话——我到底是为什么还活在这里啊！”话音刚落，仙霖的两颊便滑下了晶莹的泪水。</div>



<h2 id="第8章：新生「太阳」与南城院校（八）"><a href="#第8章：新生「太阳」与南城院校（八）" class="headerlink" title="第8章：新生「太阳」与南城院校（八）"></a>第8章：新生「太阳」与南城院校（八）</h2><div>“但是啊！当初是命姐把我和御七捡回来的啊！”</div><div>“要是命姐离开的话，要是什么都帮不上忙的话——”</div><div>“我到底是为什么还活在这里啊！”</div><div>话音刚落，仙霖的两颊便滑下了晶莹的泪水。</div><div>不知该作何反应，翻涌的苦涩在舌尖蔓延开来，君初晓的手僵在原地，房间里顿时一阵静默，只有仙霖抽泣的声音还回响着。</div><div>“那么，就努力把命姐留下来吧，仙霖。”</div><div>从门外传来的声音，是熟悉得不能再熟悉的，属于封艾羽的声音。连泪水都还来不及擦拭的瞬间，房间的门已经被她打开了：“嘛，既然是前辈的话，可别哭得这么狼狈哦？”</div><div>“谁、谁在哭了！”以最快的速度擦去自己的眼泪，仙霖一脸凶相的看向封艾羽：“还有，小艾你是什么意思啊，在外面偷听我们说话吗？”</div><div>“我可不是偷听，毕竟仙霖的声音大到门外就能听到了。”调皮的吐了吐舌头，封艾羽打趣着，把之前的气氛一下子就拉回了日常景象。</div><div>“好了，别担心太多，要是后辈都比你还可靠，就没有点前辈的样子了。”一边抬手揉了揉她的头，君初晓难得露出了柔和的笑容来。随后又将视线投向了一旁的封艾羽，如果是她的话，能成为很好的部长吧，毕竟她身上，有着一种自己从未见过的气场，会柔和，也能十分锐利——说不定会成为一位很出色的部长吧。</div><div>也许是在后辈面前丢脸了，仙霖很快便离开了房间，只留下封艾羽与君初晓两人。</div><div>紫眸与碧眸相对，此刻神情颇有些相似的两人沉默的望着对方。</div><div>“小艾……”最后，首先打破沉默的还是君初晓，但几乎是同时，封艾羽的声音也响了起来：“命姐，可别说什么风委部以后就交给我了之类的话哦？”</div><div>“为什么？”君初晓不由得露出了苦笑：“你的话，一定会是个出色的前辈，不会像我一样。”</div><div>“我没有能力负担起这样的责任，也不适合用这样的职位束缚性格。”封艾羽有些不自在的挠了挠脸：“我啊，有时候还挺乱来的，没有谁拉住的话，就会擅自做些傻事。”</div><div>“命姐其实完全不用这么妄自薄菲的，明明比我可靠多了。”</div><div>“最适合这里的，只有命姐而已，不是吗？”</div><div>......</div><div>“其实我完全不懂呢，为什么你一定要放弃呢？这个位置由你来掌控本该是最合适的。”</div><div>“我是最合适的？呵。”</div><div>“不，仅仅是我姓君这一点，就已经是最不合适的了。”    </div><div>......</div><div>之前，尤利卡这样问她的时候，她是这样回答的。</div><div>如今眼前的封艾羽说出了和那个时候极其相似的话，她却不知为什么，发不出任何声音。</div><div>她果然还是没能放下吗？</div><div>没能放下这个风纪委员部，没能放下身边朝夕相处的后辈们。</div><div>啊啊，果然最不甘心的，还是没能与刚刚相识的他们留下和这个风纪委员部一样温暖的记忆吗？</div><div>嘴角不自觉的勾起一个浅笑，紫碧玺般的双眸中是有些宠溺的无奈——</div><div>“你们啊，还真是任性的后辈呢。”</div><div>不过，这样也好，就让她在离开之前，再送她们一程吧。</div><div>......</div><div>「学院狩猎祭」正式拉开序幕，已经是君初晓因为西方边境战况告急而提前离开的三天后了。仍然留在南院的封艾羽等人按她之前的要求，安排内院前往了东方边境之后才动身前往支援。不过值得一提的是，仙霖和御七并没有与封艾羽四人一同前往西方边境，而是由于君初晓的派遣同学生会前往了北方和南方边境。</div><div>西方边境的战场之上。</div><div>持续了整整三天的战斗，使城墙外不足一步的地方都早就已经染上了鲜血，满地的尸骸泛着碧绿的光芒，只随着城楼上一个娇小的身影挥手就从地上爬起，整齐列队，颇有千军万马的气势。</div><div>如同出鞘之剑的君初晓此刻正站在他的身边，紫色的双眸中是不见任何情绪的混沌。属于风纪委的红色校服外套上满是泛黑的血污，青蓝绝刃上也还仍在滴落点点鲜红，活脱脱一个择人而弑的恶魔。远处正在溢出的阴影述说着这场战争还没有结束，说起来上一次见到这样铺天盖地的数目，恐怕要追溯到三代时期的金三角之战了吧。</div><div>“嘁，都是些没完没了的家伙……”神色烦扰的君初晓望着远处超出地平线的阴影，不由得皱起了眉，这样的魔力消耗，就算是身为赤金十二等，魔力量几乎站在人类极限上的她也有些坚持不住了。</div><div>而就在这时，眼前突然出现了一个黑影，紧接着就是一声金属碰撞。</div><div>「怎么回事？」魔力近乎枯竭，以至于神经还没有来得及反应，却被其他人接下了这一击。</div><div>“祈栎，临渊，你们照顾下命姐她们！”熟悉的声音响了起来，随后则是银色的刀锋在眼前划出的一道弧线。</div><div>“嗯。”</div><div>“「吟唱省略·圣祈·完全治愈」！”下一刻，金色的法阵便从君初晓和小正太两人的脚下升起。</div><div>“真是准时啊，祈栎。”听此，木祈栎点了点头，而跟在她身边的江临渊似乎准备说点什么，却突然被一旁的小正太打断了要说的话：“其他的都之后再说吧，一股作气把眼前的都解决了！”可君初晓却一下子察觉到了江临渊欲言又止的事：“等等，小艾她人呢？”还没等江临渊作出回答，一层碧绿色的光幕从城下张开，而看到这道光幕，小正太当即就是一惊：“这个魔武是……能够斩断灵魂的「狱镰·伊伽莉玛」？！”</div><div>“但那不是传说吗——”</div><div>“至少能够斩断灵魂绝对是真的，亡灵们都因为那个的出现在颤抖。”听司陵满这么说，君初晓不由得皱了皱眉，随后开口确认道：“会影响你对亡灵的控制吗？”</div><div>“不会，威势控制得很好，她像是知道什么程度会吓跑亡灵似的，那个新生部员很厉害吧。”司陵满话音未落，面前的城阙上便突然出现了一个人：“多谢你的夸奖！初次见面，我叫封艾羽，很高兴认识你，今后还请多关照！”</div><div>“我是司陵满，大家都叫我小满，还请多多指教，艾姐。”似乎是看体型辨别时，觉得封艾羽的年龄比自己大这一层，小正太司陵满毫无心理负担的叫着艾姐，而其他人也同样一点不觉得违和，像是没人记得和君初晓一样已经是毕业生的司陵满在辈分上应该是封艾羽的学长。</div><div>嗯，这大概就是所谓的体型效应吧。</div><div>“但是，到底什么原因呢？”看了一眼光幕之外黑压压的一片，封艾羽露出了有些无奈的表情，而司陵满也是不由得皱起了眉，他在边境驻守长达五年之久，从来没有遇上过这种情况。</div><div>“这种数量的灵体聚集，不管怎么说也太反常了。”君初晓也点了点头，说起了三天前的状况：“我刚刚到达的时候也被这个数量吓了一跳，只不过现在从这里看过去，灵体的数量根本没有减少，反而有增多的趋势。”</div><div>“按理来说，这些灵体在累积到这种数量之前，就会相互排斥，发生内部争斗，然后数量骤减，除非……”</div><div>“除非什么？”</div><div>“灵体互相吞噬的过程中产生了等级高于所有灵体的灵主。”听司陵满说着，众人的脸色变得沉重了起来。江临渊下意识抽了抽嘴角：“能够操控如此庞大数目的灵主……那种怪物到底该是多少阶啊？！”</div><div>“有可能会到十二阶吧，而且还可能不止一个。”望着边界线上的纯黑一片，君初晓沉声说道：“你们现在后悔参与进来还来得及，决定吧，继续战斗还是退进南院的结界？”</div><div>“这种时候还说后退什么的，命姐不会是在小瞧我的觉悟吧？”继封艾羽毫不犹豫的发言后，江临渊也第一次没有回头看向木祈栎，只是紧了紧自己的拳头：“我不想再做胆小鬼了，所以请让我战斗！”而木祈栎则更加直接，回答只有坚定的两个字：“不退。”随即，司陵满也笑了起来，看向君初晓：“这是众望所归呢，命姐。”</div><div>“而且，我有种预感呢。”封艾羽的表情也不知道什么时候沉了下来，透着不知名的危险：“总觉得，说不定会遇上我的旧识之类的。”</div><div>“你的旧识？”对于君初晓的问题，封艾羽没有回答，反而是手中先构筑了一个远视魔法：“「鹰目」。”</div><div>从透明的镜面上投出的，是位于极远处的战场边缘，在那里有着数量不亚于光幕前的更多灵体。</div><div>而封艾羽则是移动视野，指向了其中一个略显空旷的角落——</div><div>“这是？！”</div><div>“似乎是什么召唤阵吧，人为痕迹非常明显。”说着，封艾羽一边将投影再次进行放大，指向了魔法阵中央的那块被另外的魔法束缚在地面上的魔石：“刚刚过来的时候借用狱镰的力量提前确认了一下，这是超十阶的魂石，有很明显是从遗迹里带出的痕迹。”</div><div>“顺带一提，据我观察到的情况来看，这样的阵法总共有三个。”</div>



<h2 id="第9章：新生「太阳」与南城院校（九）"><a href="#第9章：新生「太阳」与南城院校（九）" class="headerlink" title="第9章：新生「太阳」与南城院校（九）"></a>第9章：新生「太阳」与南城院校（九）</h2><div>“顺带一提，据我观察到的情况来看，这样的阵法总共有三个。”</div><div>“看来毫无疑问是人为了……幸好早就将这个要塞周围封闭，没留下漏网之鱼流落到外院。”君初晓说着，回头望向了木祈栎和江临渊：“祈栎，临渊，你们是神圣属性的，战斗的时候记得注意对小满亡灵军团的影响。”听此，两人立刻点头，有些紧张的握住胸前的十字架，随后相互对视一眼，似乎是在确定彼此的想法。随后，君初晓才再次将视线投向了一边的封艾羽：“小满会领亡灵军团和我一起进行正面突破。小艾，超十阶的魂石能破坏掉吗？”封艾羽歪了歪头，疑惑道：“不进行回收也没关系吗？”</div><div>“这样太过危险了，而且仅仅是破坏这么多的超十阶魂石就已经消耗你过多的魔力了，别太冒险。”</div><div>“也就是说，如果能平安无事的回收魂石是最好的选择吧？”</div><div>“对，但最首要的是安全。”</div><div>“没事啦，命姐以为我把自己的生命当成什么了嘛？没有对应的价值，我可不会做傻事。”封艾羽俏然一笑，露出了胸有成竹的表情，君初晓则也报之一笑，随后同司陵满一同转身跳下城楼：“「吟唱省略·苍之一闪」！”入部考核时见过的苍蓝巨剑于黑雾之间劈开一条康庄大道，君初晓的声音随后远远传来：“去吧，记得给我好好回来啊！”</div><div>“了解！”</div><div>而城楼之下，战争早已打响。</div><div>幽绿的亡灵大军之间，亮眼的苍蓝色身影仿若修罗，跟随在她身后的是两道白金色的影子，而手提银枪的少年则与她并肩，突破的前路在转瞬间就会被亡灵大军占据，以至于面前的黑雾连连败退。</div><div>“别冲得太前了，小满，注意对亡灵军团的控制权，不要强求，免得精神海受创。”君初晓说着，身上的气势一变，如同破军般锋锐的气场，似乎将她本身也化作了手中的剑锋：“我也许不能和之前一样关照到你们每个人，你们要各自注意安全，掐准时机，一击必杀便立刻后退——灵主来了。”</div><div>话音刚落，令大地震撼的脚步便从灵体群中迈出，三只庞大而外表略为恶心的生物带着极强的压迫之感，靠近，再靠近。</div><div>“别正面硬抗！”君初晓暗自咬紧了牙关，却不再犹豫，立刻做出了决断的指示：“小满，一边控制亡灵牵制其他的灵体，一边准备进行目标锁定！”</div><div>“祈栎和临渊准备连携！剩下的......全部由我来想办法拖住！”</div><div>话音未落的下一刻，君初晓动了。</div><div>“「吟唱省略·苍之一闪」！”重型巨剑凌空斩下，随后则散落为极近距离下的细斩，招招均从鳞片的间隙入骨，灵体惨痛的咆哮之间，是剥鳞破甲的剑痕。</div><div>“「吟唱省略·风轮火舞」！”</div><div>单刃破为双刃，随着君初晓向上的逆冲而释放着熊熊烈火，如同凤凰涅槃时燃烧着的双翼一般，仿佛烧灼着整片天空。</div><div>“就是现在——”</div><div>......</div><div>曾有人对他们说过，愿望的力量是世间最强大的，只有人类才能够持有的力量。</div><div>身在教堂时的他们还尚且未能明白，便已经锁链加身，变成了别人的所有物，以至于，忘却了透过光芒的彩色玻璃究竟有多美，忘却了要如何怀抱愿望，忘却了曾经对未来的畅想。</div><div>就连所谓的祈祷，明明是放入了自己名字中的托付，却至今没有虔诚过。</div><div>但如果是与这个斩断了她们锁链的人一起，擅自祈祷着未来，祈祷着幸福......一定也是被允许的吧？</div><div>他们或许是这里最弱的两人，但拿出底牌的他们，足以将一加一变成十。</div><div>时机恰好，两道白金色的影子于结界左右突击，于包围圈正中央同时解放魔武。在圣洁的光芒之间扯下对方胸前的十字架：“「吟唱省略·魔武解放——银蔷薇·十字双剑」！”</div><div>“「吟唱省略·连携·圣蔷薇之哀鸣」！”</div><div>银色的蔷薇在灵体正中央绽放，白金色的光芒立刻延展升华，伴随着同为银色的藤蔓破土而出，层层绽开的花瓣俨然将圣光在整个亡灵军团的包围圈之中架构出一片净土。大量的灵体因此消散，伴随着曾经的记忆与混乱的意志，流入新的命运潮流中，徒留那一枝开得绚烂的银蔷薇，于荒原间傲然而立。</div><div>“「吟唱省略·天之逆鳞」！”</div><div>如果说银蔷薇的绽放只是净化小夜曲的前奏，那么二度降下的剑雨便是杀伐金戈之音的副歌。</div><div>苍蓝的剑雨铺天盖地，却没有任何一柄落空，整整齐齐的没入灵体们一颗又一颗僵死的心脏，将整场狩猎推向高潮。</div><div>“「吟唱省略·亡灵奏曲」。”冷漠到不像是之前那个小正太，司陵满的声音在此刻响起，一柄银制长枪化链，如天罗地网般自上覆盖而下，随后则是整齐划一的亡灵军团，同一队队亡灵的肆虐时间。</div><div>此时，整片荒原已经被清空出大半，更远处的灵体似乎望而却步，可以说算是达到了暂时退敌的目的，回转的木祈栎也立刻对众人释放了叠加的治愈系魔法，重整态势。</div><div>只是，没有任何人敢松懈。</div><div>他们都知道最终的胜利全掌握在后方的三个召唤阵之上，而最为关键的封艾羽却至今还迟迟没有动静。</div><div>像是知道他们在想什么似的，就在三只灵主被清扫得只剩下最后一只时，碧绿色的风暴突然从灵体后方绽开，如极光般的屏障向前推进，随后是众多灵体的支离破碎。</div><div>三只灵主在一瞬间成了入瓮之鳖，在两面夹击之下化为飞灰，再看眼前握着碧色战镰的金发少女——不是之前从后方进行阵法破坏的封艾羽又是谁？</div><div>“命姐，任务圆满完成！三个召唤阵也完全破坏，不会再有被启动的可能。”听此，君初晓展颜一笑：“同时借超十阶魂石破碎时的能量掀起能量风暴，干得非常漂亮，小艾。”</div><div>“那么，接下来就是清扫杂兵的时刻了——”君初晓话音未落，便被突如其来的鲜血溅了一脸。</div><div>“真遗憾，高兴得太早了呢。”不知从哪里传来的声音突然间响起，而刚刚出现在眼前的封艾羽，腹部不知什么时候被一只突然出现的手贯穿，但封艾羽的反应也足够快速，碧绿的战镰几乎是同时斩断了对方的这只手，并用空间魔法在瞬间拉开了距离。</div><div>“小艾（艾姐）！”</div><div>“没事，这种程度还死不了。”面对冲过来的木祈栎和江临渊，封艾羽摇摇头，随后抬手将插在腹部的那只手扯出来扔开，事实上，只斩断了对方的一只手，令她对这个伤换来的战果有些不满意。</div><div>“不愧是10号呢。”刚刚的声音又响起来了，其中还有封艾羽并不想听到的这个熟悉的称呼——10号，那是她曾经还在实验室里被给予的编号。</div><div>“你的「影藏」真是进步了不少啊，虽然不知道你为什么还活着，维姬。”被刻意点出了名字，对方也似乎不准备再藏下去了：“毕竟不是被狱镰贯穿的嘛，复活而已，只要献祭万人就能够重塑身躯，很容易的事情啦。”对方的声音还在回响着， 周围本来黑压压的一片阴影，便在没有任何威胁的情况下整齐退后一步。</div><div>这样的纪律性，是以往从未见过的，也不由得让所有人的神色凝重了起来。而阴影退开的地方，浮现出了绘制规则不明的暗紫色法阵，在君初晓等人还在惊诧的时候，封艾羽便是心下一凉——如果说刚刚还只是猜测，但是现在就已经是确认了。</div><div>眼前的魔法阵是她已经见过无数次的，以其他属性魔法为基础，释放成空间魔法的禁忌术之一。而这种禁忌术，据她所知，只供「暗域」内部人员使用。作为曾经「暗域」的10号实验品，在逃离实验室后，封艾羽甚至为了彻底毁掉「暗域」而花费了一年时间对她们赶尽杀绝。</div><div>如今，竟然又出现在了这里。</div><div>不知为何，她甚至不安到无法冷静下来思考，毕竟在「暗域」的那段人生，是她这片羽翼下最大的阴影。</div><div>“多谢夸奖啦，不过10号，任性这么久也已经足够了吧，你差不多也该回组织去了。”</div><div>从遥远的距离传来的对方的声音，在封艾羽耳中，如雷霆乍惊一般。</div><div>“回......去？你居然说，回去吗？”</div><div>阵前现身的少女用黑色的半张面具遮住了脸，被斩断的那只手不知什么时候恢复了原状，手臂上黑月藤蔓的印记，虽然不是她所熟知的标记，可封艾羽却是不可能会认错的。</div><div>那毫无疑问就是「暗域」的域主——维姬，也是她那场噩梦的开始，这个被她“特别关照”过，本该连尸体也不剩下的家伙，再次活生生的出现在了面前，而且并非幻觉，这令她差点红了眼。</div><div>“哎~10号一直这么任性的话，维姬我可是会生气的哦。”</div><div>“不愿意回去也没关系啦，维姬只要你可爱又成功的实验品心脏就好了！”她尖锐的指尖朝封艾羽的脸颊伸去，却被战镰切断了手掌，只是她完全没有什么反应，甚至连手掌也一转身便又再次长了出来：“你忘记了吗，只有切断灵魂的狱镰是绝对杀不死我的哦？”</div><div>“所以啊，快点把你那颗特异点的心脏交出来吧！”</div>



<h2 id="第10章：新生「太阳」与南城院校（十）"><a href="#第10章：新生「太阳」与南城院校（十）" class="headerlink" title="第10章：新生「太阳」与南城院校（十）"></a>第10章：新生「太阳」与南城院校（十）</h2><div>“你忘记了吗，只有切断灵魂的狱镰是绝对杀不死我的哦？”</div><div>“所以啊，快点把你那颗特异点的心脏交出来吧！别做无谓的——”</div><div>下一刻，对方的声音戛然而止，一柄银色的长枪从上方直接贯穿了维姬的身体：“你这种语气会让人想起很麻烦的家伙，所以快点给我闭嘴了啊！”一抡枪就将对方远远的甩了出去，那不是司陵满又是谁：“真是的，果然反派的台词都是如出一辙的吗？”</div><div>“真是碍事，一个个的都别来打扰我和10号的愉快交流啊！”抬起仅剩的右手，退到一旁的灵主重新行动了起来，但还没等那边靠近，维姬的右手便被苍蓝色的光芒再次斩断，随后君初晓便直接将对方的胸膛横向剖开：“我可看不出来这哪里有你口中的愉快啊！”</div><div>“嘁，「绝刃·天羽羽斩」也来凑热闹了吗！”维姬咂了咂嘴，随即腾空而起：“但是你也不过是在做无用功罢了！”从四肢断口喷涌而出的鲜血凝聚成实体，化作无数箭矢，从天而落：“全部都给我尽全力的闪避好了，沾上这份鲜血的话，就等着被腐蚀殆尽吧！”</div><div>话音未落，一个卷轴被甩到了半空，随后响起的是封艾羽的声音：“大家都躲过来！”金色的屏障在一瞬间展开，一个从未见过的防御魔法借由魔法卷轴完全展开。而如果安向阳在这里的话，一定能够立刻认出，这是他的「龟壳」——实名为「不落要塞」，一个就连赤金十二等的封艾羽也在这之下讨不了好的防壁魔法。</div><div>因为无法自己构建，所以在听说这次狩猎的危险程度很高时，为了以防万一，封艾羽就在离开之前特意找安向阳要了他制作的魔法卷轴，现在看来的确派上了用场。</div><div>“这个防壁魔法的构造还真是出色啊，不过现在可不是这么悠闲聊天的时候就对了。”司陵满的目光望向了封艾羽：“这家伙是艾姐之前认识的人吧，听语气，艾姐以前成功的杀掉过她？”</div><div>“是杀掉过，但是好像同样的招数现在没用了。”听封艾羽这么说，一旁的君初晓也不由得问道：“她刚刚说只有狱镰是不行的，你难道有双生魔武吗？”</div><div>“我想是没有的......”</div><div>“那，会不会是和我们这个一样，因为你的魔武解放是没办法吟唱省略的吧？”江临渊忽然间插话进来，封艾羽不由得看向他：“你说说看！”</div><div>“我和祈栎的魔武是共生体，如果只有其中一个人用十字剑的话，就不能使用吟唱省略。”</div><div>“她说只有狱镰不行，会不会狱镰的共生体就有能够杀死她的力量？！”</div><div>“但是如今的情况，还能够到哪里去找那个共生体啊？！”司陵满不由得说了一句，却见封艾羽的神色一凛：“卷轴的时间限制马上要结束了，我这里还有一个卷轴就交给命姐了。”</div><div>“喂，你要去哪？！”司陵满的声音没能喊住已经冲出屏障范围的封艾羽，她的声音从远处飘来：“临渊说的事情，我会想想办法的！”</div><div>“再怎么说，这样擅自冲出去！”君初晓也下意识脱口而出，就听血雨中奔驰的封艾羽道：</div><div>“反正车到山前必有路，总会有办法的！”</div><div>君初晓顿时愣了愣。</div><div>【别担心我，总会有办法的，我相信子命一定能成为部长！】</div><div>仿若在耳边响起的声音，君初晓咬咬牙，顺手将刚刚的卷轴扔给了木祈栎和江临渊：“你们等阶最低，拿着这个！别擅自靠近那边！”</div><div>“小满，我们去掩护小艾！”</div><div>“命姐？！”江临渊不由得叫出了声，就听君初晓说道：“你们的魔武有治愈魔法，给我守好后方！”</div><div>“是！”这次先回答的是木祈栎，她的声音还是极其的冷漠，却一手拉起江临渊，一边毫不犹豫的展开了手中卷轴的防壁魔法，同时高速移动着，尽可能快的脱离这片血雨的攻击范围。</div><div>......</div><div>即使尽力回避也还是无可避免的沾上血雨，越加不受控制的身体逐渐沉重，但封艾羽并不打算放下手中的狱镰，因为身后还有要守护的东西。</div><div>是的，决定了要守护就一定不会让步，这是她的坏习惯呢。</div><div>为自己的莽撞而勾起一个苦笑，封艾羽仿佛听到了耳边传来那个人的话：“羽总是擅自努力过头了啊。”</div><div>说起来真是有很久都没听见对方的声音了啊。</div><div>哎？奇怪，那个对方，是指谁来着？</div><div>苍蓝色的光芒突然出现在眼前，是从身后追过来的君初晓：“别在那发呆！”</div><div>“我和命姐会掩护你的，所以，艾姐！”</div><div>“了解！”</div><div>碧绿色的战镰于手中挥舞，腹部的伤口还在传来钝痛，以至于脑域中像是多了些什么似的模糊不清。</div><div>“都说了只有狱镰是不行的啊！我亲爱的10号~”露出一个像是嘲讽一样的笑，维姬胸前被狱镰撕开的伤口中喷涌出更多有着腐蚀性的血液，而握着狱镰的沉重身体最终没能撑住而向后倒去。</div><div>意识的最后，是被君初晓接住时，在她胸前看到的南院校徽。</div><div>在她第一次拿到这个银色的胸章时，她就问过了仙霖。</div><div>“不过说起来，南院的这个校徽有什么特别的意义吗？有点好奇呢。”</div><div>那是个有些复杂的图案——恶魔的暗黑左翼和天使的纯白右翼分别位于左右两侧，而中间则是扇形排布的八柄魔武。</div><div>“啊，校徽的意义吗？”</div><div>“天使与恶魔的双翼是赤羽家那两位的象征，天使赤羽律，恶魔赤羽缪。”</div><div>“而八柄魔武分别是最中央的「歼琴·浮士德」和「烈枪·冈格尼尔」。”</div><div>“向左边散开排布的是命姐使用的「绝刃·天羽羽斩」还有「神剑·天丛云剑」，「鏖锯·修尔夏修娜」。”</div><div>“而向右边散开排布着的则是「魔弹·塔斯塔姆」，「魔剑·戴因斯莱夫」，还有你所使用的「狱镰·伊伽莉玛」。”</div><div>“之前也说过，狱镰和鏖锯说起来还是赤羽家那两位的魔武呢！”</div><div>是这样啊，「狱镰·伊伽莉玛」和.....另一柄名为「鏖锯·修尔夏修娜」的魔武。</div><div>“羽和我持有战神双刃，所以说不定是因为独自一人太孤独，才变成两个人的吧。”</div><div>“嗯，一定是从很早之前开始，我们就已经各执一羽，等待着与彼此相遇的那一天了。”</div><div>“......羽总是擅自努力过头了啊，下次遇到解决不了的事情时，也叫上我一起吧？”</div><div>所以，这到底是谁？在她消失了的记忆中出现的这个人，到底是？</div><div>「欢迎回来，羽。」</div><div>“……我回来了，影。”</div><div>脱口而出的话语伴随着几乎吞没一切的赤色光芒，一时间猛然找回的意识，视线中只剩下碧绿与赤红的交相辉映。</div><div>碧绿色的战镰，一柄能够斩断一切灵魂的利刃。</div><div>赤红色的圆锯，则是能够切断所有生命的锐利。</div><div>这便是战神的双刃，「狱镰·伊伽莉玛」和「鏖锯·修尔夏修娜」。</div><div>“开什么玩笑......”不得不收起的嚣张笑容于维姬脸上凝固，曾见过一次的她，当然知道眼前的碧绿与赤红到底代表着什么，但是为什么，为什么那个人不在的情况下，仅凭10号自己也能够召唤两柄魔武？！</div><div>她不承认！绝对不承认！</div><div>明明不管哪个都是她所制造的实验品，凭什么会出现她从来没有设定过的机能？！</div><div>对了，这难道说，就是特异点的力量吗？</div><div>难道这就是那位大人口中所说的，游离于命运之外，只要希望就能够创造奇迹的特异点的力量吗？！</div><div>维姬的意识最终消散在了这里，因为被鏖锯杀死的生命是无法复苏生长的，而同样，被狱镰斩断的灵魂也会立刻消散。</div><div>与她同时消散的，还有被人为创造出来的那只仅剩的灵主，一切都是由维姬的魔力所组合的它在失去了这份魔力后，散落成一地的灵体自然也是理所当然的了。</div><div>“小艾（艾姐）！”</div><div>“这里就由我来开路，小满你照顾好小艾——”被拆成功两柄的利刃合而为一，仿若御剑而行一般，冲天的苍蓝色利刃载上了三人，于落下的苍蓝剑雨中冲锋，幽绿的亡灵大军也很快便占据了主导权。</div><div>西方边境的一切都在并没有引起其他人注意的情况下重归平静，持续昏迷中的封艾羽也在被送回了风委部宿舍静养三天后重新醒来。</div><div>“辛苦了，命姐！”</div><div>“嗯，之前的伤有留下什么不适吗？”</div><div>“没事，完全小事一桩！”</div><div>“那就最好了。”见她一副极其鲜活的模样，君初晓的眸色逐渐温柔下来吗，随后似乎有感而发的拍了拍她的肩膀，轻声道：“今后不管发生什么，你都是南城院校风纪委员部的一员，只要你剑锋所指是你所无悔的正义，风委部的大家便绝不会抛下你一个人战斗。”</div><div>“真的？那我会把命姐这句话永远铭刻在心的。即便对于南院来说我是个新生，也是个普通的新风委部员，但……”封艾羽轻轻垂下了眼眸，似是流露出了一些温柔和浅浅的笑意：“嘛，该怎么说才好呢，我觉得，有种重获新生的感觉。无论是入部的时候，还是现在这一刻，我都能切实感受到这份因为有了归处的平静。”</div><div>“啊，这么说起来，还真的是必须好好感谢风委部的大家才行呢，特别是命姐！”</div><div>这么说着，封艾羽扬起了她那如旭日初升的阳光般夺目而温柔的笑，金色的短发与碧色的双眸辉映着，释放着不同却协调的光，令人有些移不开视线。</div>



<h1 id="第二卷：自杀少女与「命运之轮」"><a href="#第二卷：自杀少女与「命运之轮」" class="headerlink" title="第二卷：自杀少女与「命运之轮」"></a>第二卷：自杀少女与「命运之轮」</h1><h2 id="第11章：自杀少女与「命运之轮」（一）"><a href="#第11章：自杀少女与「命运之轮」（一）" class="headerlink" title="第11章：自杀少女与「命运之轮」（一）"></a>第11章：自杀少女与「命运之轮」（一）</h2><div>初到南院便成为了风纪委员，经历了学院狩猎祭事件后，一直节奏紧凑的封艾羽终于在一个月后的这个星期获得了暂时的空闲。</div><div>边境发生的事据说被君初晓写成了报告交至学生会长千景晴手中，并得到高度重视。同时，风纪委员部的三名新部员也补充在了现任风委的公告栏上，以至于近日来封艾羽也时不时会收到来自南院内院学员的挑战书。</div><div>一开始她还一头雾水，不过后来听仙霖解释后便大概明白了是怎么回事。</div><div>在达到一定等级评级后，除了经现任风纪委员推举，并向学生会长申请的正式方式，获得进入风委部的审核资格以外，还可以通过直接对现任风纪委员发起挑战的方式获得入部审核资格。后者主要是针对本身没有身份背景，没有途径得到现任风纪委举荐的内院学员。</div><div>当然，收到挑战书这种事也不过是两周前了。自从封艾羽在第一场挑战中表露出赤金十二等的魔力等阶后，就再也没有什么自讨没趣的家伙前来挑战了。</div><div>顺带一提，不仅正经的挑战者不少，喜欢投机取巧的似乎也不少，还有暗中使用魔武偷袭的挑战者——不过，毫无例外的被她贴上违纪单，传送到了惩戒室。</div><div>没办法，毕竟南院校规中有规定，仅限风纪委员或学生会成员才能够不经过任何申请便在学院内使用魔武。</div><div>“不过，特别来一次外院是为什么啊？”一边啃着手里的驴打滚，走在封艾羽身边的仙霖不由得开口问道：“难不成……是为了那个安迪吗？”</div><div>“要这么说也没错了，之前多亏了他给的魔法卷轴，才总算是解决一大麻烦呢。”封艾羽倒是不否认，而见她一副光明磊落的样子，即便是习惯了脑补的仙霖，也反倒是真没想太多。倒是经过封艾羽这么一提，仙霖想起了之前考核时见到的那个防壁魔法：“我记得，那家伙很擅长防壁魔法的构筑来着，攻击魔法就完全不用心了，用得还是小火球……话说他魔武是什么啊？”</div><div>听仙霖提起这个，封艾羽当时就笑了，但是依旧非常卖关子的说着：“不然你先猜猜看？”</div><div>“唔，一般防壁魔法这么强的话，我觉得大概是重型武器吧？”仙霖一副认真思考的表情：“如果看你在笑的话，他的魔武很奇形怪状吗？”</div><div>“类似于鼎吗？还是龟壳之类的？或者更奇形怪状一点的？”</div><div>“清醒一点啦，龟壳怎么可能是魔武……”封艾羽笑道：“一开始的方向就错了，看来果然是猜不中的啦。”</div><div>“哎，一开始就错了？那到底是什么啊？”面对仙霖满脸的好奇，封艾羽忽然站定：“答案其实很简单，是一对匕首。”</div><div>“匕、匕首？！”仙霖却几乎当场石化一般的愣在了原地，手里的驴打滚差点直接掉地上。</div><div>“没想到会是近战魔武吧。”封艾羽却很理解她的反应，说实话她一开始知道的时候也是这个表情：“安迪他最奇葩的地方，就在于自己明明有着近战魔武，却完全不会近战。”</div><div>“一般情况下，他都是直接把对方魔力耗完，然后等队友收人头或者放小火球——啊，就是之前考核的时候你看到的那种。”说着，封艾羽自己也没能忍住的笑了起来：“这种类型却是近战魔武什么的，果然是很奇葩吧。”</div><div>“我还从来没见过这种哎，毕竟魔武是与灵魂伴生的，应该最接近天性才对吧？”</div><div>“我也不知道他那个到底算是什么了，倒是经过那个魔武加持的辅助魔法很厉害。”</div><div>“哈哈，所以那个只适合后排辅助吗？”</div><div>“反正他也不喜欢战斗，这一点倒是很像是他的风格来着。”</div><div>跟仙霖一路聊着天来到安向阳从第五区搬到外院的小洋楼，因为外院不设长期宿舍，所以这种直接把“家”都搬过来的事虽然不常发生，却算不得什么大不了的事，甚至上次来找他要卷轴的时候，维斯特也还是寄住在安向阳这里的。</div><div>当然，眼前的画面每次都令她既视感满满——见惯不惯的抬手敲了敲门框，封艾羽朝那个没有形象的绿毛道：“喂，安迪你个死萝莉控，看在还有其他人在的份上收敛一下啊！”</div><div>“是艾姐啊。”光速变脸的安向阳一转身就看到了封艾羽和跟在她身后一脸惊恐的仙霖，选择性的无视了仙霖的表情，封艾羽拉她到房间里随意坐下：“真是的，维斯特在这里借住居然没被你带坏什么的，实在是太奇迹了。”</div><div>“哎……”刻意拖长的声音让她察觉了安向阳似乎话中有话，便随口问道：“怎么？”</div><div>就见安向阳突然故作怨妇态的掏出一张手帕，擦着完全没有眼泪的眼角：“我明明是因为那家伙是同道中人，才至今都留他借宿的呢。”</div><div>“那家伙也是萝莉控啊？”这倒是的确让封艾羽有些惊讶了，一旁的仙霖则感觉世界观都被刷新了一遍——萝莉控，原来这么多的吗？话说，刚刚那个表情真的好恶心啊！小艾的交友取向真的没问题吗？！</div><div>安向阳则点点头，以一脸深沉的表情，在额前十指交错，手肘撑于桌面，声音极其正经，却莫名让人想笑：“准确来说，是妹控。”</div><div>“哦？那还真是人不可貌相啊。”封艾羽挑了挑眉，刚准备说些什么，就看见了刚到门前的维斯特一脸惊喜：“啊，是封前辈！还有那个时候的考核官前辈也在！”</div><div>“额，我叫醉仙霖，醉梦仙霖的醉仙霖。”仙霖难得找回了自己的声音开口说出进屋后的第一句话，一抬头就见到了维斯特像是大型犬一样闪闪发光的眼神：“好的，醉前辈。”</div><div>醉前辈？好像哪里奇奇怪怪的……嘛，管他的。</div><div>“对了，差点忘记正事——”说着，封艾羽从空间袋里掏出一个礼盒：“这是上次魔法卷轴的谢礼，多亏你啦。”似乎从礼盒里面闻到了些什么味道，安向阳瞬间眼睛就亮了：“啊啊！这个味道！不愧是艾姐！”</div><div>“总觉得想到了什么奇怪的东西……”仙霖小声嘀咕着，却没注意到这里的小声只是她以为的小声，实际上所有人都听到了。就听封艾羽顺口接道：“和那个没关系吧，这只是甜品哦，而且不是仙霖你和我一起去买的吗？”</div><div>“重点是，你为什么好像秒懂了啊……”见仙霖默默的抽着嘴角，安向阳一边欢快的拆包装一边说着：“艾姐可是公认的污妖王来着。”似乎什么都不懂的维斯特则眨了眨眼：“哦，好厉害的样子。”</div><div>“对了，艾姐现在是风委部成员的话，有听说过那个吗？”</div><div>“嗯？”封艾羽抬眸看了过来，就听安向阳继续道：“就是那个外院有人在传的，从三天前开始出现的连续杀人狂。”</div><div>“至今似乎已经有五个人被杀了，而且还是那种在外院特别声名狼藉的家伙。”听安向阳提起这件事，维斯特也出声了：“这个我也听说了，相关的传言好像弄得人心惶惶的。”</div><div>“哎，是吗？”仙霖一愣，她是负责内院巡查的，倒的确没怎么听说。</div><div>“而且，因为死相很惨，所以有人传那个杀人狂是不是有施虐癖之类的。”</div><div>“施虐癖啊……”封艾羽垂眸想了想，问道：“至今为止，那个杀人狂有被目击到吗？”</div><div>“目击吗？我是没有听说了。”安向阳说着，侧头看向了维斯特，就见对方有些迟疑的垂眸：“如果要说目击的话，事实上我也不知道那算不算是目击到了那个所谓的杀人狂——”维斯特一副有些手忙脚乱的样子解释着：“就我之前因为一些事情耽误，我昨天在图书馆留到很晚，大概是十一点过的样子。”</div><div>“从图书馆出来的时候，我在楼梯间撞到了一个人，但是对方站起来以后直接从窗口就跳了下去。”</div><div>“我没看清是个什么样的人，但是当晚回来，就发现面前被撞到的地方一片血，向阳当时还吓了一跳。”维斯特看向安向阳，对方便立刻煞有介事的点了点头：“对，那天晚上这家伙面前一片红，我还以为是被谁砍了。”</div><div>“然后今天的报道上，图书馆就发现尸体了。”说着，维斯特将光脑的画面投影在了众人面前。</div><div>“这也太巧了吧......”封艾羽抽了抽嘴角，看向仙霖：“说起来，外院的巡查是御七和那位外院的.....负责的吧？”</div><div>“嗯，是御七和笙箫哥负责的。”见仙霖点头，封艾羽便直接问道：“那我们能稍微去问问吗？毕竟维斯特这个，感觉很大可能上是目击证言来着。”</div><div>“我想是没问题的啦。”仙霖点了点头：“不过在那之前，我想先问一下。”</div><div>“关于那个撞到你的人，你有其他印象吗？”</div><div>“哎？我想想......”维斯特低头仔细回忆着：“当时被撞到之后......感觉好像看见了碧绿色的什么东西在发光。”</div><div>“发光的碧绿色的东西？”</div><div>“嗯，然后那个人从窗口跳下去，大概是披了斗篷之类的东西吧，黑色的斗篷被风吹散了的感觉。”</div><div>“也就是对方身上有着不知道是什么的碧绿色光源，然后还穿着黑色斗篷呢。”总结了一下维斯特的说法，仙霖和封艾羽对视一眼，最终决定还是四个人去一趟外院的巡查分部找御七他们再了解一下情况。</div>



<h2 id="第12章：自杀少女与「命运之轮」（二）"><a href="#第12章：自杀少女与「命运之轮」（二）" class="headerlink" title="第12章：自杀少女与「命运之轮」（二）"></a>第12章：自杀少女与「命运之轮」（二）</h2><div>外院有一名连续三天出现的杀人狂， 且三名受害者都死相惨烈，最初知道这件事的时候，御七的确吓了一跳，但其实并没有特别注意——直到来到外院听莫笙箫说明过后，他才后脊一凉。</div><div>之前被杀的两人一男一女，分别被钉在了商贸大厦与外院教学楼的外墙上，因过于痛苦时咬断了自己的舌头而死，但周围却没有任何人听到他们的惨叫。所有的摄像头都被刻意屏蔽，没有记录下凶手的任何行踪，除了那极其相似的手法能够确定是同一人所为，两者似乎并没有内在联系。</div><div>最新发现的尸体被钉在了图书馆外墙上，手法也与之前相同，然而在进一步探查之前，令御七出乎意料的是，仙霖竟然向他发来了通讯，告知她和封艾羽似乎发现了一个疑似目击者。</div><div>“图书馆的事件竟然有目击者？”听到御七的话，一旁的蓝发少年有些惊讶的侧过头来，但他没开口打断，倒是之前一直拿在手里研究的钉子已经放在了桌面上，直到御七挂掉通讯，他才开口问道：“是仙霖发来的通讯？”</div><div>“嗯，她们已经在过来的路上了，似乎说那个疑似目击者是小艾的朋友来着。”御七话音刚落，蓝发少年抬手将白布重新盖回了尸体身上：“那位小艾是之前的新人风委吧，听说是赤金十二等？”</div><div>“对了，笙箫哥还不认识她啊。”御七像是才想起这茬，随口说明着：“对方是个很乐天的女生，实力也很强，而且因为之前西方边境的事情，命姐似乎很看好她成为下任部长的样子。”</div><div>“哦，你说，西方边境？”听到莫笙箫的回问，御七突然动作一僵，对了，他又忘了，西方边境的事情是命姐吩咐了要向笙箫哥保密的来着——</div><div>“先详细说明一下吧，西方边境的事。”莫笙箫平静的抿了一口茶。他仿佛生来有一种墨香般的儒生气质，但早就熟识的御七却绝对不会被表象所迷惑，这种越是平静越是波澜不惊的表现，通常是这个满腹墨水的人即将发怒的前奏。</div><div>而看到御七的表现，莫笙箫哪还能不明白这是君初晓刻意的安排，蓝眸中划过无奈，随即话锋一转，无奈的摇了摇头：“算了，既然她不想让我知道，那我就当作不知道好了。”</div><div>“笙箫哥......” </div><div>“怎么，别用这种表情看着我。”莫笙箫眸中一片柔和，抬手揉了揉御七的头：“我们的出身就是如此残酷，但是，不需要任何人的怜悯。”</div><div>“子命有时候挺固执的，她仅剩的这份骄傲，倒是还多亏了你们的帮衬。”收回视线，莫笙箫看向御七手中突然响起的光脑：“去接他们来这里吧？毕竟她们也不是外院巡查的风纪委，大概会不太熟悉。”</div><div>......</div><div>虽说提前在报道上看见过了，但切实见到尸体的时候，仙霖和维斯特还是会有些反胃。一旁的封艾羽和安向阳反倒是没什么反应，得到莫笙箫的允许后便上前开始仔细打量尸体。</div><div>“小艾，安迪，你们不会觉得恶心的吗？”</div><div>“嗯？”封艾羽莫名其妙的看向仙霖：“这种程度就已经很恶心了吗？”安向阳则是朝仙霖一笑，但一听他的话，仙霖却一时毛骨悚然：“艾姐以前的手笔也差不多是这样血淋淋的场面，见多了也就不恶心了。”</div><div>“小艾以前都干了些什么啊......明明是女孩子。”</div><div>“嘛嘛，以前为了自保都无所不用其极，不过现在都是过去的事情就不提了。”封艾羽说着，随即倒是指了指尸体的伤口：“不过这个伤口，看上去像是鞭痕啊。”</div><div>“哎？这么血肉模糊的伤口，居然会是鞭痕？”</div><div>“没错，这是鞭痕。”</div><div>同时响起的两句话让仙霖一时愣住了，一侧脸，莫笙箫朝她们点了点头：“这应该是被那种带有较长倒刺的钢鞭勒断的痕迹，而且......”</div><div>“将尸体钉在建筑外墙的这个，也证明了这一猜想。”说着，莫笙箫将手中的尖锐物递到几人面前：“我想，这大概就是对方钢鞭上的倒刺。”</div><div>“不过，仅凭这个线索是没有办法确定凶手的，所以我们也还需要疑似目击者的证言。”听莫笙箫这么说，六人干脆就坐了下来，听维斯特将之前的话重新对莫笙箫说了一遍。</div><div>“嗯，这么听下来，你的确像是目击到了那个杀人狂的身影。”点了点头，莫笙箫朝维斯特一笑：“虽然没有任何视频录像能够找到那个大概是穿着黑色斗篷的人影，但谢谢你提供的线索。”</div><div>“顺带能够问一句吗？你那个时间还在图书馆的原因——”莫笙箫说着，一抬头却见维斯特明显愣了愣，随后轻轻摇了摇头：“其实也没什么，就是突然收到了妹妹给我的纸条，约我去图书馆。”话音未落，安向阳倒是首先惊呼出声了：“你妹妹？！这么说，你在南院找到她了吗？才这么几天的时间，你运气还真是好啊......”</div><div>“嗯，说实话我也有点惊讶，但是她似乎还有些事情需要处理，所以只能偶尔约我见面。”听维斯特这么说，安向阳没再问什么，倒是扯起维斯特的手搓了搓，吓得维斯特一愣：“向、向阳？”</div><div>“哎呀，难得有这么幸运的，正好从你这里借点欧气抽卡嘛。”见对方说得如此轻松，维斯特猛然僵住的身体也随即放松了下来：“那也不能这么突然的抓上来啊.....吓我一跳。”</div><div>而也不知是不是被吓到的缘故，维斯特并没能注意到，跟他笑闹着的安向阳此刻的笑意其实并不达眼底。</div><div>“啊，对了。”像是想起什么似的，莫笙箫忽然叫住了准备离开的几人，准确来说是其中的封艾羽：“是称作小艾吧，我们可以稍微聊聊吗？”</div><div>“好的。”虽然一头雾水，但封艾羽姑且算是应了下来，跟着莫笙箫走到了内室。抬手请她坐下，莫笙箫从抽屉中取出了一个盒子，递给她：“盒子里是这次事件的取证物，考虑到安全性的问题，还是交给你保管吧。”</div><div>“哎？”见封艾羽似乎还没反应过来是什么意思，莫笙箫扬唇一笑，干脆将意思挑明：“能请你参与调查吗？”</div><div>“我来参与调查？”</div><div>“嗯。”莫笙箫点点头：“为了不引起恐慌，我们刻意隐瞒了死者的身份，事实上，所有死者都是金色十等的实力。”</div><div>“金色十等？！”封艾羽差点直接站起来，随后还是压低了已经到喉头的声音：“像这样毫无反抗之力的被杀掉的，是金色十等......的确是能够引起恐慌的级别了。”</div><div>“所以，可以借助你的力量吗？赤金十二等魔法使。”</div><div>“都这样被拜托了，也没有拒绝的理由。”封艾羽点点头，再次抬眸：“但是，笙箫哥应该不只是因为这个才拜托我的吧？”听此，莫笙箫的嘴角越发上扬：“嗯，真是很敏锐的直觉。”说着，他上前一步，在封艾羽耳边说了些什么，她那双碧色眸便有些危险的眯起：“如果是这样的话，还真是糟糕啊。”</div><div>“我也并不想变成那样。”莫笙箫摊了摊手：“我和子命是青梅竹马，出于私心，我希望尽可能回避让她不得不卷入的情况，能够拜托的，现在也只有你了。”</div><div>“我知道了。”封艾羽突然站起身，朝他伸出手，脸上是一如往常的笑容：“请让我参与这次的调查吧，笙箫哥。”</div><div>“这正是我期望的。”回握了对方的手，两人相视一笑，随后离开了内室。</div><div>而目送着封艾羽一行人离开，莫笙箫重新拉开内室的抽屉，那里放着另一个盒子——与封艾羽手中拿到的那个盒子一模一样。</div><div>......</div><div>“喂喂，今天的目标在哪里啊？”套着一身黑斗篷的少女看不清面容，倒是那有些娇小的身量直接比面前的人矮了一个头。而她面前的人同样一身黑斗篷，抬起的指尖留着长长的指甲，指向了外院的一处小洋楼：“今天的目标叫安向阳，男性，实力金色十等，虽然魔武未知，不过你的话一定不会有问题的。”说着，这名女性轻笑着收回了手：“那家伙是个超恶心的萝莉控，杀起来一定会很愉快的。”</div><div>“哎，萝莉控啊~”小个子的声音有些发甜，其中意味却令人不寒而栗：“感觉的确会很开心的样子。”</div><div>“不过要注意一点哦，那家伙的防壁魔法惊人的强。”</div><div>“那么，就把他打到魔力衰竭好啦~”说着，小个子少女手中已经握住了钢鞭，黑色斗篷下，碧绿色的光芒闪过，照亮了少女嘴角略微扭曲的笑容。下一刻，对方的身影消失在了眼前，站在原地的女性轻飘飘的抬起手，用纤长指甲的双手比出相机的镜头，宽袖滑下手腕，一个黑月的标记在那纤细而白皙的左腕上极为明显。视线扫过手腕的标记，女性随即握住了自己的手腕：“还有六个人就好......”</div><div>“但是，我已经有些迫不及待了啊。”</div><div>“与你一起得到自由什么的.....能够回到最初那样就好了。”</div>



<h2 id="第13章：自杀少女与「命运之轮」（三）"><a href="#第13章：自杀少女与「命运之轮」（三）" class="headerlink" title="第13章：自杀少女与「命运之轮」（三）"></a>第13章：自杀少女与「命运之轮」（三）</h2><div>视线落于桌面上展开的纸张，这个黑色的月亮，是之前与维姬战斗时，在她肩上看到的。</div><div>不同于封艾羽记忆中的「暗域」的火焰记号，但却将「暗域」之主的维姬作为一次性的炮灰使用，这个黑月所象征的到底是什么意义，这一点还尚且未能知晓。</div><div>但是自从看到开始就浮现的不安与反感，却是不会作假的。</div><div>忽然响起的敲门声打断封艾羽的思绪，从门外进来的人却有些令人出乎意料——</div><div>“安迪？这个时候居然没有在推妹子什么的，真稀奇啊。”有些惊讶的看着走进来的安向阳，虽说今晚是为了方便在外院行动而没有跟仙霖一起回内院，而是借宿在安向阳这里，不过对方会在这个时候来找她，实在是少见。</div><div>“有点在意的事，姑且还是想跟艾姐讲讲。”他那表情有些奇怪，令封艾羽不免越加在意：“关于今天那件事的吗？”</div><div>“差不多吧，我是想说维斯特来着。”安向阳一提，封艾羽也点了点头：“这个我也有点想问来着，维斯特的那个妹妹是怎么回事？”</div><div>“据说是在下界的时候，因为遇上沙暴而失散了。”安向阳说着，不自觉的皱了皱眉：“但是我觉得不太对，哪有这么巧的事情，恰好失散的两个人都有实力跨位面来到南院，又恰好在南院相遇了，巧合也太多了。”</div><div>“而且你当时说他找到妹妹的时候，他似乎有点过于紧张？”</div><div>“对，之前我说蹭他欧气的时候抓了一下他的手，他当时手心全是汗，整个人僵在那里。”</div><div>“如果只是怕自己和妹妹被牵连进去的话，这也太夸张了。”微微皱眉的垂下眸，封艾羽最后还是摇了摇头：“不过没有实质性的证据的话，这样擅自怀疑谁也太自主判断了。”</div><div>“要是维斯特听到你都说这种话，会伤心的吧。”说着，她朝安向阳一笑，正准备再说些什么，两人就同时猛然察觉到了惊人的魔力波动，立刻抬手抓起安向阳，封艾羽两人转头出现在了庭院上空。</div><div>只是，她们似乎还是晚了一步。</div><div>周围的结界包裹了安向阳在小洋楼外设置的「不落要塞」，此刻已经完全成型，所以现在除非对方主动解除，否则她们就只能将对方解决才能离开结界。</div><div>一条钢鞭从眼前疾驰而过，封艾羽立刻利用空间魔法带着安向阳转移，钢鞭便重重的抽在了「不落要塞」上，随即，维斯特也反应很快的从房间里冲了出来：“怎么了？！这是发生什么了？！”</div><div>“有三个人吗？这下真是有趣啦~”凌空而立的黑色人影发出了尚且稚嫩的微甜声音，就是握着鞭子的她看上去气氛不是很对：“那么，请问哪位是安向阳呢？”</div><div>“你是什么人？”</div><div>“这种时候，说什么都不会报上姓名的吧？”说着，少女抬手又是一鞭：“那边的姐姐请让开哦~人家的目标只有安向阳嘛~”灵蛇一般的钢鞭灵动的刺向三人，一击落空的同时又向四面八方射出倒刺。</div><div>“「吟唱省略·魔武解放——圣剑·杜兰德尔」！”几乎与此同时，一道剑气将倒刺全部挡下，正是刚刚出现在封艾羽身边的维斯特。从空间里掏出黑白双刃，封艾羽的身影突然闪现在对方身后：“既然如此，就请你到风纪委员部详细的说明吧！”</div><div>“风纪委员？”少女的行动顿了顿，随即传来嘲讽的笑声：“那还真要请教请教了——”</div><div>“原来是紫金十一等吗，难怪目标毫无反抗之力就被袭击了。”</div><div>“知道这一点的话，就别再给人家碍事了啊！”脱手的蛇鞭盘旋而上，毫不眷恋的冲向维斯特和安向阳，少女干脆直接与封艾羽缠斗起来，锐利的兽爪重重砸在那对黑白双刃之上，力道与她个头的大小几乎完全成反比，令人有些猝不及防，只差被砸进地下的封艾羽不由得越发谨慎起来。</div><div>另一边，维斯特与安向阳也并没能在那条钢鞭下讨到什么好，本该是对方分神掌控的魔武像是自己生出了灵智，若不是安向阳的「不落要塞」过于强悍，没有让那条钢鞭落在皮肉之上，大概已经被倒刺撕掉了一大块皮肉。</div><div>“「吟唱省略·钢色花园」！”钢鞭随稚嫩的话音落下而刺入地面，随后又以惊人的速度直接缠上了安向阳与维斯特的脚踝，下一刻，两个身影忽然变成了泡沫，再也寻觅不到他们的踪迹。还与封艾羽战斗着的少女咬了咬牙，其中一只兽爪变回人形，握住了自主回到身边的钢鞭，另一只则以惊人的速度从封艾羽侧脸擦过。</div><div>鲜血沿着脸颊滴落，望着眼前被挑开了斗篷兜帽的少女，封艾羽有些惊讶的看着那张脸。</div><div>玫红色的双螺旋卷发下，是一张过于稚嫩的脸，她咬着一口银牙，赤色的左眸深邃得接近黑色，但碧绿色的右眸却清亮无比，仿佛像是截然不同的两个人才能拥有的。</div><div>还有因为被一对羊角撑高的兜帽下，实际才到她胸前的身高——这是一只萝莉无疑了。</div><div>然而，视线猛然撞上那只清澈无比的碧绿色右眸时便开始模糊，封艾羽的动作也随之一滞，下一刻，面前的小萝莉腰间张开了巨大的蝠翼，然后双翼一挥，便如同离弦之箭般逃离了现场，连带着周围的结界也被她解开。而提前一步以泡沫为替身，被封艾羽藏入空间的安向阳与维斯特也随后显现身形。</div><div>没有追逐那个已经失去踪迹的小萝莉，封艾羽收起了黑白双刃，落下地面，脑海里的余震令她不由得摇了摇头。那一瞬间的视线模糊是因为对方的某种精神攻击，虽然因为她的全神戒备而无法造成什么切实的精神伤害，但要争取出脱身的时间还是没有问题的。</div><div>“艾姐，刚刚那个不会就是这段时间活动着的杀人狂吧？”</div><div>“杀人狂还说不定。”封艾羽摇了摇头，望向维斯特：“但维斯特当天看到的大概就是她没错了。”</div><div>“哎？为什么？”维斯特一愣。</div><div>“当时你说看到了黑色斗篷下有碧绿色光源吧，刚刚确定下来，那应该是她的右眼。”说着，封艾羽的视线落向周围的一切，刚刚因为那根钢鞭而被掀开的地面仿佛从未移动过，产生的建筑破坏也在对方的结界解除时抹消了。</div><div>会刻意布下结界，像这样注意到抹消周边的环境破坏的，如果说仅仅只是一个对自己实力过于自信的杀人狂的话，她难以理解，毕竟这本身就与那将尸体钉在外墙的高调行为相违背了。</div><div>如果说是为了现场不留痕迹，以防被追查到，那么只要把血淋淋的尸体随便找地方一扔，或者直接处理掉就可以，没必要用她钢鞭上的倒刺刻意将尸体钉在高高的建筑上。</div><div>如果说是一定要张扬自己的杀人行为，那一夜之间对周边环境造成的破坏应该更容易让他人将视线聚焦，在破坏之前设下结界以防别人闯入也就算了，但破坏之后还将结界里的一切修复，这种行为实在是令封艾羽无法理解。</div><div>正在这时，忽然响起的提示音打断了封艾羽进一步的沉思——这种时间，居然还有人来联系她吗？</div><div>光脑屏幕上，一个名字跳了出来，虽说有些疑惑，封艾羽还是接起了通讯：“喂，命姐。”</div><div>“很抱歉这种时候打扰你，具体情况之后会跟你说明。”</div><div>“总之，请你立刻到学生会室来一趟。”</div><div>“啊，好的......”听君初晓有些急切的意思，封艾羽应了一声，看向安向阳，就见他点了点头，随即拉着身旁维斯特回到了小洋楼。而封艾羽则是原地张开了空间传送阵，顺手用治愈魔法抹过侧脸的伤口就转眼间便穿过法阵出现在学生会室门外。</div><div>“请进。”轻叩门后得到了回应，封艾羽推门而入。</div><div>屋内，学生会长千景晴坐在办公桌前，君初晓和另一名身着蓝白配色校服，隶属于学生会的少女则站在面前。见封艾羽进来，三人的目光都落向了她，君初晓朝她露出一个歉意的笑：“这么晚还找你过来，抱歉啊。”</div><div>“没关系的，那个，我倒是比较在意让命姐这么急切的会是什么事。”封艾羽话音还未落，隶属学生会的那名少女就似乎迫不及待的立刻接过话头：“请容我直说吧，新生风纪委员封艾羽，你认识这个标志吗？”</div><div>被她出示的纸面上，是一朵焰火——一朵至今仍旧刻在她脑海中，挥之不去的焰火。</div><div>“是的。”虽说有着不太好的预感，但封艾羽却没有侧头去看君初晓的表情，而是毫不犹豫点点头：“这是「暗域」的标志。”听此，那名陌生少女的表情一凛，声音冰冷：“所以，我坚持我的看法，新生封艾羽有着于下界作乱的不良前科，应当立刻被剥夺属于风纪……”话还没说完，君初晓就当即打断了她：“你是说仅犯过一次错误的人就不需要改正的机会了吗？”</div><div>“还请你不要偷换概念，君部长。风委部不能够收录有作乱前科的学员，这是校规规定。”</div><div>“那你也应该知道，南院同样有明文规定，当学员的作乱行为有所凭据或者神志不清时，这条校规能够得到一定程度放宽。”</div><div>“但这并不包括亲手弑杀数千人。”她一副这件事已经板上钉钉的态度望向千景晴：“结论应该已经很清楚了，会长。”但她没想到的是，千景晴甩来一个冰封的目光：“你是在教我怎么做吗，爱丽丝·威尔华。”</div><div>“不，我并没有这个意思。”爱丽丝躬身向后退了一步，似乎对千景晴还是有一定程度的忌惮。</div>



<h2 id="第14章：自杀少女与「命运之轮」（四）【持续更新中】"><a href="#第14章：自杀少女与「命运之轮」（四）【持续更新中】" class="headerlink" title="第14章：自杀少女与「命运之轮」（四）【持续更新中】"></a>第14章：自杀少女与「命运之轮」（四）【持续更新中】</h2><h1 id="番外篇：（可能涉及剧透）"><a href="#番外篇：（可能涉及剧透）" class="headerlink" title="番外篇：（可能涉及剧透）"></a>番外篇：（可能涉及剧透）</h1><h2 id="番外一：各个cp的偶然小剧场"><a href="#番外一：各个cp的偶然小剧场" class="headerlink" title="番外一：各个cp的偶然小剧场"></a>番外一：各个cp的偶然小剧场</h2><div>羽影cp：（封艾羽X萧景殇）</div><div>——关于cp名称1——</div><div>羽：（在地上不停翻滚）其他组的cp名称都好棒啊……感觉想要一个更内涵的cp名称～</div><div>影：唔，因为对应「太阳」和「月亮」牌，所以也可以叫日月组呢……</div><div>羽：（笑容逐渐变态）日月组啊……的确很内涵。</div><div><br></div><div><br></div><div>——关于影——</div><div>影：说起来，为什么会叫我影呢？</div><div>羽：（陷入思考）唔……因为我将身后的一切托付给影了！</div><div>影：（感动）羽……</div><div>羽：【我才没有低情商到说“因为第一眼看到殇字的时候就觉得有好多撇，干脆和前面的景字凑在一起叫影好了”什么的嘞！】</div><div><br></div><div>——关于cp名称2——</div><div>君：小艾说想要一个有内涵的cp名啊……</div><div>影：（乖巧点头）</div><div>君：那……不然风（封）萧组？风萧萧兮易水寒……</div><div>影：（好像很厉害的样子）</div><div>羽：（不知道从哪里冒出来）不要！</div><div>羽：（一把抱住影）壮士一去兮不复还，什么的！我才不要！</div><div>影：（感动）羽……</div><div>综上，最后cp名称还是定为了羽影。</div><div><br></div><div>迪（翟）安cp：（翟尊X安莲娜）</div><div>——关于初次见面——</div><div>翟：（一副凶恶的模样）</div><div>安：你、你要做什么？！再靠近一步我开枪了啊！</div><div>翟：（当即停下脚步，盯着安莲娜）</div><div>安：听、听着，我可是魔女，再瞪我我就……</div><div>翟：（从衣袋里取出漂亮的印花餐巾纸，朝她递了过去）给。</div><div>安：（呆愣）什、什么？</div><div>翟：（指指嘴角）有奶油。</div><div>安：（一把抢过纸巾转身٩(\\Д\\)۶）？！！</div><div>安：（别扭）那什么……谢、谢谢啊。</div><div>翟：（莫名其妙的歪头）不用谢。</div><div><br></div><div>——关于甜品——</div><div>安：大杯巧克力圣代，两份！</div><div>服务员：（试图说明）客人，我们这里的大杯圣代分量很足的，您一个人可能……</div><div>翟：（抬头死亡凝视【误】）</div><div>服务员：（瑟瑟发抖）好的，两份大杯巧克力圣代……</div><div>【圣代端上桌后，服务员像逃命样的离开了】</div><div>安：（默默将放在了她面前的两杯圣代递给对方一杯）你推荐的这家，圣代看上去的确不错哎。</div><div>翟：（点头）甜度会很合适。</div><div>安：（迫不及待开动）奶油也很好啊，这种软绵绵的口感……</div><div>翟：（看着面前人吃甜品的样子走神）</div><div>安：（突然察觉）嗯？</div><div>翟：（手指抹去对方嘴角的奶油，神差鬼使的舔了一口）</div><div>安：٩(\\Д\\)۶（知道对方并非故意在撩但依旧被撩到）</div><div>翟：（丝毫不知道自己撩到了人）？</div><div><br></div><div><br></div><div>君臣cp：（君初晓X莫笙箫）</div><div>——关于表字——</div><div>莫：成年礼结束了吗？你看上去很开心啊。</div><div>君：嗯，初雪姐说我注定会成为拂晓的光，所以为我取字子命，君子命。</div><div>莫：子命即初晓啊……很好的表字呢。</div><div>君：啊，说起来，还没听说过你的表字哎？</div><div>莫：……</div><div>君：不能说？</div><div>莫：（笑）我表字少臣，所以，子命可愿做我的君上？</div><div>君：٩(\\Д\\)۶自、自然是愿意的……</div><div>直到后来，君初晓才在偶然间知道，少臣，是因为从出生就被注定了，要躬身作莫家嫡少爷的臣。</div><div>但没有对这个令人作呕的表字表示抗拒的唯一动机，是因为她姓君。</div><div><br></div><div><br></div><div>慕晴cp：（叶慕樱X千景晴）</div><div>——关于干将莫邪——</div><div>叶：如果按照东方古代的贵族阶级，学生会会长大概就是君主吧？</div><div>千：嗯，是这样没错。</div><div>叶：……</div><div>千：怎么了，樱？</div><div>叶：我突然不喜欢干将了。</div><div>千：为什么？</div><div>叶：因为……传说中的干将是弑君之剑啊，万一我没能控制好它，伤到你怎么办？</div><div>千：（愣）……</div><div>千：（忽然一笑）这么说的话，你现在不是在弑君吗？</div><div>叶：（惊）？！</div><div>千：（在惊呆的某人额头一吻）樱总是可爱得我心跳骤停，这难道不是弑君吗？</div><div>叶：٩(\\Д\\)۶（←_←因为意想不到的被撩而脸红）</div><div>千：٩(\\Д\\)۶（←_←因为觉得被撩到的对方更可爱了而脸红）</div><div><br></div><div>——关于迟到——</div><div>入学时……</div><div>千：（威严）整个南院都不需要比我到场更晚的学员。</div><div>叶：哦。</div><div>私下外出……</div><div>叶：（姗姗来迟）抱歉，等很久了吗？</div><div>千：没，我也刚刚到。</div><div><br></div><div><br></div><div>风雨cp：（蒲筱X付崎）</div><div><br></div><div>——关于态度1——</div><div>君：筱筱，能帮忙处理一下那边的文件吗？</div><div>蒲：（冷漠点头）嗯。</div><div>付：艾露小姐，我也来帮忙吧。</div><div>蒲：（笑颜如花）好的~</div><div>两人独处时......</div><div>付：（小声）明明对大家都这么冷漠，为什么艾露小姐却一直对我笑呢？</div><div>付：（小声）难道......只有我被特别讨厌了？！！所以用笑容来礼貌的疏远我吗？！</div><div>蒲：（疑惑）崎？</div><div>付：（委屈巴巴）艾露小姐，讨厌我了吗？</div><div>蒲：（忍俊不禁）你在说什么呢，我是不可能离开崎的呀。</div><div>付：٩(\\Д\\)۶（←_←虽然害羞但是超开心）</div><div><br></div><div>——关于态度2——</div><div>付：（纠结）明明已经是艾露小姐的恋人了，总感觉和以前没什么区别的样子啊......</div><div>莫：（情感调解专家的淡定【误】）如果偶尔表现出能够让对方依靠的强势，我想或许能够有所改变吧。</div><div>付：强势一面吗......</div><div>付：（暗暗握拳）好，我会努力的！</div><div>平常的战场上......</div><div>蒲筱手起音刃落，杀人如麻，宛若冷面修罗。</div><div>付：（猛虎落泪）TAT面对这样的艾露小姐，完全不知道该从哪里强势起来啊。</div><div>决战的战场上......</div><div>蒲：（煞气满身）你们去追，这里交给我。</div><div>付：（突然抓住对方手腕）请不要擅自逞强哦，艾露小姐。</div><div>付：（浅笑）如果失去您的话，我也会很困扰的。</div><div>蒲：٩(\\Д\\)۶（感觉有被无形撩到）</div><div><br></div><div>——关于幻境大招——</div><div>付：（笑着取下对方的眼镜）那么，晚安，艾露小姐。</div><div>蒲：（丝毫没有要睡的意思，甚至有些扭捏）</div><div>付：？</div><div>蒲：所以，晚安吻呢？</div><div><br></div><div><br></div><div>非cp部分：</div><div>——关于哥哥——</div><div>司空：（挺胸）我有哥哥，给我哭！</div><div>千：……</div><div>幻：（嚣张）有哥哥又怎么样，我有两个，快给我哭！</div><div>付&amp;朔：（无奈）……</div><div>珀薇：哼，两个又怎么样，我哥是妹控，全都给我哭！</div><div>维斯特：（一脸宠溺）乖。</div><div>幻&amp;司空：（咬帕子）为什么我们不仅有哥哥还有嫂子TAT</div><div><br></div><div>——疑似出轨？？——</div><div>叶：（一脸核善）说说看吧，那个跟你打电话的女生是谁。</div><div>蒲：今天不交代的话就别想回去了。</div><div>千&amp;付：（直男发问）女生？什么女生？</div><div>叶：还装傻吗？装傻今天就给我睡走廊地板。</div><div>蒲：对，装傻的话，明天早上也不用叫我起床了。</div><div>千&amp;付：（只是跟妹妹打了电话，完全不知道发生了什么的两个直男一脸蒙圈）？？？</div><div><br></div>]]></content>
      <categories>
        <category>文稿</category>
      </categories>
      <tags>
        <tag>《南城院校风纪委员部》</tag>
      </tags>
  </entry>
</search>
